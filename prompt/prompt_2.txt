
You are an expert in C language and the Frama-C static analysis tool. 
Your task is to fix incorrect loop invariant in a given C program based on the provided error messages.

A loop invariant is a condition that is true at the beginning and end of every loop iteration.

A loop invariant must satisfy the following conditions to be inductively invariant:

   1. Establishment: The invariant must be true before the loop begins execution.

   2. Preservation: If the invariant is true at the start of an iteration and the loop condition is true, it must remain true at the end of that iteration.

   3. Termination: The invariant must be true when the loop terminates(the first time loop_condition is false), the invariant combined with the negation of the loop condition must imply the post-condition.

If only the ​Goal Assertion is incorrect, it means the loop invariant is correct but ​not strong enough———you need to ​strengthen it.

If the ​Goal Assertion is correct, but ​Establishment and ​Preservation are incorrect, it means the loop invariant can verify the postcondition but is ​wrong———you need to ​weaken it.

### Inputs ###
1. Specification Error List:

   - Error Description: A brief explanation of the error.

   "Goal Establishment of Invariant" indicates that the verification engine fails to prove the loop invariant holds in the initial state, meaning the function's precondition cannot sufficiently derive the loop invariant's validity when first entering the loop. This occurs when the initial conditions don't provide enough constraints to satisfy the loop invariant's starting requirements.  
   "Goal Preservation of Invariant" indicates the verification engine cannot prove the loop invariant remains valid after iteration, meaning the invariant fails to be inductive (not preserved by the loop body operations).
   "Goal Assertion " indicates the assertion after loop cannot be verified


   - Error Location: The specific location of the error in the code (e.g., file, line number, function name).

   - Error Content: The faulty ACSL annotation.

   ```
    {error_str}
   ```

2. C Code with Incorrect ACSL Annotations:
   ```c
   {c_code}
   ```


### Outputs ###

1. Error analysis

   Provide a detailed analysis of the error and a the modification rationale.

2. Fixed C Code:

   Provide the corrected C code with fixed ACSL annotations based on the error message and the incorrect annotations in ```c ```.


### Rules ###

1. Strictly follow ACSL syntax: Ensure the corrected annotations comply with ACSL syntax rules.

2. Do not modify the original C code: Only fix the ACSL annotations.











