file:110.c
Successfully generated loop/110.json
INNER_FLAG: False
Variable Maps: [{'sn': '0', 'i': '1', 'n': 'n@pre'}]
Path conditions: [None]
Pre condition: (sn == 0) * (i == 1) * (n == n@pre)
Loop Condition: i <= n
Updated Loop Conditions: ['1 <= n@pre']
Global Unchanged Variables ['n']
Non Inductive Variables []
[{'sn': '0', 'i': '1', 'n': 'n@pre'}]
[None]

            
    /* >>> LOOP INVARIANT TO FILL <<< 
       >>> PRECONDITION OF THE LOOP : (sn == 0) * (i == 1) * (n == \at(n, Pre)) <<< */
    
            /*@
          loop invariant n == \at(n, Pre);
            */
            while (i <= n) {
      
      i  = (i + 1);
      sn  = (sn + 1);
  
    }
            

            
    /* >>> LOOP INVARIANT TO FILL <<< 
       >>> PRECONDITION OF THE LOOP : (sn == 0) * (i == 1) * (n == \at(n, Pre)) <<< */
    
            /*@
          loop invariant (1 <= \at(n, Pre)) ==> (((sn == 0)&&(i == 1)&&(n == \at(n, Pre))) || (PLACE_HOLDER_i));
          loop invariant (1 <= \at(n, Pre)) ==> (((sn == 0)&&(i == 1)&&(n == \at(n, Pre))) || (PLACE_HOLDER_sn));
          loop invariant (!(1 <= \at(n, Pre))) ==> ((sn == 0)&&(i == 1)&&(n == \at(n, Pre)));
          loop invariant n == \at(n, Pre);
            */
            while (i <= n) {
      
      i  = (i + 1);
      sn  = (sn + 1);
  
    }
            
/*@ requires n >= 1;
*/
void foo(int n) {

    int i = 1;
    int sn = 0;
    
    
    
            
    /* >>> LOOP INVARIANT TO FILL <<< 
       >>> PRECONDITION OF THE LOOP : (sn == 0) * (i == 1) * (n == \at(n, Pre)) <<< */
    
            /*@
          loop invariant (1 <= \at(n, Pre)) ==> (((sn == 0)&&(i == 1)&&(n == \at(n, Pre))) || (PLACE_HOLDER_i));
          loop invariant (1 <= \at(n, Pre)) ==> (((sn == 0)&&(i == 1)&&(n == \at(n, Pre))) || (PLACE_HOLDER_sn));
          loop invariant (!(1 <= \at(n, Pre))) ==> ((sn == 0)&&(i == 1)&&(n == \at(n, Pre)));
          loop invariant n == \at(n, Pre);
            */
            while (i <= n) {
      
      i  = (i + 1);
      sn  = (sn + 1);
  
    }
            
    
    /*@ assert (sn!= n) ==> (sn ==0); */
  
  }
```c
/*@ requires n >= 1;
*/
void foo(int n) {

    int i = 1;
    int sn = 0;
    
            
            /*@
          loop invariant (1 <= \at(n, Pre)) ==> (((sn == 0)&&(i == 1)&&(n == \at(n, Pre))) || (i >= 1 && i <= n + 1));
          loop invariant (1 <= \at(n, Pre)) ==> (((sn == 0)&&(i == 1)&&(n == \at(n, Pre))) || (sn == i - 1));
          loop invariant !(1 <= \at(n, Pre) ) ==> ((sn == 0)&&(i == 1)&&(n == \at(n, Pre)));
          loop invariant n == \at(n, Pre);
            */
            while (i <= n) {
      
      i  = (i + 1);
      sn  = (sn + 1);
  
    }
            
    
    /*@ assert (sn!= n) ==> (sn ==0); */
  
}
```

/*@ requires n >= 1;
*/
void foo(int n) {

    int i = 1;
    int sn = 0;
    
            
            /*@
          loop invariant (1 <= \at(n, Pre)) ==> (((sn == 0)&&(i == 1)&&(n == \at(n, Pre))) || (i >= 1 && i <= n + 1));
          loop invariant (1 <= \at(n, Pre)) ==> (((sn == 0)&&(i == 1)&&(n == \at(n, Pre))) || (sn == i - 1));
          loop invariant !(1 <= \at(n, Pre) ) ==> ((sn == 0)&&(i == 1)&&(n == \at(n, Pre)));
          loop invariant n == \at(n, Pre);
            */
            while (i <= n) {
      
      i  = (i + 1);
      sn  = (sn + 1);
  
    }
            
    
    /*@ assert (sn!= n) ==> (sn ==0); */
  
}


/*@ requires n >= 1;
*/
void foo(int n) {

    int i = 1;
    int sn = 0;
    
            
            /*@
          loop invariant (1 <= \at(n, Pre)) ==> (((sn == 0)&&(i == 1)&&(n == \at(n, Pre))) || (i >= 1 && i <= n + 1));
          loop invariant (1 <= \at(n, Pre)) ==> (((sn == 0)&&(i == 1)&&(n == \at(n, Pre))) || (sn == i - 1));
          loop invariant !(1 <= \at(n, Pre) ) ==> ((sn == 0)&&(i == 1)&&(n == \at(n, Pre)));
          loop invariant n == \at(n, Pre);
            */
            while (i <= n) {
      
      i  = (i + 1);
      sn  = (sn + 1);
  
    }
            
    
    /*@ assert (sn!= n) ==> (sn ==0); */
  
}

syntax Correct
Validate:
[True, True, True, True]

Verify:
[True]

CORRECT INVARIANT
syntax Correct
Validate:
[True, True, True, True]

Verify:
[True]

/*@
          loop invariant (1 <= \at(n, Pre)) ==> (((sn == 0)&&(i == 1)&&(n == \at(n, Pre))) || (i >= 1 && i <= n + 1));
          loop invariant (1 <= \at(n, Pre)) ==> (((sn == 0)&&(i == 1)&&(n == \at(n, Pre))) || (sn == i - 1));
          loop invariant !(1 <= \at(n, Pre) ) ==> ((sn == 0)&&(i == 1)&&(n == \at(n, Pre)));
          loop invariant n == \at(n, Pre);
            */
            while (i <= n) {
      
      i  = (i + 1);
      sn  = (sn + 1);
  
    }
继续符号执行
/*@ Inv
    ((1 <= n@pre) => (((sn == 0)&&(i == 1)&&(n == n@pre)) || (i >= 1 && i <= n + 1))) &&
((1 <= n@pre) => (((sn == 0)&&(i == 1)&&(n == n@pre)) || (sn == i - 1))) &&
(!(1 <= n@pre ) => ((sn == 0)&&(i == 1)&&(n == n@pre))) &&
(n == n@pre)
    */
    
            while (i <= n) {
      
      i  = (i + 1);
      sn  = (sn + 1);
  
    }
File found: ../sac_c_parser/test/../ip_postcond/goal/110_goal.v. Deleting the file.
File found: ../sac_c_parser/test/../ip_postcond/goal/110_proof_auto.v. Deleting the file.
File found: ../sac_c_parser/test/../ip_postcond/goal/110_proof_manual.v. Deleting the file.
LoopEntry_0:
(sn == 0) * (i == 1) * (n == n@pre)
free(): invalid pointer

Successfully generated loop/110.json
syntax Correct
Validate:
[True, True, True, True]

Verify:
[True]

已移动文件: 110.c -> finish1
-----------------------------------------

文件 110.c 处理完成. 总耗时: 49.78996706008911
-----------------------------------------
finshed_files:['7.c', '48.c', '21.c', '110.c']
