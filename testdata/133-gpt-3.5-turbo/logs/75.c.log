file:75.c
Successfully generated loop/75.json
INNER_FLAG: False
Variable Maps: [{'z': '36 * y@pre', 'c': '0', 'x3': 'x3@pre', 'x2': 'x2@pre', 'x1': 'x1@pre', 'y': 'y@pre'}]
Path conditions: ['0 <= y@pre && y@pre <= 127']
Pre condition: 0 <= y@pre && y@pre <= 127 && (z == 36 * y@pre) * (c == 0) * (x3 == x3@pre) * (x2 == x2@pre) * (x1 == x1@pre) * (y == y@pre)
Loop Condition: unknown()
Updated Loop Conditions: ['unknown()']
Global Unchanged Variables ['x3', 'x2', 'x1', 'y']
Non Inductive Variables []
[{'z': '36 * y@pre', 'c': '0', 'x3': 'x3@pre', 'x2': 'x2@pre', 'x1': 'x1@pre', 'y': 'y@pre'}]
['0 <= y@pre && y@pre <= 127']

            
    /* >>> LOOP INVARIANT TO FILL <<< 
       >>> PRECONDITION OF THE LOOP : 0 <= \at(y, Pre) && \at(y, Pre) <= 127 && (z == 36 * \at(y, Pre)) * (c == 0) * (x3 == \at(x3, Pre)) * (x2 == \at(x2, Pre)) * (x1 == \at(x1, Pre)) * (y == \at(y, Pre)) <<< */
    
            /*@
          loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (x3 == \at(x3, Pre));
          loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (x2 == \at(x2, Pre));
          loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (x1 == \at(x1, Pre));
          loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (y == \at(y, Pre));
            */
            while (unknown()) {

    if ( c < 36 )
    {
    z  = z + 1;
    c  = c + 1;
    }
  }
            

            
    /* >>> LOOP INVARIANT TO FILL <<< 
       >>> PRECONDITION OF THE LOOP : 0 <= \at(y, Pre) && \at(y, Pre) <= 127 && (z == 36 * \at(y, Pre)) * (c == 0) * (x3 == \at(x3, Pre)) * (x2 == \at(x2, Pre)) * (x1 == \at(x1, Pre)) * (y == \at(y, Pre)) <<< */
    
            /*@
          loop invariant  (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (((z == 36 * \at(y, Pre))&&(c == 0)&&(x3 == \at(x3, Pre))&&(x2 == \at(x2, Pre))&&(x1 == \at(x1, Pre))&&(y == \at(y, Pre))) || (PLACE_HOLDER_c)) ;
          loop invariant  (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (((z == 36 * \at(y, Pre))&&(c == 0)&&(x3 == \at(x3, Pre))&&(x2 == \at(x2, Pre))&&(x1 == \at(x1, Pre))&&(y == \at(y, Pre))) || (PLACE_HOLDER_z)) ;
          loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (x3 == \at(x3, Pre));
          loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (x2 == \at(x2, Pre));
          loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (x1 == \at(x1, Pre));
          loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (y == \at(y, Pre));
            */
            while (unknown()) {

    if ( c < 36 )
    {
    z  = z + 1;
    c  = c + 1;
    }
  }
            
int unknown();
/*@ requires 0 <= y && y <= 127; */
void foo(int y,int x1,int x2,int x3) {
  int c = 0;
  int z = 36 * y;
  

  
            
    /* >>> LOOP INVARIANT TO FILL <<< 
       >>> PRECONDITION OF THE LOOP : 0 <= \at(y, Pre) && \at(y, Pre) <= 127 && (z == 36 * \at(y, Pre)) * (c == 0) * (x3 == \at(x3, Pre)) * (x2 == \at(x2, Pre)) * (x1 == \at(x1, Pre)) * (y == \at(y, Pre)) <<< */
    
            /*@
          loop invariant  (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (((z == 36 * \at(y, Pre))&&(c == 0)&&(x3 == \at(x3, Pre))&&(x2 == \at(x2, Pre))&&(x1 == \at(x1, Pre))&&(y == \at(y, Pre))) || (PLACE_HOLDER_c)) ;
          loop invariant  (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (((z == 36 * \at(y, Pre))&&(c == 0)&&(x3 == \at(x3, Pre))&&(x2 == \at(x2, Pre))&&(x1 == \at(x1, Pre))&&(y == \at(y, Pre))) || (PLACE_HOLDER_z)) ;
          loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (x3 == \at(x3, Pre));
          loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (x2 == \at(x2, Pre));
          loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (x1 == \at(x1, Pre));
          loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (y == \at(y, Pre));
            */
            while (unknown()) {

    if ( c < 36 )
    {
    z  = z + 1;
    c  = c + 1;
    }
  }
            
    /*@ assert  ( c < 36 ) ==> ( z >= 0 ) ; */
      
  
}
### Analysis of the Loop

a. **Purpose and Structure of the Loop:**
The purpose of the loop is to increment the variable `z` and the counter `c` until `c` reaches 36. The loop continues as long as the condition `unknown()` is true. Inside the loop, if `c` is less than 36, `z` is incremented by 1 and `c` is also incremented by 1.

The relevant variables affecting the loop's behavior are:
- `c`: a counter initialized to 0, which tracks how many times the loop has executed.
- `z`: initialized to `36 * y`, which will be incremented by the loop.

b. **Discussion of the Loop Invariant:**
The proposed loop invariant states that certain conditions about `z`, `c`, `x1`, `x2`, `x3`, and `y` hold true at the start and end of each loop iteration. Specifically, it ensures that `z` is always equal to `36 * y + c`, where `c` is the number of iterations that have occurred. The invariant maintains the equality relationship and the bounds of all involved variables.

c. **Establishment:**
Before the loop begins, `c` is initialized to 0, and `z` is initialized to `36 * y`. Thus, it holds that:
- `z == 36 * y`
- `c == 0`
The invariant is true before the loop starts since it reflects the initial state.

d. **Preservation:**
If the invariant holds at the start of an iteration (i.e., `z == 36 * y + c`), and `c < 36` (the loop condition), upon incrementing `z` and `c`, we get:
- After the increment, `z` becomes `z + 1`, and `c` becomes `c + 1`. 
Thus, the new value of `z` is `36 * y + (c + 1)`, which is consistent with the invariant.

e. **Termination Analysis of the Loop:**
The loop terminates when `c` is no longer less than 36. At this point, since `c` has been incremented from 0 to 36, we have:
- `c == 36`
- `z` will be `36 * y + 36`. The invariant still holds as it states that `z == 36 * y + c`.

f. **Correctness of the Post-condition:**
When the loop terminates, `c` is exactly 36. The post-condition asserts that if `c < 36` then `z >= 0`. Since `c` cannot be less than 36 at termination, this post-condition will always hold true.

g. **Implication of the Pre-condition:**
The pre-condition ensures that `y` is in the valid range (0 to 127), which guarantees that `z` is initialized correctly and remains bounded throughout the loop execution.

### Complete C Loop Program with Invariant Annotations

```c
int unknown();
/*@ requires 0 <= y && y <= 127; */
void foo(int y,int x1,int x2,int x3) {
  int c = 0;
  int z = 36 * y;

  
            
    /* >>> LOOP INVARIANT TO FILL <<< 
       >>> PRECONDITION OF THE LOOP : 0 <= \at(y, Pre) && \at(y, Pre) <= 127 && (z == 36 * \at(y, Pre)) * (c == 0) * (x3 == \at(x3, Pre)) * (x2 == \at(x2, Pre)) * (x1 == \at(x1, Pre)) * (y == \at(y, Pre)) <<< */
    
            /*@
          loop invariant  (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (((z == 36 * \at(y, Pre))&&(c == 0)&&(x3 == \at(x3, Pre))&&(x2 == \at(x2, Pre))&&(x1 == \at(x1, Pre))&&(y == \at(y, Pre))) || (c == k && z == \at(z, Pre) + k)) ;
          loop invariant  (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (((z == 36 * \at(y, Pre))&&(c == 0)&&(x3 == \at(x3, Pre))&&(x2 == \at(x2, Pre))&&(x1 == \at(x1, Pre))&&(y == \at(y, Pre))) || (c == 36)) ;
          loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (x3 == \at(x3, Pre));
          loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (x2 == \at(x2, Pre));
          loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (x1 == \at(x1, Pre));
          loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (y == \at(y, Pre));
            */
            while (unknown()) {

    if ( c < 36 )
    {
    z  = z + 1;
    c  = c + 1;
    }
  }
            
    /*@ assert  ( c < 36 ) ==> ( z >= 0 ) ; */
      
  
}
```

int unknown();
/*@ requires 0 <= y && y <= 127; */
void foo(int y,int x1,int x2,int x3) {
  int c = 0;
  int z = 36 * y;

  
            
            /*@
          loop invariant  (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (((z == 36 * \at(y, Pre))&&(c == 0)&&(x3 == \at(x3, Pre))&&(x2 == \at(x2, Pre))&&(x1 == \at(x1, Pre))&&(y == \at(y, Pre))) || (c == k && z == \at(z, Pre) + k)) ;
          loop invariant  (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (((z == 36 * \at(y, Pre))&&(c == 0)&&(x3 == \at(x3, Pre))&&(x2 == \at(x2, Pre))&&(x1 == \at(x1, Pre))&&(y == \at(y, Pre))) || (c == 36)) ;
          loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (x3 == \at(x3, Pre));
          loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (x2 == \at(x2, Pre));
          loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (x1 == \at(x1, Pre));
          loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (y == \at(y, Pre));
            */
            while (unknown()) {

    if ( c < 36 )
    {
    z  = z + 1;
    c  = c + 1;
    }
  }
            
    /*@ assert  ( c < 36 ) ==> ( z >= 0 ) ; */
      
  
}


int unknown();
/*@ requires 0 <= y && y <= 127; */
void foo(int y,int x1,int x2,int x3) {
  int c = 0;
  int z = 36 * y;

  
            
            /*@
          loop invariant  (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (((z == 36 * \at(y, Pre))&&(c == 0)&&(x3 == \at(x3, Pre))&&(x2 == \at(x2, Pre))&&(x1 == \at(x1, Pre))&&(y == \at(y, Pre))) || (c == k && z == 36 * \at(y, Pre) + k)) ;
          loop invariant  (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (((z == 36 * \at(y, Pre))&&(c == 0)&&(x3 == \at(x3, Pre))&&(x2 == \at(x2, Pre))&&(x1 == \at(x1, Pre))&&(y == \at(y, Pre))) || (c == 36)) ;
          loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (x3 == \at(x3, Pre));
          loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (x2 == \at(x2, Pre));
          loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (x1 == \at(x1, Pre));
          loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (y == \at(y, Pre));
            */
            while (unknown()) {

    if ( c < 36 )
    {
    z  = z + 1;
    c  = c + 1;
    }
  }
            
    /*@ assert  ( c < 36 ) ==> ( z >= 0 ) ; */
      
  
}

syntax Error
[kernel] Parsing output/75.c (with preprocessing)
[kernel:annot-error] output/75.c:11: Warning: 
  unbound logic variable k. Ignoring loop annotation
[kernel] User Error: warning annot-error treated as fatal error.
[kernel] Frama-C aborted: invalid user input.

after repair

int unknown();
/*@ requires 0 <= y && y <= 127; */
void foo(int y,int x1,int x2,int x3) {
  int c = 0;
  int z = 36 * y;

  
            
            /*@
          loop invariant  (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (((z == 36 * \at(y, Pre))&&(c == 0)&&(x3 == \at(x3, Pre))&&(x2 == \at(x2, Pre))&&(x1 == \at(x1, Pre))&&(y == \at(y, Pre))) || (c <= 36 && z == 36 * \at(y, Pre) + c)) ;
          loop invariant  (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (((z == 36 * \at(y, Pre))&&(c == 0)&&(x3 == \at(x3, Pre))&&(x2 == \at(x2, Pre))&&(x1 == \at(x1, Pre))&&(y == \at(y, Pre))) || (c == 36)) ;
          loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (x3 == \at(x3, Pre));
          loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (x2 == \at(x2, Pre));
          loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (x1 == \at(x1, Pre));
          loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (y == \at(y, Pre));
            */
            while (unknown()) {

    if ( c < 36 )
    {
    z  = z + 1;
    c  = c + 1;
    }
  }
            
    /*@ assert  ( c < 36 ) ==> ( z >= 0 ) ; */
      
  
}

syntax Correct
Validate:
[True, False, True, True, True, True]

Goal Preservation of Invariant (file output/75.c, line 12):
Let x = 36 * y.
Let x_1 = c + x.
Let x_2 = 1 + z.
Assume {
  Type: is_sint32(c) /\ is_sint32(tmp_0) /\ is_sint32(y) /\ is_sint32(z) /\
      is_sint32(x) /\ is_sint32(1 + c) /\ is_sint32(x_2).
  (* Residual *)
  When: c <= 35.
  (* Goal *)
  When: (0 <= y) /\ (y <= 127).
  (* Invariant *)
  Have: ((c = 0) /\ (x = z)) \/ ((x_1 = z) /\ (c <= 36)).
  (* Invariant *)
  Have: (c = 36) \/ ((c = 0) /\ (x = z)).
  (* Then *)
  Have: tmp_0 != 0.
  (* Invariant *)
  Have: (x_1 = z) \/ ((c = (-1)) /\ (x_2 = x)).
}
Prove: (c = 35) \/ ((c = (-1)) /\ (x_2 = x)).
Prover Z3 4.8.12 returns Timeout (Qed:24ms) (3s)
Error found in file: output/75.c at line: 12
Error line content: loop invariant  (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (((z == 36 * \at(y, Pre))&&(c == 0)&&(x3 == \at(x3, Pre))&&(x2 == \at(x2, Pre))&&(x1 == \at(x1, Pre))&&(y == \at(y, Pre))) || (c == 36)) ;

Verify:
[True]


int unknown();
/*@ requires 0 <= y && y <= 127; */
void foo(int y,int x1,int x2,int x3) {
  int c = 0;
  int z = 36 * y;

  
            
            /*@
          loop invariant  (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (((z == 36 * \at(y, Pre))&&(c == 0)&&(x3 == \at(x3, Pre))&&(x2 == \at(x2, Pre))&&(x1 == \at(x1, Pre))&&(y == \at(y, Pre))) || (c <= 36 && z == 36 * \at(y, Pre) + c)) ;
          loop invariant  (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (((z == 36 * \at(y, Pre))&&(c == 0)&&(x3 == \at(x3, Pre))&&(x2 == \at(x2, Pre))&&(x1 == \at(x1, Pre))&&(y == \at(y, Pre))) || (c == 36))  [INVARIANT FAILED] ;
          loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (x3 == \at(x3, Pre));
          loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (x2 == \at(x2, Pre));
          loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (x1 == \at(x1, Pre));
          loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (y == \at(y, Pre));
            */
            while (unknown()) {

    if ( c < 36 )
    {
    z  = z + 1;
    c  = c + 1;
    }
  }
            
    /*@ assert  ( c < 36 ) ==> ( z >= 0 ) ; */
      
  
}

1. **Error Analysis:**

   The error message indicates that there is a problem with the preservation of the loop invariant. Specifically, the invariant that checks for `c == 36` is failing to hold true after some iterations of the loop. Given that the loop increments `c` and `z` until `c` reaches 36, we need to modify this invariant to account for the relationship between `c` and `z` more flexibly. 

   The original invariant `c == 36` is too strict because it doesn't account for the range of values that `c` can take during the loop's execution (from 0 to 36). Instead of requiring `c` to be exactly 36, we can change it to allow for it to be less than or equal to 36 while also relating `z` to `c`. This way, we maintain the integrity of the invariant without the strict equality constraint that causes failures.

2. **Fixed C Code:**

   ```c
   int unknown();
   /*@ requires 0 <= y && y <= 127; */
   void foo(int y,int x1,int x2,int x3) {
     int c = 0;
     int z = 36 * y;

     /*@
       loop invariant  (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (((z == 36 * \at(y, Pre))&&(c == 0)&&(x3 == \at(x3, Pre))&&(x2 == \at(x2, Pre))&&(x1 == \at(x1, Pre))&&(y == \at(y, Pre))) || (c <= 36 && z == 36 * \at(y, Pre) + c)) ;
       loop invariant  (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (((z == 36 * \at(y, Pre))&&(c == 0)&&(x3 == \at(x3, Pre))&&(x2 == \at(x2, Pre))&&(x1 == \at(x1, Pre))&&(y == \at(y, Pre))) || (c <= 36)) ;
       loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (x3 == \at(x3, Pre));
       loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (x2 == \at(x2, Pre));
       loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (x1 == \at(x1, Pre));
       loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (y == \at(y, Pre));
     */
     while (unknown()) {
       if ( c < 36 ) {
         z  = z + 1;
         c  = c + 1;
       }
     }
     
     /*@ assert  ( c < 36 ) ==> ( z >= 0 ) ; */
   }
   ```
after weaken

   int unknown();
   /*@ requires 0 <= y && y <= 127; */
   void foo(int y,int x1,int x2,int x3) {
     int c = 0;
     int z = 36 * y;

     /*@
       loop invariant  (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (((z == 36 * \at(y, Pre))&&(c == 0)&&(x3 == \at(x3, Pre))&&(x2 == \at(x2, Pre))&&(x1 == \at(x1, Pre))&&(y == \at(y, Pre))) || (c <= 36 && z == 36 * \at(y, Pre) + c)) ;
       loop invariant  (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (((z == 36 * \at(y, Pre))&&(c == 0)&&(x3 == \at(x3, Pre))&&(x2 == \at(x2, Pre))&&(x1 == \at(x1, Pre))&&(y == \at(y, Pre))) || (c <= 36)) ;
       loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (x3 == \at(x3, Pre));
       loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (x2 == \at(x2, Pre));
       loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (x1 == \at(x1, Pre));
       loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (y == \at(y, Pre));
     */
     while (unknown()) {
       if ( c < 36 ) {
         z  = z + 1;
         c  = c + 1;
       }
     }
     
     /*@ assert  ( c < 36 ) ==> ( z >= 0 ) ; */
   }
   
syntax Correct
Validate:
[True, True, True, True, True, True]

Verify:
[False]

Goal Assertion (file output/75.c, line 23):
Let x = 36 * y.
Assume {
  Type: is_sint32(c) /\ is_sint32(y) /\ is_sint32(z) /\ is_sint32(x).
  (* Goal *)
  When: c <= 35.
  (* Pre-condition *)
  Have: (0 <= y) /\ (y <= 127).
  (* Invariant *)
  Have: ((c = 0) /\ (x = z)) \/ (((c + x) = z) /\ (c <= 36)).
  (* Invariant *)
  Have: (c <= 36) \/ ((c = 0) /\ (x = z)).
}
Prove: 0 <= z.
Prover Z3 4.8.12 returns Timeout (Qed:8ms) (3s)
Error found in file: output/75.c at line: 23
Error line content: /*@ assert  ( c < 36 ) ==> ( z >= 0 ) ; */

1. **Error Analysis:**

   The error reported indicates that the assertion `/*@ assert  ( c < 36 ) ==> ( z >= 0 ) ; */` is not strong enough to ensure that `z` will always be non-negative when `c` is less than 36. The loop invariant needs to be strengthened to ensure that the relationship between `c` and `z` is more explicitly defined, particularly given that `z` is incremented in the loop and initially set to `36 * y`. Since `y` is constrained to be between 0 and 127, `z` should be non-negative. However, we need to strengthen the loop invariant to explicitly state that `z` is indeed at least 0 throughout the iterations of the loop, especially as `c` increments.

2. **Fixed C Code:**

```c
   int unknown();
   /*@ requires 0 <= y && y <= 127; */
   void foo(int y,int x1,int x2,int x3) {
     int c = 0;
     int z = 36 * y;

     /*@
       loop invariant  (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (((z == 36 * \at(y, Pre))&&(c == 0)&&(x3 == \at(x3, Pre))&&(x2 == \at(x2, Pre))&&(x1 == \at(x1, Pre))&&(y == \at(y, Pre))) || (c <= 36 && z == 36 * \at(y, Pre) + c)) ;
       loop invariant  (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (((z == 36 * \at(y, Pre))&&(c == 0)&&(x3 == \at(x3, Pre))&&(x2 == \at(x2, Pre))&&(x1 == \at(x1, Pre))&&(y == \at(y, Pre))) || (c <= 36 && z >= 0)) ;
       loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (x3 == \at(x3, Pre));
       loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (x2 == \at(x2, Pre));
       loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (x1 == \at(x1, Pre));
       loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (y == \at(y, Pre));
     */
     while (unknown()) {
       if ( c < 36 ) {
         z  = z + 1;
         c  = c + 1;
       }
     }
     
     /*@ assert  ( c < 36 ) ==> ( z >= 0 ) ; */
   }
```
after strength

   int unknown();
   /*@ requires 0 <= y && y <= 127; */
   void foo(int y,int x1,int x2,int x3) {
     int c = 0;
     int z = 36 * y;

     /*@
       loop invariant  (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (((z == 36 * \at(y, Pre))&&(c == 0)&&(x3 == \at(x3, Pre))&&(x2 == \at(x2, Pre))&&(x1 == \at(x1, Pre))&&(y == \at(y, Pre))) || (c <= 36 && z == 36 * \at(y, Pre) + c)) ;
       loop invariant  (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (((z == 36 * \at(y, Pre))&&(c == 0)&&(x3 == \at(x3, Pre))&&(x2 == \at(x2, Pre))&&(x1 == \at(x1, Pre))&&(y == \at(y, Pre))) || (c <= 36 && z >= 0)) ;
       loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (x3 == \at(x3, Pre));
       loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (x2 == \at(x2, Pre));
       loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (x1 == \at(x1, Pre));
       loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (y == \at(y, Pre));
     */
     while (unknown()) {
       if ( c < 36 ) {
         z  = z + 1;
         c  = c + 1;
       }
     }
     
     /*@ assert  ( c < 36 ) ==> ( z >= 0 ) ; */
   }

syntax Correct
Validate:
[True, True, True, True, True, True]

Verify:
[True]

/*@
       loop invariant  (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (((z == 36 * \at(y, Pre))&&(c == 0)&&(x3 == \at(x3, Pre))&&(x2 == \at(x2, Pre))&&(x1 == \at(x1, Pre))&&(y == \at(y, Pre))) || (c <= 36 && z == 36 * \at(y, Pre) + c)) ;
       loop invariant  (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (((z == 36 * \at(y, Pre))&&(c == 0)&&(x3 == \at(x3, Pre))&&(x2 == \at(x2, Pre))&&(x1 == \at(x1, Pre))&&(y == \at(y, Pre))) || (c <= 36 && z >= 0)) ;
       loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (x3 == \at(x3, Pre));
       loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (x2 == \at(x2, Pre));
       loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (x1 == \at(x1, Pre));
       loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (y == \at(y, Pre));
     */
     while (unknown()) {
       if ( c < 36 ) {
         z  = z + 1;
         c  = c + 1;
       }
     }
继续符号执行
/*@ Inv
    ((0 <= y@pre && y@pre <= 127) => (((z == 36 * y@pre)&&(c == 0)&&(x3 == x3@pre)&&(x2 == x2@pre)&&(x1 == x1@pre)&&(y == y@pre)) || (c <= 36 && z == 36 * y@pre + c)) ) &&
((0 <= y@pre && y@pre <= 127) => (((z == 36 * y@pre)&&(c == 0)&&(x3 == x3@pre)&&(x2 == x2@pre)&&(x1 == x1@pre)&&(y == y@pre)) || (c <= 36 && z >= 0)) ) &&
((0 <= y@pre && y@pre <= 127) => (x3 == x3@pre)) &&
((0 <= y@pre && y@pre <= 127) => (x2 == x2@pre)) &&
((0 <= y@pre && y@pre <= 127) => (x1 == x1@pre)) &&
((0 <= y@pre && y@pre <= 127) => (y == y@pre))
    */
    
     while (unknown()) {
       if ( c < 36 ) {
         z  = z + 1;
         c  = c + 1;
       }
     }
File found: ../sac_c_parser/test/../ip_postcond/goal/75_goal.v. Deleting the file.
File found: ../sac_c_parser/test/../ip_postcond/goal/75_proof_auto.v. Deleting the file.
File found: ../sac_c_parser/test/../ip_postcond/goal/75_proof_manual.v. Deleting the file.
LoopEntry_0:
0 <= y@pre && y@pre <= 127 && (z == 36 * y@pre) * (c == 0) * (x3 == x3@pre) * (x2 == x2@pre) * (x1 == x1@pre) * (y == y@pre)

Successfully generated loop/75.json
syntax Correct
Validate:
[True, True, True, True, True, True]

Verify:
[True]

已移动文件: 75.c -> finish1
-----------------------------------------

文件 75.c 处理完成. 总耗时: 125.4265763759613
-----------------------------------------
finshed_files:['8.c', '84.c', '83.c', '111.c', '47.c', '14.c', '49.c', '131.c', '119.c', '43.c', '50.c', '56.c', '18.c', '53.c', '35.c', '10.c', '28.c', '26.c', '73.c', '89.c', '126.c', '96.c', '57.c', '37.c', '36.c', '92.c', '68.c', '115.c', '71.c', '91.c', '22.c', '19.c', '124.c', '52.c', '100.c', '95.c', '90.c', '86.c', '128.c', '62.c', '77.c', '79.c', '108.c', '129.c', '34.c', '123.c', '98.c', '41.c', '27.c', '106.c', '58.c', '130.c', '20.c', '85.c', '15.c', '75.c']
