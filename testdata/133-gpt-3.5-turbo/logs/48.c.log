file:48.c
Successfully generated loop/48.json
INNER_FLAG: False
Variable Maps: [{'c': '0', 'n': 'n@pre'}]
Path conditions: ['n@pre > 0']
Pre condition: n@pre > 0 && (c == 0) * (n == n@pre)
Loop Condition: unknown()
Updated Loop Conditions: ['unknown()']
Global Unchanged Variables ['n']
Non Inductive Variables ['c']
[{'c': '0', 'n': 'n@pre'}]
['n@pre > 0']

            
    /* >>> LOOP INVARIANT TO FILL <<< 
       >>> PRECONDITION OF THE LOOP : \at(n, Pre) > 0 && (c == 0) * (n == \at(n, Pre)) <<< */
    
            /*@
          loop invariant (\at(n, Pre) > 0) ==> (n == \at(n, Pre));
            */
            while (unknown()) {
        {
          if (unknown()) {
            if ( c != n )
            {
            c  = c + 1;
            }
          } else {
            if (c == n) 
            {
            c  = 1;
            }
          }
    
        }
    
    }
            

            
    /* >>> LOOP INVARIANT TO FILL <<< 
       >>> PRECONDITION OF THE LOOP : \at(n, Pre) > 0 && (c == 0) * (n == \at(n, Pre)) <<< */
    
            /*@
          loop invariant  (\at(n, Pre) > 0) ==> (((c == 0)&&(n == \at(n, Pre))) || (PLACE_HOLDER_c)) ;
          loop invariant (\at(n, Pre) > 0) ==> (n == \at(n, Pre));
            */
            while (unknown()) {
        {
          if (unknown()) {
            if ( c != n )
            {
            c  = c + 1;
            }
          } else {
            if (c == n) 
            {
            c  = 1;
            }
          }
    
        }
    
    }
            
int unknown();

/*@ requires n > 0; */
void foo(int n)  {

    int c = 0;

    
            
    /* >>> LOOP INVARIANT TO FILL <<< 
       >>> PRECONDITION OF THE LOOP : \at(n, Pre) > 0 && (c == 0) * (n == \at(n, Pre)) <<< */
    
            /*@
          loop invariant  (\at(n, Pre) > 0) ==> (((c == 0)&&(n == \at(n, Pre))) || (PLACE_HOLDER_c)) ;
          loop invariant (\at(n, Pre) > 0) ==> (n == \at(n, Pre));
            */
            while (unknown()) {
        {
          if (unknown()) {
            if ( c != n )
            {
            c  = c + 1;
            }
          } else {
            if (c == n) 
            {
            c  = 1;
            }
          }
    
        }
    
    }
             
             
    /*@ assert (c == n) ==> (n > - 1); */
    

  

}
```c
/*@ requires n > 0; */
void foo(int n)  {

    int c = 0;

    
            
    /* >>> LOOP INVARIANT TO FILL <<< 
       >>> PRECONDITION OF THE LOOP : \at(n, Pre) > 0 && (c == 0) * (n == \at(n, Pre)) <<< */
    
            /*@
          loop invariant  (\at(n, Pre) > 0) ==> (((c == 0)&&(n == \at(n, Pre))) || (c >= 1 && c <= n)) ;
          loop invariant (\at(n, Pre) > 0) ==> (n == \at(n, Pre));
            */
            while (unknown()) {
        {
          if (unknown()) {
            if ( c != n )
            {
            c  = c + 1;
            }
          } else {
            if (c == n) 
            {
            c  = 1;
            }
          }
    
        }
    
    }
             
             
    /*@ assert (c == n) ==> (n > - 1); */
    

  

}
```

/*@ requires n > 0; */
void foo(int n)  {

    int c = 0;

    
            
            /*@
          loop invariant  (\at(n, Pre) > 0) ==> (((c == 0)&&(n == \at(n, Pre))) || (c >= 1 && c <= n)) ;
          loop invariant (\at(n, Pre) > 0) ==> (n == \at(n, Pre));
            */
            while (unknown()) {
        {
          if (unknown()) {
            if ( c != n )
            {
            c  = c + 1;
            }
          } else {
            if (c == n) 
            {
            c  = 1;
            }
          }
    
        }
    
    }
             
             
    /*@ assert (c == n) ==> (n > - 1); */
    

  

}


/*@ requires n > 0; */
void foo(int n)  {

    int c = 0;

    
            
            /*@
          loop invariant  (\at(n, Pre) > 0) ==> (((c == 0)&&(n == \at(n, Pre))) || (c >= 1 && c <= n)) ;
          loop invariant (\at(n, Pre) > 0) ==> (n == \at(n, Pre));
            */
            while (unknown()) {
        {
          if (unknown()) {
            if ( c != n )
            {
            c  = c + 1;
            }
          } else {
            if (c == n) 
            {
            c  = 1;
            }
          }
    
        }
    
    }
             
             
    /*@ assert (c == n) ==> (n > - 1); */
    

  

}

syntax Correct
Validate:
[True, True]

Verify:
[True]

CORRECT INVARIANT
syntax Correct
Validate:
[True, True]

Verify:
[True]

/*@
          loop invariant  (\at(n, Pre) > 0) ==> (((c == 0)&&(n == \at(n, Pre))) || (c >= 1 && c <= n)) ;
          loop invariant (\at(n, Pre) > 0) ==> (n == \at(n, Pre));
            */
            while (unknown()) {
        {
          if (unknown()) {
            if ( c != n )
            {
            c  = c + 1;
            }
          } else {
            if (c == n) 
            {
            c  = 1;
            }
          }
    
        }
    
    }
继续符号执行
/*@ Inv
    ((n@pre > 0) => (((c == 0)&&(n == n@pre)) || (c >= 1 && c <= n)) ) &&
((n@pre > 0) => (n == n@pre))
    */
    
            while (unknown()) {
        {
          if (unknown()) {
            if ( c != n )
            {
            c  = c + 1;
            }
          } else {
            if (c == n) 
            {
            c  = 1;
            }
          }
    
        }
    
    }
File found: ../sac_c_parser/test/../ip_postcond/goal/48_goal.v. Deleting the file.
File found: ../sac_c_parser/test/../ip_postcond/goal/48_proof_auto.v. Deleting the file.
File found: ../sac_c_parser/test/../ip_postcond/goal/48_proof_manual.v. Deleting the file.
LoopEntry_0:
n@pre > 0 && (c == 0) * (n == n@pre)

Successfully generated loop/48.json
syntax Correct
Validate:
[True, True]

Verify:
[True]

已移动文件: 48.c -> finish1
-----------------------------------------

文件 48.c 处理完成. 总耗时: 53.62358999252319
-----------------------------------------
finshed_files:['7.c', '48.c']
