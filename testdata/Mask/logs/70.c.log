file:70.c
TRY TIME: 0
[(116, 176, 0)]
[(116, 176, 0)]
[(116, 176, 0)]
[(116, 176, 0)]
Loop 0 : Outer
Sorted indices: [0]
File found: ../sac_c_parser/test/../ip_postcond/goal/70_goal.v. Deleting the file.
File found: ../sac_c_parser/test/../ip_postcond/goal/70_proof_auto.v. Deleting the file.
File found: ../sac_c_parser/test/../ip_postcond/goal/70_proof_manual.v. Deleting the file.
LoopEntry_0:
(x == 1) * (v3 == v3@pre) * (v2 == v2@pre) * (v1 == v1@pre) * (y == y@pre) * (n == n@pre)

[(0, '(x == 1) * (v3 == v3@pre) * (v2 == v2@pre) * (v1 == v1@pre) * (y == y@pre) * (n == n@pre)')]
Successfully generated loop/70.json
INNER_FLAG: False
Variable Maps: [{'x': '1', 'v3': 'v3@pre', 'v2': 'v2@pre', 'v1': 'v1@pre', 'y': 'y@pre', 'n': 'n@pre'}]
Path conditions: [None]
Pre condition: (x == 1) * (v3 == v3@pre) * (v2 == v2@pre) * (v1 == v1@pre) * (y == y@pre) * (n == n@pre)
Loop Condition: x <= n
Updated Loop Conditions: ['1 <= n@pre']
Global Unchanged Variables ['v3', 'v2', 'v1', 'n']
Non Inductive Variables ['y']
[{'x': '1', 'v3': 'v3@pre', 'v2': 'v2@pre', 'v1': 'v1@pre', 'y': 'y@pre', 'n': 'n@pre'}]
[None]

                
        /* >>> LOOP INVARIANT TO FILL <<< */
        
                /*@
          loop invariant v3 == \at(v3, Pre);
          loop invariant v2 == \at(v2, Pre);
          loop invariant v1 == \at(v1, Pre);
          loop invariant n == \at(n, Pre);
                */
                while (x <= n) {
        y = n - x;
        x = x + 1;
    }
                

                
        /* >>> LOOP INVARIANT TO FILL <<< */
        
                /*@
          loop invariant (1 <= \at(n, Pre)) ==> (((x == 1)&&(v3 == \at(v3, Pre))&&(v2 == \at(v2, Pre))&&(v1 == \at(v1, Pre))&&(y == \at(y, Pre))&&(n == \at(n, Pre))) || (PLACE_HOLDER_y));
          loop invariant (1 <= \at(n, Pre)) ==> (PLACE_HOLDER_x);
          loop invariant (!(1 <= \at(n, Pre))) ==> ((x == 1)&&(v3 == \at(v3, Pre))&&(v2 == \at(v2, Pre))&&(v1 == \at(v1, Pre))&&(y == \at(y, Pre))&&(n == \at(n, Pre)));
          loop invariant v3 == \at(v3, Pre);
          loop invariant v2 == \at(v2, Pre);
          loop invariant v1 == \at(v1, Pre);
          loop invariant n == \at(n, Pre);
                */
                while (x <= n) {
        y = n - x;
        x = x + 1;
    }
                
void foo(int n,int y,int v1,int v2,int v3) {
    
    int x = 1;

    
    
                
        /* >>> LOOP INVARIANT TO FILL <<< */
        
                /*@
          loop invariant (1 <= \at(n, Pre)) ==> (((x == 1)&&(v3 == \at(v3, Pre))&&(v2 == \at(v2, Pre))&&(v1 == \at(v1, Pre))&&(y == \at(y, Pre))&&(n == \at(n, Pre))) || (PLACE_HOLDER_y));
          loop invariant (1 <= \at(n, Pre)) ==> (PLACE_HOLDER_x);
          loop invariant (!(1 <= \at(n, Pre))) ==> ((x == 1)&&(v3 == \at(v3, Pre))&&(v2 == \at(v2, Pre))&&(v1 == \at(v1, Pre))&&(y == \at(y, Pre))&&(n == \at(n, Pre)));
          loop invariant v3 == \at(v3, Pre);
          loop invariant v2 == \at(v2, Pre);
          loop invariant v1 == \at(v1, Pre);
          loop invariant n == \at(n, Pre);
                */
                while (x <= n) {
        y = n - x;
        x = x + 1;
    }
                

    /*_auto_mask_id_0_*/


}
Below is the C loop program with the placeholders filled in:

```c
void foo(int n, int y, int v1, int v2, int v3) {
    int x = 1;

    /* >>> LOOP INVARIANT TO FILL <<< */
    /*@
        loop invariant (1 <= \at(n, Pre)) ==> (((x >= 1 && x <= n + 1) && (v3 == \at(v3, Pre)) && (v2 == \at(v2, Pre)) && (v1 == \at(v1, Pre)) && (y == n - (x - 1)) && (n == \at(n, Pre))) || (y == \at(y, Pre)));
        loop invariant (1 <= \at(n, Pre)) ==> (x >= 1 && x <= n + 1);
        loop invariant (!(1 <= \at(n, Pre))) ==> ((x == 1) && (v3 == \at(v3, Pre)) && (v2 == \at(v2, Pre)) && (v1 == \at(v1, Pre)) && (y == \at(y, Pre)) && (n == \at(n, Pre)));
        loop invariant v3 == \at(v3, Pre);
        loop invariant v2 == \at(v2, Pre);
        loop invariant v1 == \at(v1, Pre);
        loop invariant n == \at(n, Pre);
    */
    while (x <= n) {
        y = n - x;
        x = x + 1;
    }

    /*_auto_mask_id_0_*/
}
```

void foo(int n, int y, int v1, int v2, int v3) {
    int x = 1;

    /* >>> LOOP INVARIANT TO FILL <<< */
    /*@
        loop invariant (1 <= \at(n, Pre)) ==> (((x >= 1 && x <= n + 1) && (v3 == \at(v3, Pre)) && (v2 == \at(v2, Pre)) && (v1 == \at(v1, Pre)) && (y == n - (x - 1)) && (n == \at(n, Pre))) || (y == \at(y, Pre)));
        loop invariant (1 <= \at(n, Pre)) ==> (x >= 1 && x <= n + 1);
        loop invariant (!(1 <= \at(n, Pre))) ==> ((x == 1) && (v3 == \at(v3, Pre)) && (v2 == \at(v2, Pre)) && (v1 == \at(v1, Pre)) && (y == \at(y, Pre)) && (n == \at(n, Pre)));
        loop invariant v3 == \at(v3, Pre);
        loop invariant v2 == \at(v2, Pre);
        loop invariant v1 == \at(v1, Pre);
        loop invariant n == \at(n, Pre);
    */
    while (x <= n) {
        y = n - x;
        x = x + 1;
    }

    /*_auto_mask_id_0_*/
}


void foo(int n, int y, int v1, int v2, int v3) {
    int x = 1;

    /* >>> LOOP INVARIANT TO FILL <<< */
    /*@
        loop invariant (1 <= \at(n, Pre)) ==> (((x >= 1 && x <= n + 1) && (v3 == \at(v3, Pre)) && (v2 == \at(v2, Pre)) && (v1 == \at(v1, Pre)) && (y == n - (x - 1)) && (n == \at(n, Pre))) || (y == \at(y, Pre)));
        loop invariant (1 <= \at(n, Pre)) ==> (x >= 1 && x <= n + 1);
        loop invariant (!(1 <= \at(n, Pre))) ==> ((x == 1) && (v3 == \at(v3, Pre)) && (v2 == \at(v2, Pre)) && (v1 == \at(v1, Pre)) && (y == \at(y, Pre)) && (n == \at(n, Pre)));
        loop invariant v3 == \at(v3, Pre);
        loop invariant v2 == \at(v2, Pre);
        loop invariant v1 == \at(v1, Pre);
        loop invariant n == \at(n, Pre);
    */
    while (x <= n) {
        y = n - x;
        x = x + 1;
    }

    /*_auto_mask_id_0_*/
}

syntax Correct
Validate:
[True, True, True, True, True, True, True]

Verify:
[]

CORRECT INVARIANT
syntax Correct
Validate:
[True, True, True, True, True, True, True]

Verify:
[]

/*@
        loop invariant (1 <= \at(n, Pre)) ==> (((x >= 1 && x <= n + 1) && (v3 == \at(v3, Pre)) && (v2 == \at(v2, Pre)) && (v1 == \at(v1, Pre)) && (y == n - (x - 1)) && (n == \at(n, Pre))) || (y == \at(y, Pre)));
        loop invariant (1 <= \at(n, Pre)) ==> (x >= 1 && x <= n + 1);
        loop invariant (!(1 <= \at(n, Pre))) ==> ((x == 1) && (v3 == \at(v3, Pre)) && (v2 == \at(v2, Pre)) && (v1 == \at(v1, Pre)) && (y == \at(y, Pre)) && (n == \at(n, Pre)));
        loop invariant v3 == \at(v3, Pre);
        loop invariant v2 == \at(v2, Pre);
        loop invariant v1 == \at(v1, Pre);
        loop invariant n == \at(n, Pre);
    */
    while (x <= n) {
        y = n - x;
        x = x + 1;
    }
转换后
/*@ Inv
    ((1 <= n@pre) => (((x >= 1 && x <= n + 1) && (v3 == v3@pre) && (v2 == v2@pre) && (v1 == v1@pre) && (y == n - (x - 1)) && (n == n@pre)) || (y == y@pre))) &&
((1 <= n@pre) => (x >= 1 && x <= n + 1)) &&
((!(1 <= n@pre)) => ((x == 1) && (v3 == v3@pre) && (v2 == v2@pre) && (v1 == v1@pre) && (y == y@pre) && (n == n@pre))) &&
(v3 == v3@pre) &&
(v2 == v2@pre) &&
(v1 == v1@pre) &&
(n == n@pre)
    */
    while (x <= n) {
        y = n - x;
        x = x + 1;
    }
PARTIAL CORRECT INVARIANT
继续符号执行
/*@ Inv
    ((1 <= n@pre) => (((x >= 1 && x <= n + 1) && (v3 == v3@pre) && (v2 == v2@pre) && (v1 == v1@pre) && (y == n - (x - 1)) && (n == n@pre)) || (y == y@pre))) &&
((1 <= n@pre) => (x >= 1 && x <= n + 1)) &&
((!(1 <= n@pre)) => ((x == 1) && (v3 == v3@pre) && (v2 == v2@pre) && (v1 == v1@pre) && (y == y@pre) && (n == n@pre))) &&
(v3 == v3@pre) &&
(v2 == v2@pre) &&
(v1 == v1@pre) &&
(n == n@pre)
    */
    while (x <= n) {
        y = n - x;
        x = x + 1;
    }
File found: ../sac_c_parser/test/../ip_postcond/goal/70_goal.v. Deleting the file.
File found: ../sac_c_parser/test/../ip_postcond/goal/70_proof_auto.v. Deleting the file.
File found: ../sac_c_parser/test/../ip_postcond/goal/70_proof_manual.v. Deleting the file.
LoopEntry_0:
(x == 1) * (v3 == v3@pre) * (v2 == v2@pre) * (v1 == v1@pre) * (y == y@pre) * (n == n@pre)
free(): invalid pointer

[(0, '(x == 1) * (v3 == v3@pre) * (v2 == v2@pre) * (v1 == v1@pre) * (y == y@pre) * (n == n@pre)')]
Successfully generated loop/70.json
syntax Correct
Validate:
[True, True, True, True, True, True, True]

Verify:
[False]

Goal Assertion (file output/70.c, line 20)
Error found in file: output/70.c at line: 20
Error line content: /*@ assert (n > 0) ==> (y <= n); */

syntax Correct
Validate:
[True, True, True, True, True, True, True]

Verify:
[False]

Goal Assertion (file output/70.c, line 20)
Error found in file: output/70.c at line: 20
Error line content: /*@ assert (n > 0) ==> (y <= n); */

RESULT PASS_1
1
1
0
RESULT PASS_3
1
1
0
RESULT PASS_5
1
1
0
已移动文件: 70.c -> finish
-----------------------------------------

文件 70.c 处理完成. 总耗时: 66.7633445262909
错误的文件名:
  - 65.c
  - 132.c
  - 70.c
========================================
错误的文件名:
  - 65.c
  - 132.c
  - 70.c
========================================
错误的文件名:
  - 65.c
  - 132.c
  - 70.c
========================================
-----------------------------------------
finshed_files:['29.c', '87.c', '9.c', '107.c', '65.c', '59.c', '46.c', '60.c', '78.c', '11.c', '132.c', '70.c']
