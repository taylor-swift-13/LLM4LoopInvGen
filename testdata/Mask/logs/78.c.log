file:78.c
TRY TIME: 0
[(129, 210, 0)]
[(129, 210, 0)]
[(129, 210, 0)]
[(129, 210, 0)]
Loop 0 : Outer
Sorted indices: [0]
File not found: ../sac_c_parser/test/../ip_postcond/goal/78_goal.v. No file to delete.
File not found: ../sac_c_parser/test/../ip_postcond/goal/78_proof_auto.v. No file to delete.
File not found: ../sac_c_parser/test/../ip_postcond/goal/78_proof_manual.v. No file to delete.
LoopEntry_0:
x@pre >= y@pre && y@pre >= 0 && (i == 0) * (y == y@pre) * (x == x@pre)

[(0, 'x@pre >= y@pre && y@pre >= 0 && (i == 0) * (y == y@pre) * (x == x@pre)')]
Successfully generated loop/78.json
INNER_FLAG: False
Variable Maps: [{'i': '0', 'y': 'y@pre', 'x': 'x@pre'}]
Path conditions: ['x@pre >= y@pre && y@pre >= 0']
Pre condition: x@pre >= y@pre && y@pre >= 0 && (i == 0) * (y == y@pre) * (x == x@pre)
Loop Condition: unknown()
Updated Loop Conditions: ['unknown()']
Global Unchanged Variables ['y', 'x']
Non Inductive Variables []
[{'i': '0', 'y': 'y@pre', 'x': 'x@pre'}]
['x@pre >= y@pre && y@pre >= 0']

                
        /* >>> LOOP INVARIANT TO FILL <<< */
        
                /*@
          loop invariant y == \at(y, Pre);
          loop invariant x == \at(x, Pre);
                */
                while (unknown()) {
      if ( i < y )
      {
      i  = (i + 1);
      }
  
    }
                

                
        /* >>> LOOP INVARIANT TO FILL <<< */
        
                /*@
          loop invariant  PLACE_HOLDER_i ;
          loop invariant y == \at(y, Pre);
          loop invariant x == \at(x, Pre);
                */
                while (unknown()) {
      if ( i < y )
      {
      i  = (i + 1);
      }
  
    }
                

int unknown();
/*@ requires x >= y  && y >= 0; */
void foo(int x, int y) {

    int i = 0;
    
    
    
                
        /* >>> LOOP INVARIANT TO FILL <<< */
        
                /*@
          loop invariant  PLACE_HOLDER_i ;
          loop invariant y == \at(y, Pre);
          loop invariant x == \at(x, Pre);
                */
                while (unknown()) {
      if ( i < y )
      {
      i  = (i + 1);
      }
  
    }
                
    
  /*_auto_mask_id_0_*/
    
}
Here is the filled-in C program with appropriate loop invariants in ACSL annotations:

```c
int unknown();
/*@ requires x >= y  && y >= 0; */
void foo(int x, int y) {

    int i = 0;
    
    
    
                
        /* >>> LOOP INVARIANT TO FILL <<< */
        
                /*@
          loop invariant  0 <= i <= y ;
          loop invariant y == \at(y, Pre);
          loop invariant x == \at(x, Pre);
                */
                while (unknown()) {
      if ( i < y )
      {
      i  = (i + 1);
      }
  
    }
                
    
  /*_auto_mask_id_0_*/
    
}
```

int unknown();
/*@ requires x >= y  && y >= 0; */
void foo(int x, int y) {

    int i = 0;
    
    
    
                
                /*@
          loop invariant  0 <= i <= y ;
          loop invariant y == \at(y, Pre);
          loop invariant x == \at(x, Pre);
                */
                while (unknown()) {
      if ( i < y )
      {
      i  = (i + 1);
      }
  
    }
                
    
  /*_auto_mask_id_0_*/
    
}


int unknown();
/*@ requires x >= y  && y >= 0; */
void foo(int x, int y) {

    int i = 0;
    
    
    
                
                /*@
          loop invariant  0 <= i <= y ;
          loop invariant y == \at(y, Pre);
          loop invariant x == \at(x, Pre);
                */
                while (unknown()) {
      if ( i < y )
      {
      i  = (i + 1);
      }
  
    }
                
    
  /*_auto_mask_id_0_*/
    
}

syntax Correct
Validate:
[True, True, True]

Verify:
[]

CORRECT INVARIANT
syntax Correct
Validate:
[True, True, True]

Verify:
[]

/*@
          loop invariant  0 <= i <= y ;
          loop invariant y == \at(y, Pre);
          loop invariant x == \at(x, Pre);
                */
                while (unknown()) {
      if ( i < y )
      {
      i  = (i + 1);
      }
  
    }
转换后
/*@ Inv
    (0 <= i && i <= y ) &&
(y == y@pre) &&
(x == x@pre)
    */
                while (unknown()) {
      if ( i < y )
      {
      i  = (i + 1);
      }
  
    }
PARTIAL CORRECT INVARIANT
继续符号执行
/*@ Inv
    (0 <= i && i <= y ) &&
(y == y@pre) &&
(x == x@pre)
    */
                while (unknown()) {
      if ( i < y )
      {
      i  = (i + 1);
      }
  
    }
File found: ../sac_c_parser/test/../ip_postcond/goal/78_goal.v. Deleting the file.
File found: ../sac_c_parser/test/../ip_postcond/goal/78_proof_auto.v. Deleting the file.
File found: ../sac_c_parser/test/../ip_postcond/goal/78_proof_manual.v. Deleting the file.
LoopEntry_0:
x@pre >= y@pre && y@pre >= 0 && (i == 0) * (y == y@pre) * (x == x@pre)

[(0, 'x@pre >= y@pre && y@pre >= 0 && (i == 0) * (y == y@pre) * (x == x@pre)')]
Successfully generated loop/78.json
syntax Correct
Validate:
[True, True, True]

Verify:
[True]

CORRECT INVARIANT
syntax Correct
Validate:
[True, True, True]

Verify:
[True]

已移动文件: 78.c -> finish
-----------------------------------------

文件 78.c 处理完成. 总耗时: 63.04478883743286
错误的文件名:
  - 65.c
========================================
错误的文件名:
  - 65.c
========================================
错误的文件名:
  - 65.c
========================================
-----------------------------------------
finshed_files:['29.c', '87.c', '9.c', '107.c', '65.c', '59.c', '46.c', '60.c', '78.c']
