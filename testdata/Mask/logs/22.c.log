file:22.c
TRY TIME: 0
[(135, 239, 0)]
[(135, 239, 0)]
[(135, 239, 0)]
[(135, 239, 0)]
Loop 0 : Outer
Sorted indices: [0]
File not found: ../sac_c_parser/test/../ip_postcond/goal/22_goal.v. No file to delete.
File not found: ../sac_c_parser/test/../ip_postcond/goal/22_proof_auto.v. No file to delete.
File not found: ../sac_c_parser/test/../ip_postcond/goal/22_proof_manual.v. No file to delete.
LoopEntry_0:
(m == 1) * (x == 1) * (z3 == z3@pre) * (z2 == z2@pre) * (z1 == z1@pre) * (n == n@pre)

[(0, '(m == 1) * (x == 1) * (z3 == z3@pre) * (z2 == z2@pre) * (z1 == z1@pre) * (n == n@pre)')]
Successfully generated loop/22.json
INNER_FLAG: False
Variable Maps: [{'m': '1', 'x': '1', 'z3': 'z3@pre', 'z2': 'z2@pre', 'z1': 'z1@pre', 'n': 'n@pre'}]
Path conditions: [None]
Pre condition: (m == 1) * (x == 1) * (z3 == z3@pre) * (z2 == z2@pre) * (z1 == z1@pre) * (n == n@pre)
Loop Condition: x < n
Updated Loop Conditions: ['1 < n@pre']
Global Unchanged Variables ['z3', 'z2', 'z1', 'n']
Non Inductive Variables ['m']
[{'m': '1', 'x': '1', 'z3': 'z3@pre', 'z2': 'z2@pre', 'z1': 'z1@pre', 'n': 'n@pre'}]
[None]

                
        /* >>> LOOP INVARIANT TO FILL <<< */
        
                /*@
          loop invariant z3 == \at(z3, Pre);
          loop invariant z2 == \at(z2, Pre);
          loop invariant z1 == \at(z1, Pre);
          loop invariant n == \at(n, Pre);
                */
                while (x < n) {

        if (unknown()) {
            m = x;
        }
        
        x = x + 1;
    }
                

                
        /* >>> LOOP INVARIANT TO FILL <<< */
        
                /*@
          loop invariant (1 < \at(n, Pre)) ==> (PLACE_HOLDER_x);
          loop invariant (1 < \at(n, Pre)) ==> (((m == 1)&&(x == 1)&&(z3 == \at(z3, Pre))&&(z2 == \at(z2, Pre))&&(z1 == \at(z1, Pre))&&(n == \at(n, Pre))) || (PLACE_HOLDER_m));
          loop invariant (!(1 < \at(n, Pre))) ==> ((m == 1)&&(x == 1)&&(z3 == \at(z3, Pre))&&(z2 == \at(z2, Pre))&&(z1 == \at(z1, Pre))&&(n == \at(n, Pre)));
          loop invariant z3 == \at(z3, Pre);
          loop invariant z2 == \at(z2, Pre);
          loop invariant z1 == \at(z1, Pre);
          loop invariant n == \at(n, Pre);
                */
                while (x < n) {

        if (unknown()) {
            m = x;
        }
        
        x = x + 1;
    }
                
int unknown();
void foo(int n,int z1,int z2,int z3)
{
    int x = 1;
    int m = 1;

    
    
                
        /* >>> LOOP INVARIANT TO FILL <<< */
        
                /*@
          loop invariant (1 < \at(n, Pre)) ==> (PLACE_HOLDER_x);
          loop invariant (1 < \at(n, Pre)) ==> (((m == 1)&&(x == 1)&&(z3 == \at(z3, Pre))&&(z2 == \at(z2, Pre))&&(z1 == \at(z1, Pre))&&(n == \at(n, Pre))) || (PLACE_HOLDER_m));
          loop invariant (!(1 < \at(n, Pre))) ==> ((m == 1)&&(x == 1)&&(z3 == \at(z3, Pre))&&(z2 == \at(z2, Pre))&&(z1 == \at(z1, Pre))&&(n == \at(n, Pre)));
          loop invariant z3 == \at(z3, Pre);
          loop invariant z2 == \at(z2, Pre);
          loop invariant z1 == \at(z1, Pre);
          loop invariant n == \at(n, Pre);
                */
                while (x < n) {

        if (unknown()) {
            m = x;
        }
        
        x = x + 1;
    }
                

    /*_auto_mask_id_0_*/

}
```c
int unknown();
void foo(int n, int z1, int z2, int z3)
{
    int x = 1;
    int m = 1;

    
    
                
        /* >>> LOOP INVARIANT TO FILL <<< */
        
                /*@
          loop invariant (1 < \at(n, Pre)) ==> (x >= 1 && x <= n);
          loop invariant (1 < \at(n, Pre)) ==> (((m == 1 && x == 1) || (m >= 1 && m < x)) && (z3 == \at(z3, Pre)) && (z2 == \at(z2, Pre)) && (z1 == \at(z1, Pre)) && (n == \at(n, Pre)));
          loop invariant (!(1 < \at(n, Pre))) ==> ((m == 1)&&(x == 1)&&(z3 == \at(z3, Pre))&&(z2 == \at(z2, Pre))&&(z1 == \at(z1, Pre))&&(n == \at(n, Pre)));
          loop invariant z3 == \at(z3, Pre);
          loop invariant z2 == \at(z2, Pre);
          loop invariant z1 == \at(z1, Pre);
          loop invariant n == \at(n, Pre);
                */
                while (x < n) {

        if (unknown()) {
            m = x;
        }
        
        x = x + 1;
    }
                

    /*_auto_mask_id_0_*/

}
```

int unknown();
void foo(int n, int z1, int z2, int z3)
{
    int x = 1;
    int m = 1;

    
    
                
                /*@
          loop invariant (1 < \at(n, Pre)) ==> (x >= 1 && x <= n);
          loop invariant (1 < \at(n, Pre)) ==> (((m == 1 && x == 1) || (m >= 1 && m < x)) && (z3 == \at(z3, Pre)) && (z2 == \at(z2, Pre)) && (z1 == \at(z1, Pre)) && (n == \at(n, Pre)));
          loop invariant (!(1 < \at(n, Pre))) ==> ((m == 1)&&(x == 1)&&(z3 == \at(z3, Pre))&&(z2 == \at(z2, Pre))&&(z1 == \at(z1, Pre))&&(n == \at(n, Pre)));
          loop invariant z3 == \at(z3, Pre);
          loop invariant z2 == \at(z2, Pre);
          loop invariant z1 == \at(z1, Pre);
          loop invariant n == \at(n, Pre);
                */
                while (x < n) {

        if (unknown()) {
            m = x;
        }
        
        x = x + 1;
    }
                

    /*_auto_mask_id_0_*/

}


int unknown();
void foo(int n, int z1, int z2, int z3)
{
    int x = 1;
    int m = 1;

    
    
                
                /*@
          loop invariant (1 < \at(n, Pre)) ==> (x >= 1 && x <= n);
          loop invariant (1 < \at(n, Pre)) ==> (((m == 1 && x == 1) || (m >= 1 && m < x)) && (z3 == \at(z3, Pre)) && (z2 == \at(z2, Pre)) && (z1 == \at(z1, Pre)) && (n == \at(n, Pre)));
          loop invariant (!(1 < \at(n, Pre))) ==> ((m == 1)&&(x == 1)&&(z3 == \at(z3, Pre))&&(z2 == \at(z2, Pre))&&(z1 == \at(z1, Pre))&&(n == \at(n, Pre)));
          loop invariant z3 == \at(z3, Pre);
          loop invariant z2 == \at(z2, Pre);
          loop invariant z1 == \at(z1, Pre);
          loop invariant n == \at(n, Pre);
                */
                while (x < n) {

        if (unknown()) {
            m = x;
        }
        
        x = x + 1;
    }
                

    /*_auto_mask_id_0_*/

}

syntax Correct
Validate:
[True, True, True, True, True, True, True]

Verify:
[]

CORRECT INVARIANT
syntax Correct
Validate:
[True, True, True, True, True, True, True]

Verify:
[]

/*@
          loop invariant (1 < \at(n, Pre)) ==> (x >= 1 && x <= n);
          loop invariant (1 < \at(n, Pre)) ==> (((m == 1 && x == 1) || (m >= 1 && m < x)) && (z3 == \at(z3, Pre)) && (z2 == \at(z2, Pre)) && (z1 == \at(z1, Pre)) && (n == \at(n, Pre)));
          loop invariant (!(1 < \at(n, Pre))) ==> ((m == 1)&&(x == 1)&&(z3 == \at(z3, Pre))&&(z2 == \at(z2, Pre))&&(z1 == \at(z1, Pre))&&(n == \at(n, Pre)));
          loop invariant z3 == \at(z3, Pre);
          loop invariant z2 == \at(z2, Pre);
          loop invariant z1 == \at(z1, Pre);
          loop invariant n == \at(n, Pre);
                */
                while (x < n) {

        if (unknown()) {
            m = x;
        }
        
        x = x + 1;
    }
转换后
/*@ Inv
    ((1 < n@pre) => (x >= 1 && x <= n)) &&
((1 < n@pre) => (((m == 1 && x == 1) || (m >= 1 && m < x)) && (z3 == z3@pre) && (z2 == z2@pre) && (z1 == z1@pre) && (n == n@pre))) &&
((!(1 < n@pre)) => ((m == 1)&&(x == 1)&&(z3 == z3@pre)&&(z2 == z2@pre)&&(z1 == z1@pre)&&(n == n@pre))) &&
(z3 == z3@pre) &&
(z2 == z2@pre) &&
(z1 == z1@pre) &&
(n == n@pre)
    */
                while (x < n) {

        if (unknown()) {
            m = x;
        }
        
        x = x + 1;
    }
PARTIAL CORRECT INVARIANT
继续符号执行
/*@ Inv
    ((1 < n@pre) => (x >= 1 && x <= n)) &&
((1 < n@pre) => (((m == 1 && x == 1) || (m >= 1 && m < x)) && (z3 == z3@pre) && (z2 == z2@pre) && (z1 == z1@pre) && (n == n@pre))) &&
((!(1 < n@pre)) => ((m == 1)&&(x == 1)&&(z3 == z3@pre)&&(z2 == z2@pre)&&(z1 == z1@pre)&&(n == n@pre))) &&
(z3 == z3@pre) &&
(z2 == z2@pre) &&
(z1 == z1@pre) &&
(n == n@pre)
    */
                while (x < n) {

        if (unknown()) {
            m = x;
        }
        
        x = x + 1;
    }
File found: ../sac_c_parser/test/../ip_postcond/goal/22_goal.v. Deleting the file.
File found: ../sac_c_parser/test/../ip_postcond/goal/22_proof_auto.v. Deleting the file.
File found: ../sac_c_parser/test/../ip_postcond/goal/22_proof_manual.v. Deleting the file.
LoopEntry_0:
(m == 1) * (x == 1) * (z3 == z3@pre) * (z2 == z2@pre) * (z1 == z1@pre) * (n == n@pre)

[(0, '(m == 1) * (x == 1) * (z3 == z3@pre) * (z2 == z2@pre) * (z1 == z1@pre) * (n == n@pre)')]
Successfully generated loop/22.json
syntax Correct
Validate:
[True, True, True, True, True, True, True]

Verify:
[True]

CORRECT INVARIANT
syntax Correct
Validate:
[True, True, True, True, True, True, True]

Verify:
[True]

已移动文件: 22.c -> finish
-----------------------------------------

文件 22.c 处理完成. 总耗时: 68.9200086593628
错误的文件名:
  - 65.c
  - 132.c
  - 70.c
  - 94.c
  - 88.c
  - 4.c
  - 84.c
  - 83.c
  - 131.c
========================================
错误的文件名:
  - 65.c
  - 132.c
  - 70.c
  - 94.c
  - 88.c
  - 4.c
  - 84.c
  - 83.c
  - 131.c
========================================
错误的文件名:
  - 65.c
  - 132.c
  - 70.c
  - 94.c
  - 88.c
  - 4.c
  - 84.c
  - 83.c
  - 131.c
========================================
-----------------------------------------
finshed_files:['29.c', '87.c', '9.c', '107.c', '65.c', '59.c', '46.c', '60.c', '78.c', '11.c', '132.c', '70.c', '121.c', '94.c', '109.c', '61.c', '120.c', '42.c', '33.c', '17.c', '105.c', '101.c', '38.c', '40.c', '88.c', '4.c', '114.c', '8.c', '84.c', '83.c', '111.c', '47.c', '14.c', '49.c', '131.c', '119.c', '43.c', '50.c', '56.c', '18.c', '53.c', '35.c', '10.c', '28.c', '26.c', '73.c', '89.c', '126.c', '96.c', '57.c', '37.c', '36.c', '92.c', '68.c', '115.c', '71.c', '91.c', '22.c']
