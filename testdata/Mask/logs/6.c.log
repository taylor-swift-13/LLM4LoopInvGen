file:6.c
TRY TIME: 0
[(124, 209, 0)]
[(124, 209, 0)]
[(124, 209, 0)]
[(124, 209, 0)]
Loop 0 : Outer
Sorted indices: [0]
File found: ../sac_c_parser/test/../ip_postcond/goal/6_goal.v. Deleting the file.
File found: ../sac_c_parser/test/../ip_postcond/goal/6_proof_auto.v. Deleting the file.
File found: ../sac_c_parser/test/../ip_postcond/goal/6_proof_manual.v. Deleting the file.
LoopEntry_0:
(x == 0) * (z == z@pre) * (y == y@pre) * (size == size@pre) * (v3 == v3@pre) * (v2 == v2@pre) * (v1 == v1@pre)

[(0, '(x == 0) * (z == z@pre) * (y == y@pre) * (size == size@pre) * (v3 == v3@pre) * (v2 == v2@pre) * (v1 == v1@pre)')]
Successfully generated loop/6.json
INNER_FLAG: False
Variable Maps: [{'x': '0', 'z': 'z@pre', 'y': 'y@pre', 'size': 'size@pre', 'v3': 'v3@pre', 'v2': 'v2@pre', 'v1': 'v1@pre'}]
Path conditions: [None]
Pre condition: (x == 0) * (z == z@pre) * (y == y@pre) * (size == size@pre) * (v3 == v3@pre) * (v2 == v2@pre) * (v1 == v1@pre)
Loop Condition: x < size
Updated Loop Conditions: ['0 < size@pre']
Global Unchanged Variables ['z', 'size', 'v3', 'v2', 'v1']
Non Inductive Variables ['y']
[{'x': '0', 'z': 'z@pre', 'y': 'y@pre', 'size': 'size@pre', 'v3': 'v3@pre', 'v2': 'v2@pre', 'v1': 'v1@pre'}]
[None]

                
        /* >>> LOOP INVARIANT TO FILL <<< */
        
                /*@
          loop invariant z == \at(z, Pre);
          loop invariant size == \at(size, Pre);
          loop invariant v3 == \at(v3, Pre);
          loop invariant v2 == \at(v2, Pre);
          loop invariant v1 == \at(v1, Pre);
                */
                while(x < size) {
       x += 1;
       if( z <= y) {
          y = z;
       }
    }
                

                
        /* >>> LOOP INVARIANT TO FILL <<< */
        
                /*@
          loop invariant (0 < \at(size, Pre)) ==> (((x == 0)&&(z == \at(z, Pre))&&(y == \at(y, Pre))&&(size == \at(size, Pre))&&(v3 == \at(v3, Pre))&&(v2 == \at(v2, Pre))&&(v1 == \at(v1, Pre))) || (PLACE_HOLDER_y));
          loop invariant (0 < \at(size, Pre)) ==> (PLACE_HOLDER_x);
          loop invariant (!(0 < \at(size, Pre))) ==> ((x == 0)&&(z == \at(z, Pre))&&(y == \at(y, Pre))&&(size == \at(size, Pre))&&(v3 == \at(v3, Pre))&&(v2 == \at(v2, Pre))&&(v1 == \at(v1, Pre)));
          loop invariant z == \at(z, Pre);
          loop invariant size == \at(size, Pre);
          loop invariant v3 == \at(v3, Pre);
          loop invariant v2 == \at(v2, Pre);
          loop invariant v1 == \at(v1, Pre);
                */
                while(x < size) {
       x += 1;
       if( z <= y) {
          y = z;
       }
    }
                
void foo(int v1, int v2 ,int v3,int size, int y, int z)
{
    
    int x = 0;

    
                
        /* >>> LOOP INVARIANT TO FILL <<< */
        
                /*@
          loop invariant (0 < \at(size, Pre)) ==> (((x == 0)&&(z == \at(z, Pre))&&(y == \at(y, Pre))&&(size == \at(size, Pre))&&(v3 == \at(v3, Pre))&&(v2 == \at(v2, Pre))&&(v1 == \at(v1, Pre))) || (PLACE_HOLDER_y));
          loop invariant (0 < \at(size, Pre)) ==> (PLACE_HOLDER_x);
          loop invariant (!(0 < \at(size, Pre))) ==> ((x == 0)&&(z == \at(z, Pre))&&(y == \at(y, Pre))&&(size == \at(size, Pre))&&(v3 == \at(v3, Pre))&&(v2 == \at(v2, Pre))&&(v1 == \at(v1, Pre)));
          loop invariant z == \at(z, Pre);
          loop invariant size == \at(size, Pre);
          loop invariant v3 == \at(v3, Pre);
          loop invariant v2 == \at(v2, Pre);
          loop invariant v1 == \at(v1, Pre);
                */
                while(x < size) {
       x += 1;
       if( z <= y) {
          y = z;
       }
    }
                

    /*_auto_mask_id_0_*/

}
```c
void foo(int v1, int v2 ,int v3,int size, int y, int z)
{
    
    int x = 0;

    
                
        /* >>> LOOP INVARIANT TO FILL <<< */
        
                /*@
          loop invariant (0 < \at(size, Pre)) ==> (((x == 0)&&(z == \at(z, Pre))&&(y == \at(y, Pre))&&(size == \at(size, Pre))&&(v3 == \at(v3, Pre))&&(v2 == \at(v2, Pre))&&(v1 == \at(v1, Pre))) || ((0 <= x <= size) && (z == \at(z, Pre)) && (size == \at(size, Pre)) && (v3 == \at(v3, Pre)) && (v2 == \at(v2, Pre)) && (v1 == \at(v1, Pre)) && ((z <= y) ==> (y == z)) && ((z > y) ==> (y == \at(y, Pre)))));
          loop invariant (0 < \at(size, Pre)) ==> ((0 <= x <= size));
          loop invariant (!(0 < \at(size, Pre))) ==> ((x == 0)&&(z == \at(z, Pre))&&(y == \at(y, Pre))&&(size == \at(size, Pre))&&(v3 == \at(v3, Pre))&&(v2 == \at(v2, Pre))&&(v1 == \at(v1, Pre)));
          loop invariant z == \at(z, Pre);
          loop invariant size == \at(size, Pre);
          loop invariant v3 == \at(v3, Pre);
          loop invariant v2 == \at(v2, Pre);
          loop invariant v1 == \at(v1, Pre);
                */
                while(x < size) {
       x += 1;
       if( z <= y) {
          y = z;
       }
    }
                

    /*_auto_mask_id_0_*/

}
```

void foo(int v1, int v2 ,int v3,int size, int y, int z)
{
    
    int x = 0;

    
                
                /*@
          loop invariant (0 < \at(size, Pre)) ==> (((x == 0)&&(z == \at(z, Pre))&&(y == \at(y, Pre))&&(size == \at(size, Pre))&&(v3 == \at(v3, Pre))&&(v2 == \at(v2, Pre))&&(v1 == \at(v1, Pre))) || ((0 <= x <= size) && (z == \at(z, Pre)) && (size == \at(size, Pre)) && (v3 == \at(v3, Pre)) && (v2 == \at(v2, Pre)) && (v1 == \at(v1, Pre)) && ((z <= y) ==> (y == z)) && ((z > y) ==> (y == \at(y, Pre)))));
          loop invariant (0 < \at(size, Pre)) ==> ((0 <= x <= size));
          loop invariant (!(0 < \at(size, Pre))) ==> ((x == 0)&&(z == \at(z, Pre))&&(y == \at(y, Pre))&&(size == \at(size, Pre))&&(v3 == \at(v3, Pre))&&(v2 == \at(v2, Pre))&&(v1 == \at(v1, Pre)));
          loop invariant z == \at(z, Pre);
          loop invariant size == \at(size, Pre);
          loop invariant v3 == \at(v3, Pre);
          loop invariant v2 == \at(v2, Pre);
          loop invariant v1 == \at(v1, Pre);
                */
                while(x < size) {
       x += 1;
       if( z <= y) {
          y = z;
       }
    }
                

    /*_auto_mask_id_0_*/

}


void foo(int v1, int v2 ,int v3,int size, int y, int z)
{
    
    int x = 0;

    
                
                /*@
          loop invariant (0 < \at(size, Pre)) ==> (((x == 0)&&(z == \at(z, Pre))&&(y == \at(y, Pre))&&(size == \at(size, Pre))&&(v3 == \at(v3, Pre))&&(v2 == \at(v2, Pre))&&(v1 == \at(v1, Pre))) || ((0 <= x <= size) && (z == \at(z, Pre)) && (size == \at(size, Pre)) && (v3 == \at(v3, Pre)) && (v2 == \at(v2, Pre)) && (v1 == \at(v1, Pre)) && ((z <= y) ==> (y == z)) && ((z > y) ==> (y == \at(y, Pre)))));
          loop invariant (0 < \at(size, Pre)) ==> ((0 <= x <= size));
          loop invariant (!(0 < \at(size, Pre))) ==> ((x == 0)&&(z == \at(z, Pre))&&(y == \at(y, Pre))&&(size == \at(size, Pre))&&(v3 == \at(v3, Pre))&&(v2 == \at(v2, Pre))&&(v1 == \at(v1, Pre)));
          loop invariant z == \at(z, Pre);
          loop invariant size == \at(size, Pre);
          loop invariant v3 == \at(v3, Pre);
          loop invariant v2 == \at(v2, Pre);
          loop invariant v1 == \at(v1, Pre);
                */
                while(x < size) {
       x += 1;
       if( z <= y) {
          y = z;
       }
    }
                

    /*_auto_mask_id_0_*/

}

syntax Correct
Validate:
[True, True, True, True, True, True, True, True]

Verify:
[]

CORRECT INVARIANT
syntax Correct
Validate:
[True, True, True, True, True, True, True, True]

Verify:
[]

/*@
          loop invariant (0 < \at(size, Pre)) ==> (((x == 0)&&(z == \at(z, Pre))&&(y == \at(y, Pre))&&(size == \at(size, Pre))&&(v3 == \at(v3, Pre))&&(v2 == \at(v2, Pre))&&(v1 == \at(v1, Pre))) || ((0 <= x <= size) && (z == \at(z, Pre)) && (size == \at(size, Pre)) && (v3 == \at(v3, Pre)) && (v2 == \at(v2, Pre)) && (v1 == \at(v1, Pre)) && ((z <= y) ==> (y == z)) && ((z > y) ==> (y == \at(y, Pre)))));
          loop invariant (0 < \at(size, Pre)) ==> ((0 <= x <= size));
          loop invariant (!(0 < \at(size, Pre))) ==> ((x == 0)&&(z == \at(z, Pre))&&(y == \at(y, Pre))&&(size == \at(size, Pre))&&(v3 == \at(v3, Pre))&&(v2 == \at(v2, Pre))&&(v1 == \at(v1, Pre)));
          loop invariant z == \at(z, Pre);
          loop invariant size == \at(size, Pre);
          loop invariant v3 == \at(v3, Pre);
          loop invariant v2 == \at(v2, Pre);
          loop invariant v1 == \at(v1, Pre);
                */
                while(x < size) {
       x += 1;
       if( z <= y) {
          y = z;
       }
    }
转换后
/*@ Inv
    ((0 < size@pre) => (((x == 0)&&(z == z@pre)&&(y == y@pre)&&(size == size@pre)&&(v3 == v3@pre)&&(v2 == v2@pre)&&(v1 == v1@pre)) || ((0 <= x && x <= size) && (z == z@pre) && (size == size@pre) && (v3 == v3@pre) && (v2 == v2@pre) && (v1 == v1@pre) && ((z <= y) => (y == z)) && ((z > y) => (y == y@pre))))) &&
((0 < size@pre) => ((0 <= x && x <= size))) &&
((!(0 < size@pre)) => ((x == 0)&&(z == z@pre)&&(y == y@pre)&&(size == size@pre)&&(v3 == v3@pre)&&(v2 == v2@pre)&&(v1 == v1@pre))) &&
(z == z@pre) &&
(size == size@pre) &&
(v3 == v3@pre) &&
(v2 == v2@pre) &&
(v1 == v1@pre)
    */
                while(x < size) {
       x += 1;
       if( z <= y) {
          y = z;
       }
    }
PARTIAL CORRECT INVARIANT
继续符号执行
/*@ Inv
    ((0 < size@pre) => (((x == 0)&&(z == z@pre)&&(y == y@pre)&&(size == size@pre)&&(v3 == v3@pre)&&(v2 == v2@pre)&&(v1 == v1@pre)) || ((0 <= x && x <= size) && (z == z@pre) && (size == size@pre) && (v3 == v3@pre) && (v2 == v2@pre) && (v1 == v1@pre) && ((z <= y) => (y == z)) && ((z > y) => (y == y@pre))))) &&
((0 < size@pre) => ((0 <= x && x <= size))) &&
((!(0 < size@pre)) => ((x == 0)&&(z == z@pre)&&(y == y@pre)&&(size == size@pre)&&(v3 == v3@pre)&&(v2 == v2@pre)&&(v1 == v1@pre))) &&
(z == z@pre) &&
(size == size@pre) &&
(v3 == v3@pre) &&
(v2 == v2@pre) &&
(v1 == v1@pre)
    */
                while(x < size) {
       x += 1;
       if( z <= y) {
          y = z;
       }
    }
File found: ../sac_c_parser/test/../ip_postcond/goal/6_goal.v. Deleting the file.
File found: ../sac_c_parser/test/../ip_postcond/goal/6_proof_auto.v. Deleting the file.
File found: ../sac_c_parser/test/../ip_postcond/goal/6_proof_manual.v. Deleting the file.
LoopEntry_0:
(x == 0) * (z == z@pre) * (y == y@pre) * (size == size@pre) * (v3 == v3@pre) * (v2 == v2@pre) * (v1 == v1@pre)

[(0, '(x == 0) * (z == z@pre) * (y == y@pre) * (size == size@pre) * (v3 == v3@pre) * (v2 == v2@pre) * (v1 == v1@pre)')]
Successfully generated loop/6.json
syntax Correct
Validate:
[True, True, True, True, True, True, True, True]

Verify:
[True]

CORRECT INVARIANT
syntax Correct
Validate:
[True, True, True, True, True, True, True, True]

Verify:
[True]

已移动文件: 6.c -> finish
-----------------------------------------

文件 6.c 处理完成. 总耗时: 70.9265525341034
错误的文件名:
  - 65.c
  - 132.c
  - 70.c
  - 94.c
  - 88.c
  - 4.c
  - 84.c
  - 83.c
  - 131.c
  - 90.c
  - 86.c
  - 129.c
  - 130.c
  - 117.c
========================================
错误的文件名:
  - 65.c
  - 132.c
  - 70.c
  - 94.c
  - 88.c
  - 4.c
  - 84.c
  - 83.c
  - 131.c
  - 90.c
  - 86.c
  - 129.c
  - 130.c
  - 117.c
========================================
错误的文件名:
  - 65.c
  - 132.c
  - 70.c
  - 94.c
  - 88.c
  - 4.c
  - 84.c
  - 83.c
  - 131.c
  - 90.c
  - 86.c
  - 129.c
  - 130.c
  - 117.c
========================================
-----------------------------------------
finshed_files:['29.c', '87.c', '9.c', '107.c', '65.c', '59.c', '46.c', '60.c', '78.c', '11.c', '132.c', '70.c', '121.c', '94.c', '109.c', '61.c', '120.c', '42.c', '33.c', '17.c', '105.c', '101.c', '38.c', '40.c', '88.c', '4.c', '114.c', '8.c', '84.c', '83.c', '111.c', '47.c', '14.c', '49.c', '131.c', '119.c', '43.c', '50.c', '56.c', '18.c', '53.c', '35.c', '10.c', '28.c', '26.c', '73.c', '89.c', '126.c', '96.c', '57.c', '37.c', '36.c', '92.c', '68.c', '115.c', '71.c', '91.c', '22.c', '19.c', '124.c', '52.c', '100.c', '95.c', '90.c', '86.c', '128.c', '62.c', '77.c', '79.c', '108.c', '129.c', '34.c', '123.c', '98.c', '41.c', '27.c', '106.c', '58.c', '130.c', '20.c', '85.c', '15.c', '75.c', '104.c', '2.c', '82.c', '32.c', '23.c', '117.c', '125.c', '64.c', '6.c']
