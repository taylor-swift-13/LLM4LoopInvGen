file:89.c
TRY TIME: 0
[(134, 356, 0)]
[(134, 356, 0)]
[(134, 356, 0)]
[(134, 356, 0)]
Loop 0 : Outer
Sorted indices: [0]
File found: ../sac_c_parser/test/../ip_postcond/goal/89_goal.v. Deleting the file.
File found: ../sac_c_parser/test/../ip_postcond/goal/89_proof_auto.v. Deleting the file.
File found: ../sac_c_parser/test/../ip_postcond/goal/89_proof_manual.v. Deleting the file.
LoopEntry_0:
(x == y@pre) * (lock == 1) * (v3 == v3@pre) * (v2 == v2@pre) * (v1 == v1@pre) * (y == y@pre)

[(0, '(x == y@pre) * (lock == 1) * (v3 == v3@pre) * (v2 == v2@pre) * (v1 == v1@pre) * (y == y@pre)')]
Successfully generated loop/89.json
INNER_FLAG: False
Variable Maps: [{'x': 'y@pre', 'lock': '1', 'v3': 'v3@pre', 'v2': 'v2@pre', 'v1': 'v1@pre', 'y': 'y@pre'}]
Path conditions: [None]
Pre condition: (x == y@pre) * (lock == 1) * (v3 == v3@pre) * (v2 == v2@pre) * (v1 == v1@pre) * (y == y@pre)
Loop Condition: x != y
Updated Loop Conditions: ['y@pre != y@pre']
Global Unchanged Variables ['v3', 'v2', 'v1']
Non Inductive Variables ['lock', 'x', 'lock', 'x']
[{'x': 'y@pre', 'lock': '1', 'v3': 'v3@pre', 'v2': 'v2@pre', 'v1': 'v1@pre', 'y': 'y@pre'}]
[None]

                
        /* >>> LOOP INVARIANT TO FILL <<< */
        
                /*@
          loop invariant v3 == \at(v3, Pre);
          loop invariant v2 == \at(v2, Pre);
          loop invariant v1 == \at(v1, Pre);
                */
                while (x != y) {
        if (unknown()) {
          
          lock  = 1;
          x  = y;
          
        } else {
          
          lock  = 0;
          x  = y;
          y  = y + 1;
          
        }
 
    }
                

                
        /* >>> LOOP INVARIANT TO FILL <<< */
        
                /*@
          loop invariant (\at(y, Pre) != \at(y, Pre)) ==> (PLACE_HOLDER_y);
          loop invariant (\at(y, Pre) != \at(y, Pre)) ==> (((x == \at(y, Pre))&&(lock == 1)&&(v3 == \at(v3, Pre))&&(v2 == \at(v2, Pre))&&(v1 == \at(v1, Pre))&&(y == \at(y, Pre))) || (PLACE_HOLDER_lock));
          loop invariant (\at(y, Pre) != \at(y, Pre)) ==> (((x == \at(y, Pre))&&(lock == 1)&&(v3 == \at(v3, Pre))&&(v2 == \at(v2, Pre))&&(v1 == \at(v1, Pre))&&(y == \at(y, Pre))) || (PLACE_HOLDER_x));
          loop invariant (!(\at(y, Pre) != \at(y, Pre))) ==> ((x == \at(y, Pre))&&(lock == 1)&&(v3 == \at(v3, Pre))&&(v2 == \at(v2, Pre))&&(v1 == \at(v1, Pre))&&(y == \at(y, Pre)));
          loop invariant v3 == \at(v3, Pre);
          loop invariant v2 == \at(v2, Pre);
          loop invariant v1 == \at(v1, Pre);
                */
                while (x != y) {
        if (unknown()) {
          
          lock  = 1;
          x  = y;
          
        } else {
          
          lock  = 0;
          x  = y;
          y  = y + 1;
          
        }
 
    }
                
int unknown();

int main(int y,int v1,int v2,int v3) {

    int lock = 1;
    int x = y;

    
                
        /* >>> LOOP INVARIANT TO FILL <<< */
        
                /*@
          loop invariant (\at(y, Pre) != \at(y, Pre)) ==> (PLACE_HOLDER_y);
          loop invariant (\at(y, Pre) != \at(y, Pre)) ==> (((x == \at(y, Pre))&&(lock == 1)&&(v3 == \at(v3, Pre))&&(v2 == \at(v2, Pre))&&(v1 == \at(v1, Pre))&&(y == \at(y, Pre))) || (PLACE_HOLDER_lock));
          loop invariant (\at(y, Pre) != \at(y, Pre)) ==> (((x == \at(y, Pre))&&(lock == 1)&&(v3 == \at(v3, Pre))&&(v2 == \at(v2, Pre))&&(v1 == \at(v1, Pre))&&(y == \at(y, Pre))) || (PLACE_HOLDER_x));
          loop invariant (!(\at(y, Pre) != \at(y, Pre))) ==> ((x == \at(y, Pre))&&(lock == 1)&&(v3 == \at(v3, Pre))&&(v2 == \at(v2, Pre))&&(v1 == \at(v1, Pre))&&(y == \at(y, Pre)));
          loop invariant v3 == \at(v3, Pre);
          loop invariant v2 == \at(v2, Pre);
          loop invariant v1 == \at(v1, Pre);
                */
                while (x != y) {
        if (unknown()) {
          
          lock  = 1;
          x  = y;
          
        } else {
          
          lock  = 0;
          x  = y;
          y  = y + 1;
          
        }
 
    }
                
    /*_auto_mask_id_0_*/
  }
Here is the loop program with the placeholders `PLACE_HOLDER_y`, `PLACE_HOLDER_lock`, and `PLACE_HOLDER_x` filled in:

```c
int unknown();

int main(int y,int v1,int v2,int v3) {

    int lock = 1;
    int x = y;

    
                
        /* >>> LOOP INVARIANT TO FILL <<< */
        
                /*@
          loop invariant (\at(y, Pre) != \at(y, Pre)) ==> (y >= \at(y, Pre));
          loop invariant (\at(y, Pre) != \at(y, Pre)) ==> (((x == \at(y, Pre))&&(lock == 1)&&(v3 == \at(v3, Pre))&&(v2 == \at(v2, Pre))&&(v1 == \at(v1, Pre))&&(y == \at(y, Pre))) || (lock == 0));
          loop invariant (\at(y, Pre) != \at(y, Pre)) ==> (((x == \at(y, Pre))&&(lock == 1)&&(v3 == \at(v3, Pre))&&(v2 == \at(v2, Pre))&&(v1 == \at(v1, Pre))&&(y == \at(y, Pre))) || (x == y));
          loop invariant (!(\at(y, Pre) != \at(y, Pre))) ==> ((x == \at(y, Pre))&&(lock == 1)&&(v3 == \at(v3, Pre))&&(v2 == \at(v2, Pre))&&(v1 == \at(v1, Pre))&&(y == \at(y, Pre)));
          loop invariant v3 == \at(v3, Pre);
          loop invariant v2 == \at(v2, Pre);
          loop invariant v1 == \at(v1, Pre);
                */
                while (x != y) {
        if (unknown()) {
          
          lock  = 1;
          x  = y;
          
        } else {
          
          lock  = 0;
          x  = y;
          y  = y + 1;
          
        }
 
    }
                
    /*_auto_mask_id_0_*/
  }
```

int unknown();

int main(int y,int v1,int v2,int v3) {

    int lock = 1;
    int x = y;

    
                
                /*@
          loop invariant (\at(y, Pre) != \at(y, Pre)) ==> (y >= \at(y, Pre));
          loop invariant (\at(y, Pre) != \at(y, Pre)) ==> (((x == \at(y, Pre))&&(lock == 1)&&(v3 == \at(v3, Pre))&&(v2 == \at(v2, Pre))&&(v1 == \at(v1, Pre))&&(y == \at(y, Pre))) || (lock == 0));
          loop invariant (\at(y, Pre) != \at(y, Pre)) ==> (((x == \at(y, Pre))&&(lock == 1)&&(v3 == \at(v3, Pre))&&(v2 == \at(v2, Pre))&&(v1 == \at(v1, Pre))&&(y == \at(y, Pre))) || (x == y));
          loop invariant (!(\at(y, Pre) != \at(y, Pre))) ==> ((x == \at(y, Pre))&&(lock == 1)&&(v3 == \at(v3, Pre))&&(v2 == \at(v2, Pre))&&(v1 == \at(v1, Pre))&&(y == \at(y, Pre)));
          loop invariant v3 == \at(v3, Pre);
          loop invariant v2 == \at(v2, Pre);
          loop invariant v1 == \at(v1, Pre);
                */
                while (x != y) {
        if (unknown()) {
          
          lock  = 1;
          x  = y;
          
        } else {
          
          lock  = 0;
          x  = y;
          y  = y + 1;
          
        }
 
    }
                
    /*_auto_mask_id_0_*/
  }


int unknown();

int main(int y,int v1,int v2,int v3) {

    int lock = 1;
    int x = y;

    
                
                /*@
          loop invariant (\at(y, Pre) != \at(y, Pre)) ==> (y >= \at(y, Pre));
          loop invariant (\at(y, Pre) != \at(y, Pre)) ==> (((x == \at(y, Pre))&&(lock == 1)&&(v3 == \at(v3, Pre))&&(v2 == \at(v2, Pre))&&(v1 == \at(v1, Pre))&&(y == \at(y, Pre))) || (lock == 0));
          loop invariant (\at(y, Pre) != \at(y, Pre)) ==> (((x == \at(y, Pre))&&(lock == 1)&&(v3 == \at(v3, Pre))&&(v2 == \at(v2, Pre))&&(v1 == \at(v1, Pre))&&(y == \at(y, Pre))) || (x == y));
          loop invariant (!(\at(y, Pre) != \at(y, Pre))) ==> ((x == \at(y, Pre))&&(lock == 1)&&(v3 == \at(v3, Pre))&&(v2 == \at(v2, Pre))&&(v1 == \at(v1, Pre))&&(y == \at(y, Pre)));
          loop invariant v3 == \at(v3, Pre);
          loop invariant v2 == \at(v2, Pre);
          loop invariant v1 == \at(v1, Pre);
                */
                while (x != y) {
        if (unknown()) {
          
          lock  = 1;
          x  = y;
          
        } else {
          
          lock  = 0;
          x  = y;
          y  = y + 1;
          
        }
 
    }
                
    /*_auto_mask_id_0_*/
  }

syntax Correct
Validate:
[True, True, True, True, True, True, True]

Verify:
[]

CORRECT INVARIANT
syntax Correct
Validate:
[True, True, True, True, True, True, True]

Verify:
[]

/*@
          loop invariant (\at(y, Pre) != \at(y, Pre)) ==> (y >= \at(y, Pre));
          loop invariant (\at(y, Pre) != \at(y, Pre)) ==> (((x == \at(y, Pre))&&(lock == 1)&&(v3 == \at(v3, Pre))&&(v2 == \at(v2, Pre))&&(v1 == \at(v1, Pre))&&(y == \at(y, Pre))) || (lock == 0));
          loop invariant (\at(y, Pre) != \at(y, Pre)) ==> (((x == \at(y, Pre))&&(lock == 1)&&(v3 == \at(v3, Pre))&&(v2 == \at(v2, Pre))&&(v1 == \at(v1, Pre))&&(y == \at(y, Pre))) || (x == y));
          loop invariant (!(\at(y, Pre) != \at(y, Pre))) ==> ((x == \at(y, Pre))&&(lock == 1)&&(v3 == \at(v3, Pre))&&(v2 == \at(v2, Pre))&&(v1 == \at(v1, Pre))&&(y == \at(y, Pre)));
          loop invariant v3 == \at(v3, Pre);
          loop invariant v2 == \at(v2, Pre);
          loop invariant v1 == \at(v1, Pre);
                */
                while (x != y) {
        if (unknown()) {
          
          lock  = 1;
          x  = y;
          
        } else {
          
          lock  = 0;
          x  = y;
          y  = y + 1;
          
        }
 
    }
转换后
/*@ Inv
    ((y@pre != y@pre) => (y >= y@pre)) &&
((y@pre != y@pre) => (((x == y@pre)&&(lock == 1)&&(v3 == v3@pre)&&(v2 == v2@pre)&&(v1 == v1@pre)&&(y == y@pre)) || (lock == 0))) &&
((y@pre != y@pre) => (((x == y@pre)&&(lock == 1)&&(v3 == v3@pre)&&(v2 == v2@pre)&&(v1 == v1@pre)&&(y == y@pre)) || (x == y))) &&
((!(y@pre != y@pre)) => ((x == y@pre)&&(lock == 1)&&(v3 == v3@pre)&&(v2 == v2@pre)&&(v1 == v1@pre)&&(y == y@pre))) &&
(v3 == v3@pre) &&
(v2 == v2@pre) &&
(v1 == v1@pre)
    */
                while (x != y) {
        if (unknown()) {
          
          lock  = 1;
          x  = y;
          
        } else {
          
          lock  = 0;
          x  = y;
          y  = y + 1;
          
        }
 
    }
PARTIAL CORRECT INVARIANT
继续符号执行
/*@ Inv
    ((y@pre != y@pre) => (y >= y@pre)) &&
((y@pre != y@pre) => (((x == y@pre)&&(lock == 1)&&(v3 == v3@pre)&&(v2 == v2@pre)&&(v1 == v1@pre)&&(y == y@pre)) || (lock == 0))) &&
((y@pre != y@pre) => (((x == y@pre)&&(lock == 1)&&(v3 == v3@pre)&&(v2 == v2@pre)&&(v1 == v1@pre)&&(y == y@pre)) || (x == y))) &&
((!(y@pre != y@pre)) => ((x == y@pre)&&(lock == 1)&&(v3 == v3@pre)&&(v2 == v2@pre)&&(v1 == v1@pre)&&(y == y@pre))) &&
(v3 == v3@pre) &&
(v2 == v2@pre) &&
(v1 == v1@pre)
    */
                while (x != y) {
        if (unknown()) {
          
          lock  = 1;
          x  = y;
          
        } else {
          
          lock  = 0;
          x  = y;
          y  = y + 1;
          
        }
 
    }
File found: ../sac_c_parser/test/../ip_postcond/goal/89_goal.v. Deleting the file.
File found: ../sac_c_parser/test/../ip_postcond/goal/89_proof_auto.v. Deleting the file.
File found: ../sac_c_parser/test/../ip_postcond/goal/89_proof_manual.v. Deleting the file.
LoopEntry_0:
(x == y@pre) * (lock == 1) * (v3 == v3@pre) * (v2 == v2@pre) * (v1 == v1@pre) * (y == y@pre)

[(0, '(x == y@pre) * (lock == 1) * (v3 == v3@pre) * (v2 == v2@pre) * (v1 == v1@pre) * (y == y@pre)')]
Successfully generated loop/89.json
syntax Correct
Validate:
[True, True, True, True, True, True, True]

Verify:
[True]

CORRECT INVARIANT
syntax Correct
Validate:
[True, True, True, True, True, True, True]

Verify:
[True]

已移动文件: 89.c -> finish
-----------------------------------------

文件 89.c 处理完成. 总耗时: 65.95620250701904
错误的文件名:
  - 65.c
  - 132.c
  - 70.c
  - 94.c
  - 88.c
  - 4.c
  - 84.c
  - 83.c
  - 131.c
========================================
错误的文件名:
  - 65.c
  - 132.c
  - 70.c
  - 94.c
  - 88.c
  - 4.c
  - 84.c
  - 83.c
  - 131.c
========================================
错误的文件名:
  - 65.c
  - 132.c
  - 70.c
  - 94.c
  - 88.c
  - 4.c
  - 84.c
  - 83.c
  - 131.c
========================================
-----------------------------------------
finshed_files:['29.c', '87.c', '9.c', '107.c', '65.c', '59.c', '46.c', '60.c', '78.c', '11.c', '132.c', '70.c', '121.c', '94.c', '109.c', '61.c', '120.c', '42.c', '33.c', '17.c', '105.c', '101.c', '38.c', '40.c', '88.c', '4.c', '114.c', '8.c', '84.c', '83.c', '111.c', '47.c', '14.c', '49.c', '131.c', '119.c', '43.c', '50.c', '56.c', '18.c', '53.c', '35.c', '10.c', '28.c', '26.c', '73.c', '89.c']
