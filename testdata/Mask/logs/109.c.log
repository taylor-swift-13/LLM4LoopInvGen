file:109.c
TRY TIME: 0
[(107, 207, 0)]
[(107, 207, 0)]
[(107, 207, 0)]
[(107, 207, 0)]
Loop 0 : Outer
Sorted indices: [0]
File not found: ../sac_c_parser/test/../ip_postcond/goal/109_goal.v. No file to delete.
File not found: ../sac_c_parser/test/../ip_postcond/goal/109_proof_auto.v. No file to delete.
File not found: ../sac_c_parser/test/../ip_postcond/goal/109_proof_manual.v. No file to delete.
LoopEntry_0:
(k == 0) * (c == c@pre) * (a == a@pre) * (j == j@pre) * (m == m@pre)

[(0, '(k == 0) * (c == c@pre) * (a == a@pre) * (j == j@pre) * (m == m@pre)')]
Successfully generated loop/109.json
INNER_FLAG: False
Variable Maps: [{'k': '0', 'c': 'c@pre', 'a': 'a@pre', 'j': 'j@pre', 'm': 'm@pre'}]
Path conditions: [None]
Pre condition: (k == 0) * (c == c@pre) * (a == a@pre) * (j == j@pre) * (m == m@pre)
Loop Condition: k < c
Updated Loop Conditions: ['0 < c@pre']
Global Unchanged Variables ['c', 'a', 'j']
Non Inductive Variables ['m']
[{'k': '0', 'c': 'c@pre', 'a': 'a@pre', 'j': 'j@pre', 'm': 'm@pre'}]
[None]

                
        /* >>> LOOP INVARIANT TO FILL <<< */
        
                /*@
          loop invariant c == \at(c, Pre);
          loop invariant a == \at(a, Pre);
          loop invariant j == \at(j, Pre);
                */
                while ( k < c) {

        if(m < a) {
            m = a;
        }
        
        k = k + 1;
    }
                

                
        /* >>> LOOP INVARIANT TO FILL <<< */
        
                /*@
          loop invariant (0 < \at(c, Pre)) ==> (((k == 0)&&(c == \at(c, Pre))&&(a == \at(a, Pre))&&(j == \at(j, Pre))&&(m == \at(m, Pre))) || (PLACE_HOLDER_m));
          loop invariant (0 < \at(c, Pre)) ==> (PLACE_HOLDER_k);
          loop invariant (!(0 < \at(c, Pre))) ==> ((k == 0)&&(c == \at(c, Pre))&&(a == \at(a, Pre))&&(j == \at(j, Pre))&&(m == \at(m, Pre)));
          loop invariant c == \at(c, Pre);
          loop invariant a == \at(a, Pre);
          loop invariant j == \at(j, Pre);
                */
                while ( k < c) {

        if(m < a) {
            m = a;
        }
        
        k = k + 1;
    }
                
void foo(int m,int j,int a,int c) {

    int k = 0;
    
    
    
                
        /* >>> LOOP INVARIANT TO FILL <<< */
        
                /*@
          loop invariant (0 < \at(c, Pre)) ==> (((k == 0)&&(c == \at(c, Pre))&&(a == \at(a, Pre))&&(j == \at(j, Pre))&&(m == \at(m, Pre))) || (PLACE_HOLDER_m));
          loop invariant (0 < \at(c, Pre)) ==> (PLACE_HOLDER_k);
          loop invariant (!(0 < \at(c, Pre))) ==> ((k == 0)&&(c == \at(c, Pre))&&(a == \at(a, Pre))&&(j == \at(j, Pre))&&(m == \at(m, Pre)));
          loop invariant c == \at(c, Pre);
          loop invariant a == \at(a, Pre);
          loop invariant j == \at(j, Pre);
                */
                while ( k < c) {

        if(m < a) {
            m = a;
        }
        
        k = k + 1;
    }
                

  /*_auto_mask_id_0_*/
}
```c
void foo(int m,int j,int a,int c) {

    int k = 0;
    
        /* >>> LOOP INVARIANT TO FILL <<< */
        
                /*@
          loop invariant (0 < \at(c, Pre)) ==> (((k == 0)&&(c == \at(c, Pre))&&(a == \at(a, Pre))&&(j == \at(j, Pre))&&(m == \at(m, Pre))) || ((k <= c) && (m >= a)));
          loop invariant (0 < \at(c, Pre)) ==> ((k >= 0) && (k <= c));
          loop invariant (!(0 < \at(c, Pre))) ==> ((k == 0)&&(c == \at(c, Pre))&&(a == \at(a, Pre))&&(j == \at(j, Pre))&&(m == \at(m, Pre)));
          loop invariant c == \at(c, Pre);
          loop invariant a == \at(a, Pre);
          loop invariant j == \at(j, Pre);
                */
                while ( k < c) {

        if(m < a) {
            m = a;
        }
        
        k = k + 1;
    }
                

  /*_auto_mask_id_0_*/
}
```

void foo(int m,int j,int a,int c) {

    int k = 0;
    
                /*@
          loop invariant (0 < \at(c, Pre)) ==> (((k == 0)&&(c == \at(c, Pre))&&(a == \at(a, Pre))&&(j == \at(j, Pre))&&(m == \at(m, Pre))) || ((k <= c) && (m >= a)));
          loop invariant (0 < \at(c, Pre)) ==> ((k >= 0) && (k <= c));
          loop invariant (!(0 < \at(c, Pre))) ==> ((k == 0)&&(c == \at(c, Pre))&&(a == \at(a, Pre))&&(j == \at(j, Pre))&&(m == \at(m, Pre)));
          loop invariant c == \at(c, Pre);
          loop invariant a == \at(a, Pre);
          loop invariant j == \at(j, Pre);
                */
                while ( k < c) {

        if(m < a) {
            m = a;
        }
        
        k = k + 1;
    }
                

  /*_auto_mask_id_0_*/
}


void foo(int m,int j,int a,int c) {

    int k = 0;
    
                /*@
          loop invariant (0 < \at(c, Pre)) ==> (((k == 0)&&(c == \at(c, Pre))&&(a == \at(a, Pre))&&(j == \at(j, Pre))&&(m == \at(m, Pre))) || ((k <= c) && (m >= a)));
          loop invariant (0 < \at(c, Pre)) ==> ((k >= 0) && (k <= c));
          loop invariant (!(0 < \at(c, Pre))) ==> ((k == 0)&&(c == \at(c, Pre))&&(a == \at(a, Pre))&&(j == \at(j, Pre))&&(m == \at(m, Pre)));
          loop invariant c == \at(c, Pre);
          loop invariant a == \at(a, Pre);
          loop invariant j == \at(j, Pre);
                */
                while ( k < c) {

        if(m < a) {
            m = a;
        }
        
        k = k + 1;
    }
                

  /*_auto_mask_id_0_*/
}

syntax Correct
Validate:
[True, True, True, True, True, True]

Verify:
[]

CORRECT INVARIANT
syntax Correct
Validate:
[True, True, True, True, True, True]

Verify:
[]

/*@
          loop invariant (0 < \at(c, Pre)) ==> (((k == 0)&&(c == \at(c, Pre))&&(a == \at(a, Pre))&&(j == \at(j, Pre))&&(m == \at(m, Pre))) || ((k <= c) && (m >= a)));
          loop invariant (0 < \at(c, Pre)) ==> ((k >= 0) && (k <= c));
          loop invariant (!(0 < \at(c, Pre))) ==> ((k == 0)&&(c == \at(c, Pre))&&(a == \at(a, Pre))&&(j == \at(j, Pre))&&(m == \at(m, Pre)));
          loop invariant c == \at(c, Pre);
          loop invariant a == \at(a, Pre);
          loop invariant j == \at(j, Pre);
                */
                while ( k < c) {

        if(m < a) {
            m = a;
        }
        
        k = k + 1;
    }
转换后
/*@ Inv
    ((0 < c@pre) => (((k == 0)&&(c == c@pre)&&(a == a@pre)&&(j == j@pre)&&(m == m@pre)) || ((k <= c) && (m >= a)))) &&
((0 < c@pre) => ((k >= 0) && (k <= c))) &&
((!(0 < c@pre)) => ((k == 0)&&(c == c@pre)&&(a == a@pre)&&(j == j@pre)&&(m == m@pre))) &&
(c == c@pre) &&
(a == a@pre) &&
(j == j@pre)
    */
                while ( k < c) {

        if(m < a) {
            m = a;
        }
        
        k = k + 1;
    }
PARTIAL CORRECT INVARIANT
继续符号执行
/*@ Inv
    ((0 < c@pre) => (((k == 0)&&(c == c@pre)&&(a == a@pre)&&(j == j@pre)&&(m == m@pre)) || ((k <= c) && (m >= a)))) &&
((0 < c@pre) => ((k >= 0) && (k <= c))) &&
((!(0 < c@pre)) => ((k == 0)&&(c == c@pre)&&(a == a@pre)&&(j == j@pre)&&(m == m@pre))) &&
(c == c@pre) &&
(a == a@pre) &&
(j == j@pre)
    */
                while ( k < c) {

        if(m < a) {
            m = a;
        }
        
        k = k + 1;
    }
File found: ../sac_c_parser/test/../ip_postcond/goal/109_goal.v. Deleting the file.
File found: ../sac_c_parser/test/../ip_postcond/goal/109_proof_auto.v. Deleting the file.
File found: ../sac_c_parser/test/../ip_postcond/goal/109_proof_manual.v. Deleting the file.
LoopEntry_0:
(k == 0) * (c == c@pre) * (a == a@pre) * (j == j@pre) * (m == m@pre)
free(): invalid pointer

[(0, '(k == 0) * (c == c@pre) * (a == a@pre) * (j == j@pre) * (m == m@pre)')]
Successfully generated loop/109.json
syntax Correct
Validate:
[True, True, True, True, True, True]

Verify:
[True]

CORRECT INVARIANT
syntax Correct
Validate:
[True, True, True, True, True, True]

Verify:
[True]

已移动文件: 109.c -> finish
-----------------------------------------

文件 109.c 处理完成. 总耗时: 64.54669618606567
错误的文件名:
  - 65.c
  - 132.c
  - 70.c
  - 94.c
========================================
错误的文件名:
  - 65.c
  - 132.c
  - 70.c
  - 94.c
========================================
错误的文件名:
  - 65.c
  - 132.c
  - 70.c
  - 94.c
========================================
-----------------------------------------
finshed_files:['29.c', '87.c', '9.c', '107.c', '65.c', '59.c', '46.c', '60.c', '78.c', '11.c', '132.c', '70.c', '121.c', '94.c', '109.c']
