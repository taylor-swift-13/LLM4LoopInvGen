file:119.c
Successfully generated loop/119.json
INNER_FLAG: False
Variable Maps: [{'sn': '0', 'i': '1', 'size': 'size@pre'}]
Path conditions: [None]
Pre condition: (sn == 0) * (i == 1) * (size == size@pre)
Loop Condition: i <= size
Updated Loop Conditions: ['1 <= size@pre']
Global Unchanged Variables ['size']
Non Inductive Variables []
[{'sn': '0', 'i': '1', 'size': 'size@pre'}]
[None]

            
    /* >>> LOOP INVARIANT TO FILL <<< 
       >>> PRECONDITION OF THE LOOP : (sn == 0) * (i == 1) * (size == \at(size, Pre)) <<< */
    
            /*@
          loop invariant size == \at(size, Pre);
            */
            while (i <= size) {
  
      i  = (i + 1);
      sn  = (sn + 1);
      
    }
            

            
    /* >>> LOOP INVARIANT TO FILL <<< 
       >>> PRECONDITION OF THE LOOP : (sn == 0) * (i == 1) * (size == \at(size, Pre)) <<< */
    
            /*@
          loop invariant (1 <= \at(size, Pre)) ==> (((sn == 0)&&(i == 1)&&(size == \at(size, Pre))) || (PLACE_HOLDER_i));
          loop invariant (1 <= \at(size, Pre)) ==> (((sn == 0)&&(i == 1)&&(size == \at(size, Pre))) || (PLACE_HOLDER_sn));
          loop invariant (!(1 <= \at(size, Pre))) ==> ((sn == 0)&&(i == 1)&&(size == \at(size, Pre)));
          loop invariant size == \at(size, Pre);
            */
            while (i <= size) {
  
      i  = (i + 1);
      sn  = (sn + 1);
      
    }
            

void foo(int size) {
 
    int i = 1;
    int sn = 0;
    
     
    
            
    /* >>> LOOP INVARIANT TO FILL <<< 
       >>> PRECONDITION OF THE LOOP : (sn == 0) * (i == 1) * (size == \at(size, Pre)) <<< */
    
            /*@
          loop invariant (1 <= \at(size, Pre)) ==> (((sn == 0)&&(i == 1)&&(size == \at(size, Pre))) || (PLACE_HOLDER_i));
          loop invariant (1 <= \at(size, Pre)) ==> (((sn == 0)&&(i == 1)&&(size == \at(size, Pre))) || (PLACE_HOLDER_sn));
          loop invariant (!(1 <= \at(size, Pre))) ==> ((sn == 0)&&(i == 1)&&(size == \at(size, Pre)));
          loop invariant size == \at(size, Pre);
            */
            while (i <= size) {
  
      i  = (i + 1);
      sn  = (sn + 1);
      
    }
            
  
    /*@ assert (sn != 0) ==> (sn == size);*/
  
  }
Let's analyze the given C loop program and fill in the placeholders for loop invariants.

### Purpose and Structure of the Loop:
- **Objective**: The loop aims to increment the variable `sn` by one for each iteration until `i` exceeds `size`. Consequently, when the loop terminates, `sn` will equal `size`.
- **Structure**:
  - **Loop Condition**: The loop executes as long as `i <= size`.
  - **Operations**: Within each iteration, `i` is incremented by 1 (`i = i + 1`), and `sn` is incremented by 1 (`sn = sn + 1`).
  - **Relevant Variables**: `i`, `sn`, and `size`.

### Discussion of the Loop Invariant:
- **Invariant**: The invariant needs to assert correct relationships between `sn`, `i`, and `size` that hold at the start and end of each iteration. The expression must reflect that if the loop is running, `sn` has accumulated counts consistent with the number of iterations.

### Establishment:
- The invariant holds true initially because `sn` is 0, `i` is 1, and `size` is unchanged from the pre-condition.

### Preservation:
- **Preservation**: At each iteration, the invariant must continue holding. The relationship between `sn` and `i` remains consistent because both are incremented in parallel, ensuring `sn` accumulates correctly.

### Termination Analysis of the Loop:
- When the loop condition `i <= size` becomes false for the first time, `i` is `size + 1`, and `sn` should equal `size`. The invariant holds because `sn` correctly reflects the accumulated count.

### Correctness of the Post-condition:
- **Post-condition**: Once the loop terminates, `sn` equals `size` if `sn` is not zero, which is guaranteed by the invariant and loop termination condition.

### Implication of the Pre-condition:
- The pre-condition ensures the initial setup where `sn` and `i` are zero and one respectively, facilitating the invariant's establishment.

### Filled Loop Program:
```c
void foo(int size) {
 
    int i = 1;
    int sn = 0;
    
     
    
            
    /* >>> LOOP INVARIANT TO FILL <<< 
       >>> PRECONDITION OF THE LOOP : (sn == 0) * (i == 1) * (size == \at(size, Pre)) <<< */
    
            /*@
          loop invariant (1 <= \at(size, Pre)) ==> (((sn == 0)&&(i == 1)&&(size == \at(size, Pre))) || (sn == i - 1));
          loop invariant (1 <= \at(size, Pre)) ==> (((sn == 0)&&(i == 1)&&(size == \at(size, Pre))) || (sn == i - 1));
          loop invariant (!(1 <= \at(size, Pre))) ==> ((sn == 0)&&(i == 1)&&(size == \at(size, Pre)));
          loop invariant size == \at(size, Pre);
            */
            while (i <= size) {
  
      i  = (i + 1);
      sn  = (sn + 1);
      
    }
            
  
    /*@ assert (sn != 0) ==> (sn == size);*/
  
  }
```

void foo(int size) {
 
    int i = 1;
    int sn = 0;
    
     
    
            
            /*@
          loop invariant (1 <= \at(size, Pre)) ==> (((sn == 0)&&(i == 1)&&(size == \at(size, Pre))) || (sn == i - 1));
          loop invariant (1 <= \at(size, Pre)) ==> (((sn == 0)&&(i == 1)&&(size == \at(size, Pre))) || (sn == i - 1));
          loop invariant (!(1 <= \at(size, Pre))) ==> ((sn == 0)&&(i == 1)&&(size == \at(size, Pre)));
          loop invariant size == \at(size, Pre);
            */
            while (i <= size) {
  
      i  = (i + 1);
      sn  = (sn + 1);
      
    }
            
  
    /*@ assert (sn != 0) ==> (sn == size);*/
  
  }


void foo(int size) {
 
    int i = 1;
    int sn = 0;
    
     
    
            
            /*@
          loop invariant (1 <= \at(size, Pre)) ==> (((sn == 0)&&(i == 1)&&(size == \at(size, Pre))) || (sn == i - 1));
          loop invariant (1 <= \at(size, Pre)) ==> (((sn == 0)&&(i == 1)&&(size == \at(size, Pre))) || (sn == i - 1));
          loop invariant (!(1 <= \at(size, Pre))) ==> ((sn == 0)&&(i == 1)&&(size == \at(size, Pre)));
          loop invariant size == \at(size, Pre);
            */
            while (i <= size) {
  
      i  = (i + 1);
      sn  = (sn + 1);
      
    }
            
  
    /*@ assert (sn != 0) ==> (sn == size);*/
  
  }

syntax Correct
Validate:
[True, True, True, True]

Verify:
[False]

Goal Assertion (file output/119.c, line 24):
Assume {
  Type: is_sint32(i) /\ is_sint32(size_0) /\ is_sint32(i - 1).
  (* Goal *)
  When: i != 1.
  (* Invariant *)
  Have: 0 < size_0.
  (* Else *)
  Have: size_0 < i.
}
Prove: (1 + size_0) = i.
Prover Z3 4.8.12 returns Timeout (Qed:5ms) (3s)
Error found in file: output/119.c at line: 24
Error line content: /*@ assert (sn != 0) ==> (sn == size);*/

### Error Analysis ###

The error message indicates that the goal assertion `(sn != 0) ==> (sn == size)` is not provable due to a timeout in the Z3 prover. This suggests that the current loop invariant is not strong enough to ensure the postcondition. The current loop invariant `sn == i - 1` tracks the relationship between `sn` and `i`, but it does not directly relate `sn` to `size`. To prove the postcondition, we need to establish a stronger invariant that directly correlates `sn` to `size`. Specifically, since `sn` increments synchronously with `i`, and the loop condition is `i <= size`, we can infer that `sn == i - 1` when the loop exits, and eventually `sn == size` when the loop terminates.

### Fixed C Code ###

```c
void foo(int size) {
 
    int i = 1;
    int sn = 0;
    
    /*@
      loop invariant (1 <= \at(size, Pre)) ==> (((sn == 0)&&(i == 1)&&(size == \at(size, Pre))) || (sn == i - 1));
      loop invariant (1 <= \at(size, Pre)) ==> (((sn == 0)&&(i == 1)&&(size == \at(size, Pre))) || (sn == i - 1));
      loop invariant (!(1 <= \at(size, Pre))) ==> ((sn == 0)&&(i == 1)&&(size == \at(size, Pre)));
      loop invariant size == \at(size, Pre);
      loop invariant sn <= size;
      loop invariant i - 1 <= sn;
    */
    while (i <= size) {
  
      i  = (i + 1);
      sn  = (sn + 1);
      
    }
            
    /*@ assert (sn != 0) ==> (sn == size);*/
  
}
```

The added invariants `sn <= size` and `i - 1 <= sn` strengthen the relationship between `sn` and `size`, ensuring the postcondition can be verified. These invariants imply that when the loop terminates (`i > size`), `sn` will be precisely equal to `size`, thus satisfying the assertion `(sn != 0) ==> (sn == size)`.
after strength

void foo(int size) {
 
    int i = 1;
    int sn = 0;
    
    /*@
      loop invariant (1 <= \at(size, Pre)) ==> (((sn == 0)&&(i == 1)&&(size == \at(size, Pre))) || (sn == i - 1));
      loop invariant (1 <= \at(size, Pre)) ==> (((sn == 0)&&(i == 1)&&(size == \at(size, Pre))) || (sn == i - 1));
      loop invariant (!(1 <= \at(size, Pre))) ==> ((sn == 0)&&(i == 1)&&(size == \at(size, Pre)));
      loop invariant size == \at(size, Pre);
      loop invariant sn <= size;
      loop invariant i - 1 <= sn;
    */
    while (i <= size) {
  
      i  = (i + 1);
      sn  = (sn + 1);
      
    }
            
    /*@ assert (sn != 0) ==> (sn == size);*/
  
}

syntax Correct
Validate:
[True, True, True, True, False, True]

Goal Establishment of Invariant (file output/119.c, line 12):
Assume { Type: is_sint32(size_0). }
Prove: 0 <= size_0.
Prover Z3 4.8.12 returns Timeout (Qed:1ms) (3s)
Error found in file: output/119.c at line: 12
Error line content: loop invariant sn <= size;

Verify:
[True]


void foo(int size) {
 
    int i = 1;
    int sn = 0;
    
    /*@
      loop invariant (1 <= \at(size, Pre)) ==> (((sn == 0)&&(i == 1)&&(size == \at(size, Pre))) || (sn == i - 1));
      loop invariant (1 <= \at(size, Pre)) ==> (((sn == 0)&&(i == 1)&&(size == \at(size, Pre))) || (sn == i - 1));
      loop invariant (!(1 <= \at(size, Pre))) ==> ((sn == 0)&&(i == 1)&&(size == \at(size, Pre)));
      loop invariant size == \at(size, Pre);
      loop invariant sn <= size [INVARIANT FAILED] ;
      loop invariant i - 1 <= sn;
    */
    while (i <= size) {
  
      i  = (i + 1);
      sn  = (sn + 1);
      
    }
            
    /*@ assert (sn != 0) ==> (sn == size);*/
  
}

### Error Analysis:

The error message indicates that Frama-C cannot establish the loop invariant `sn <= size` in the initial state. This suggests that, based on the given preconditions, Frama-C is not able to prove that `sn <= size` holds before the loop begins execution. 

Given the initial conditions `(sn == 0) * (i == 1) * (size == \at(size, Pre))`, at the start of the loop, `sn` is initialized to 0. Therefore, `sn <= size` should be trivially true if `size` is non-negative. 

To address this, we can remove the problematic invariant `sn <= size` since the existing invariants already cover the relationship between `sn`, `i`, and `size` effectively. The invariant `sn <= size` is redundant because `sn` starts at 0 and is incremented with each loop iteration, and the loop condition `i <= size` ensures that `sn` cannot exceed `size`.

### Fixed C Code:

```c
void foo(int size) {
 
    int i = 1;
    int sn = 0;
    
    /*@
      loop invariant (1 <= \at(size, Pre)) ==> (((sn == 0)&&(i == 1)&&(size == \at(size, Pre))) || (sn == i - 1));
      loop invariant (1 <= \at(size, Pre)) ==> (((sn == 0)&&(i == 1)&&(size == \at(size, Pre))) || (sn == i - 1));
      loop invariant (!(1 <= \at(size, Pre))) ==> ((sn == 0)&&(i == 1)&&(size == \at(size, Pre)));
      loop invariant size == \at(size, Pre);
      loop invariant i - 1 <= sn;
    */
    while (i <= size) {
  
      i  = (i + 1);
      sn  = (sn + 1);
      
    }
            
    /*@ assert (sn != 0) ==> (sn == size);*/
  
}
```

This modified code removes the problematic invariant `sn <= size` which Frama-C could not prove in the establishment phase, as it was redundant given the structure of the loop and the other invariants already ensuring the correct relationship between variables.
after weaken

void foo(int size) {
 
    int i = 1;
    int sn = 0;
    
    /*@
      loop invariant (1 <= \at(size, Pre)) ==> (((sn == 0)&&(i == 1)&&(size == \at(size, Pre))) || (sn == i - 1));
      loop invariant (1 <= \at(size, Pre)) ==> (((sn == 0)&&(i == 1)&&(size == \at(size, Pre))) || (sn == i - 1));
      loop invariant (!(1 <= \at(size, Pre))) ==> ((sn == 0)&&(i == 1)&&(size == \at(size, Pre)));
      loop invariant size == \at(size, Pre);
      loop invariant i - 1 <= sn;
    */
    while (i <= size) {
  
      i  = (i + 1);
      sn  = (sn + 1);
      
    }
            
    /*@ assert (sn != 0) ==> (sn == size);*/
  
}

syntax Correct
Validate:
[True, True, True, True, True]

Verify:
[False]

Goal Assertion (file output/119.c, line 21):
Assume {
  Type: is_sint32(i) /\ is_sint32(size_0) /\ is_sint32(i - 1).
  (* Goal *)
  When: i != 1.
  (* Invariant *)
  Have: 0 < size_0.
  (* Else *)
  Have: size_0 < i.
}
Prove: (1 + size_0) = i.
Prover Z3 4.8.12 returns Timeout (Qed:5ms) (3s)
Error found in file: output/119.c at line: 21
Error line content: /*@ assert (sn != 0) ==> (sn == size);*/

### Error Analysis:

The error relates to the "Goal Assertion" for the post-condition that `(sn != 0) ==> (sn == size)`. The existing loop invariants do not sufficiently constrain the relationship between `sn` and `size`. The loop invariants need to be strengthened to ensure that Frama-C can verify the post-condition. Specifically, the loop invariant should ensure that `sn` will equal `size` once the loop terminates, which is not currently guaranteed by the existing invariants.

### Fixed C Code:

```c
void foo(int size) {
 
    int i = 1;
    int sn = 0;
    
    /*@
      loop invariant (1 <= \at(size, Pre)) ==> (((sn == 0)&&(i == 1)&&(size == \at(size, Pre))) || (sn == i - 1));
      loop invariant (1 <= \at(size, Pre)) ==> (((sn == 0)&&(i == 1)&&(size == \at(size, Pre))) || (sn == i - 1));
      loop invariant (!(1 <= \at(size, Pre))) ==> ((sn == 0)&&(i == 1)&&(size == \at(size, Pre)));
      loop invariant size == \at(size, Pre);
      loop invariant i - 1 <= sn;
      loop invariant sn <= size; // Added invariant to strengthen the relationship between sn and size.
    */
    while (i <= size) {
  
      i  = (i + 1);
      sn  = (sn + 1);
      
    }
            
    /*@ assert (sn != 0) ==> (sn == size);*/
  
}
```

The modification adds an invariant `sn <= size` to ensure that `sn` will equal `size` when the loop exits. This strengthens the invariant to help verify the post-condition.
after strength

void foo(int size) {
 
    int i = 1;
    int sn = 0;
    
    /*@
      loop invariant (1 <= \at(size, Pre)) ==> (((sn == 0)&&(i == 1)&&(size == \at(size, Pre))) || (sn == i - 1));
      loop invariant (1 <= \at(size, Pre)) ==> (((sn == 0)&&(i == 1)&&(size == \at(size, Pre))) || (sn == i - 1));
      loop invariant (!(1 <= \at(size, Pre))) ==> ((sn == 0)&&(i == 1)&&(size == \at(size, Pre)));
      loop invariant size == \at(size, Pre);
      loop invariant i - 1 <= sn;
      loop invariant sn <= size; // Added invariant to strengthen the relationship between sn and size.
    */
    while (i <= size) {
  
      i  = (i + 1);
      sn  = (sn + 1);
      
    }
            
    /*@ assert (sn != 0) ==> (sn == size);*/
  
}

syntax Correct
Validate:
[True, True, True, True, True, False]

Goal Establishment of Invariant (file output/119.c, line 13):
Assume { Type: is_sint32(size_0). }
Prove: 0 <= size_0.
Prover Z3 4.8.12 returns Timeout (Qed:1ms) (3s)
Error found in file: output/119.c at line: 13
Error line content: loop invariant sn <= size; // Added invariant to strengthen the relationship between sn and size.

Verify:
[True]

syntax Correct
Validate:
[True, True, True, True, True, False]

Goal Establishment of Invariant (file output/119.c, line 13):
Assume { Type: is_sint32(size_0). }
Prove: 0 <= size_0.
Prover Z3 4.8.12 returns Timeout (Qed:1ms) (3s)
Error found in file: output/119.c at line: 13
Error line content: loop invariant sn <= size; // Added invariant to strengthen the relationship between sn and size.

Verify:
[True]

[(111, 188, 0)]
[(111, 188, 0)]
[(111, 188, 0)]
[(111, 188, 0)]
Loop 0 : Outer
Sorted indices: [0]
File found: ../sac_c_parser/test/../ip_postcond/goal/119_goal.v. Deleting the file.
File found: ../sac_c_parser/test/../ip_postcond/goal/119_proof_auto.v. Deleting the file.
File found: ../sac_c_parser/test/../ip_postcond/goal/119_proof_manual.v. Deleting the file.
LoopEntry_0:
(sn == 0) * (i == 1) * (size == size@pre)

Successfully generated loop/119.json
INNER_FLAG: False
Variable Maps: [{'sn': '0', 'i': '1', 'size': 'size@pre'}]
Path conditions: [None]
Pre condition: (sn == 0) * (i == 1) * (size == size@pre)
Loop Condition: i <= size
Updated Loop Conditions: ['1 <= size@pre']
Global Unchanged Variables ['size']
Non Inductive Variables []
[{'sn': '0', 'i': '1', 'size': 'size@pre'}]
[None]

            
    /* >>> LOOP INVARIANT TO FILL <<< 
       >>> PRECONDITION OF THE LOOP : (sn == 0) * (i == 1) * (size == \at(size, Pre)) <<< */
    
            /*@
          loop invariant size == \at(size, Pre);
            */
            while (i <= size) {
  
      i  = (i + 1);
      sn  = (sn + 1);
      
    }
            

            
    /* >>> LOOP INVARIANT TO FILL <<< 
       >>> PRECONDITION OF THE LOOP : (sn == 0) * (i == 1) * (size == \at(size, Pre)) <<< */
    
            /*@
          loop invariant (1 <= \at(size, Pre)) ==> (((sn == 0)&&(i == 1)&&(size == \at(size, Pre))) || (PLACE_HOLDER_i));
          loop invariant (1 <= \at(size, Pre)) ==> (((sn == 0)&&(i == 1)&&(size == \at(size, Pre))) || (PLACE_HOLDER_sn));
          loop invariant (!(1 <= \at(size, Pre))) ==> ((sn == 0)&&(i == 1)&&(size == \at(size, Pre)));
          loop invariant size == \at(size, Pre);
            */
            while (i <= size) {
  
      i  = (i + 1);
      sn  = (sn + 1);
      
    }
            

void foo(int size) {
 
    int i = 1;
    int sn = 0;
    
     
    
            
    /* >>> LOOP INVARIANT TO FILL <<< 
       >>> PRECONDITION OF THE LOOP : (sn == 0) * (i == 1) * (size == \at(size, Pre)) <<< */
    
            /*@
          loop invariant (1 <= \at(size, Pre)) ==> (((sn == 0)&&(i == 1)&&(size == \at(size, Pre))) || (PLACE_HOLDER_i));
          loop invariant (1 <= \at(size, Pre)) ==> (((sn == 0)&&(i == 1)&&(size == \at(size, Pre))) || (PLACE_HOLDER_sn));
          loop invariant (!(1 <= \at(size, Pre))) ==> ((sn == 0)&&(i == 1)&&(size == \at(size, Pre)));
          loop invariant size == \at(size, Pre);
            */
            while (i <= size) {
  
      i  = (i + 1);
      sn  = (sn + 1);
      
    }
            
  
    /*@ assert (sn != 0) ==> (sn == size);*/
  
  }
To analyze the given C loop and fill in the necessary loop invariants, let's proceed step by step.

### a. Purpose and Structure of the Loop

**Objective of the Loop:**
The loop iterates from 1 to `size`, incrementing both the loop control variable `i` and a counter `sn` in each iteration. The goal is to count the number of iterations, which should equal `size` once the loop terminates.

**Structure of the Loop:**
- **Condition:** The loop executes as long as `i` is less than or equal to `size`.
- **Operations:** In each iteration, `i` is incremented by 1, and `sn` is incremented by 1.
- **Relevant Variables:** `i` (loop control variable), `sn` (counter), `size` (loop upper bound).

### b. Discussion of the Loop Invariant

**Proposed Loop Invariant:**
- `(1 <= \at(size, Pre)) ==> (((sn == 0)&&(i == 1)&&(size == \at(size, Pre))) || (PLACE_HOLDER_i));`
- `(1 <= \at(size, Pre)) ==> (((sn == 0)&&(i == 1)&&(size == \at(size, Pre))) || (PLACE_HOLDER_sn));`
- `(!(1 <= \at(size, Pre))) ==> ((sn == 0)&&(i == 1)&&(size == \at(size, Pre)));`
- `size == \at(size, Pre);`

**Why it is a valid invariant:**
The invariant captures the relationship between `i`, `sn`, and `size` throughout the loop execution. It ensures that `sn` correctly counts the iterations and `i` progresses correctly.

### c. Establishment

**How the invariant satisfies the establishment condition:**
- Before the loop starts, `sn = 0` and `i = 1`, satisfying the invariant conditions for the initial state.

### d. Preservation

**How the invariant satisfies the preservation condition:**
- At the start of each iteration, if the invariant holds, updating `i` and `sn` (both incremented by 1) ensures that the invariant remains true.

### e. Termination Analysis of the Loop

**Values of relevant variables when loop terminates:**
- When `i` exceeds `size`, the loop stops. At this point, `sn` should equal `size`, maintaining the invariant property.

### f. Correctness of the Post-condition

**Why the post-condition is correct:**
- The post-condition `(sn != 0) ==> (sn == size)` follows directly from the invariant and termination condition. When `i` exceeds `size`, `sn` will indeed equal `size`.

### g. Implication of the Pre-condition

**Why the pre-condition implies the loop invariant:**
- The pre-condition `(sn == 0) * (i == 1) * (size == \at(size, Pre))` establishes the initial truth of the invariant before loop execution begins.

### 2. Provide the complete C loop program with invariant annotations filled in.

```c
void foo(int size) {
 
    int i = 1;
    int sn = 0;
    
    /* >>> LOOP INVARIANT TO FILL <<< 
       >>> PRECONDITION OF THE LOOP : (sn == 0) * (i == 1) * (size == \at(size, Pre)) <<< */
    
    /*@
      loop invariant (1 <= \at(size, Pre)) ==> (((sn == 0)&&(i == 1)&&(size == \at(size, Pre))) || (i == sn + 1 && 1 <= i && i <= size + 1));
      loop invariant (1 <= \at(size, Pre)) ==> (((sn == 0)&&(i == 1)&&(size == \at(size, Pre))) || (sn == i - 1 && 0 <= sn && sn <= size));
      loop invariant (!(1 <= \at(size, Pre))) ==> ((sn == 0)&&(i == 1)&&(size == \at(size, Pre)));
      loop invariant size == \at(size, Pre);
    */
    while (i <= size) {
  
      i  = (i + 1);
      sn  = (sn + 1);
      
    }
  
    /*@ assert (sn != 0) ==> (sn == size);*/
}
```

void foo(int size) {
 
    int i = 1;
    int sn = 0;
    
    /*@
      loop invariant (1 <= \at(size, Pre)) ==> (((sn == 0)&&(i == 1)&&(size == \at(size, Pre))) || (i == sn + 1 && 1 <= i && i <= size + 1));
      loop invariant (1 <= \at(size, Pre)) ==> (((sn == 0)&&(i == 1)&&(size == \at(size, Pre))) || (sn == i - 1 && 0 <= sn && sn <= size));
      loop invariant (!(1 <= \at(size, Pre))) ==> ((sn == 0)&&(i == 1)&&(size == \at(size, Pre)));
      loop invariant size == \at(size, Pre);
    */
    while (i <= size) {
  
      i  = (i + 1);
      sn  = (sn + 1);
      
    }
  
    /*@ assert (sn != 0) ==> (sn == size);*/
}


void foo(int size) {
 
    int i = 1;
    int sn = 0;
    
    /*@
      loop invariant (1 <= \at(size, Pre)) ==> (((sn == 0)&&(i == 1)&&(size == \at(size, Pre))) || (i == sn + 1 && 1 <= i && i <= size + 1));
      loop invariant (1 <= \at(size, Pre)) ==> (((sn == 0)&&(i == 1)&&(size == \at(size, Pre))) || (sn == i - 1 && 0 <= sn && sn <= size));
      loop invariant (!(1 <= \at(size, Pre))) ==> ((sn == 0)&&(i == 1)&&(size == \at(size, Pre)));
      loop invariant size == \at(size, Pre);
    */
    while (i <= size) {
  
      i  = (i + 1);
      sn  = (sn + 1);
      
    }
  
    /*@ assert (sn != 0) ==> (sn == size);*/
}

syntax Correct
Validate:
[True, True, True, True]

Verify:
[True]

CORRECT INVARIANT
syntax Correct
Validate:
[True, True, True, True]

Verify:
[True]

syntax Correct
Validate:
[True, True, True, True]

Verify:
[True]

已移动文件: 119.c -> finish
-----------------------------------------

文件 119.c 处理完成. 总耗时: 157.11884427070618
-----------------------------------------
finshed_files:['88.c', '4.c', '114.c', '8.c', '84.c', '83.c', '111.c', '47.c', '14.c', '49.c', '131.c', '119.c']
