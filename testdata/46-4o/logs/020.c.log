file:020.c
Successfully generated loop/020.json
INNER_FLAG: False
Variable Maps: [{'m': '0', 'n': 'n@pre', 'i': 'i@pre', 'j': '0', 'k': 'k@pre', 'y': 'y@pre', 'x': 'x@pre'}]
Path conditions: ['x@pre + y@pre == k@pre && n@pre > 0']
Pre condition: x@pre + y@pre == k@pre && n@pre > 0 && (m == 0) * (n == n@pre) * (i == i@pre) * (j == 0) * (k == k@pre) * (y == y@pre) * (x == x@pre)
Loop Condition: j < n
Updated Loop Conditions: ['0 < n@pre']
Global Unchanged Variables ['n', 'i', 'k']
Non Inductive Variables ['m']
[{'m': '0', 'n': 'n@pre', 'i': 'i@pre', 'j': '0', 'k': 'k@pre', 'y': 'y@pre', 'x': 'x@pre'}]
['x@pre + y@pre == k@pre && n@pre > 0']

            
    /* >>> LOOP INVARIANT TO FILL <<< 
       >>> PRECONDITION OF THE LOOP : \at(x, Pre) + \at(y, Pre) == \at(k, Pre) && \at(n, Pre) > 0 && (m == 0) * (n == \at(n, Pre)) * (i == \at(i, Pre)) * (j == 0) * (k == \at(k, Pre)) * (y == \at(y, Pre)) * (x == \at(x, Pre)) <<< */
    
            /*@
          loop invariant (\at(x, Pre) + \at(y, Pre) == \at(k, Pre) && \at(n, Pre) > 0) ==> (n == \at(n, Pre));
          loop invariant (\at(x, Pre) + \at(y, Pre) == \at(k, Pre) && \at(n, Pre) > 0) ==> (i == \at(i, Pre));
          loop invariant (\at(x, Pre) + \at(y, Pre) == \at(k, Pre) && \at(n, Pre) > 0) ==> (k == \at(k, Pre));
            */
            while (j < n) {
    if (j == i) {
      x++;
      y--;
    } else {
      y++;
      x--;
    }
    if (unknown()){
       m = j;
    }
    j++;
  }
            

            
    /* >>> LOOP INVARIANT TO FILL <<< 
       >>> PRECONDITION OF THE LOOP : \at(x, Pre) + \at(y, Pre) == \at(k, Pre) && \at(n, Pre) > 0 && (m == 0) * (n == \at(n, Pre)) * (i == \at(i, Pre)) * (j == 0) * (k == \at(k, Pre)) * (y == \at(y, Pre)) * (x == \at(x, Pre)) <<< */
    
            /*@
          loop invariant  (\at(x, Pre) + \at(y, Pre) == \at(k, Pre) && \at(n, Pre) > 0) ==> ((0 < \at(n, Pre)) ==> (((m == 0)&&(n == \at(n, Pre))&&(i == \at(i, Pre))&&(j == 0)&&(k == \at(k, Pre))&&(y == \at(y, Pre))&&(x == \at(x, Pre))) || (PLACE_HOLDER_x))) ;
          loop invariant  (\at(x, Pre) + \at(y, Pre) == \at(k, Pre) && \at(n, Pre) > 0) ==> ((0 < \at(n, Pre)) ==> (((m == 0)&&(n == \at(n, Pre))&&(i == \at(i, Pre))&&(j == 0)&&(k == \at(k, Pre))&&(y == \at(y, Pre))&&(x == \at(x, Pre))) || (PLACE_HOLDER_y))) ;
          loop invariant  (\at(x, Pre) + \at(y, Pre) == \at(k, Pre) && \at(n, Pre) > 0) ==> ((0 < \at(n, Pre)) ==> (((m == 0)&&(n == \at(n, Pre))&&(i == \at(i, Pre))&&(j == 0)&&(k == \at(k, Pre))&&(y == \at(y, Pre))&&(x == \at(x, Pre))) || (PLACE_HOLDER_j))) ;
          loop invariant  (\at(x, Pre) + \at(y, Pre) == \at(k, Pre) && \at(n, Pre) > 0) ==> ((0 < \at(n, Pre)) ==> (((m == 0)&&(n == \at(n, Pre))&&(i == \at(i, Pre))&&(j == 0)&&(k == \at(k, Pre))&&(y == \at(y, Pre))&&(x == \at(x, Pre))) || (PLACE_HOLDER_m))) ;
          loop invariant (\at(x, Pre) + \at(y, Pre) == \at(k, Pre) && \at(n, Pre) > 0) ==> ((!(0 < \at(n, Pre))) ==> ((m == 0)&&(n == \at(n, Pre))&&(i == \at(i, Pre))&&(j == 0)&&(k == \at(k, Pre))&&(y == \at(y, Pre))&&(x == \at(x, Pre))));
          loop invariant (\at(x, Pre) + \at(y, Pre) == \at(k, Pre) && \at(n, Pre) > 0) ==> (n == \at(n, Pre));
          loop invariant (\at(x, Pre) + \at(y, Pre) == \at(k, Pre) && \at(n, Pre) > 0) ==> (i == \at(i, Pre));
          loop invariant (\at(x, Pre) + \at(y, Pre) == \at(k, Pre) && \at(n, Pre) > 0) ==> (k == \at(k, Pre));
            */
            while (j < n) {
    if (j == i) {
      x++;
      y--;
    } else {
      y++;
      x--;
    }
    if (unknown()){
       m = j;
    }
    j++;
  }
            

int unknown();

/*@
requires (x + y) == k;
requires n > 0;
*/
void foo(int x, int y, int k, int j, int i, int n) {
 
  int m = 0;
  j = 0;
  
            
    /* >>> LOOP INVARIANT TO FILL <<< 
       >>> PRECONDITION OF THE LOOP : \at(x, Pre) + \at(y, Pre) == \at(k, Pre) && \at(n, Pre) > 0 && (m == 0) * (n == \at(n, Pre)) * (i == \at(i, Pre)) * (j == 0) * (k == \at(k, Pre)) * (y == \at(y, Pre)) * (x == \at(x, Pre)) <<< */
    
            /*@
          loop invariant  (\at(x, Pre) + \at(y, Pre) == \at(k, Pre) && \at(n, Pre) > 0) ==> ((0 < \at(n, Pre)) ==> (((m == 0)&&(n == \at(n, Pre))&&(i == \at(i, Pre))&&(j == 0)&&(k == \at(k, Pre))&&(y == \at(y, Pre))&&(x == \at(x, Pre))) || (PLACE_HOLDER_x))) ;
          loop invariant  (\at(x, Pre) + \at(y, Pre) == \at(k, Pre) && \at(n, Pre) > 0) ==> ((0 < \at(n, Pre)) ==> (((m == 0)&&(n == \at(n, Pre))&&(i == \at(i, Pre))&&(j == 0)&&(k == \at(k, Pre))&&(y == \at(y, Pre))&&(x == \at(x, Pre))) || (PLACE_HOLDER_y))) ;
          loop invariant  (\at(x, Pre) + \at(y, Pre) == \at(k, Pre) && \at(n, Pre) > 0) ==> ((0 < \at(n, Pre)) ==> (((m == 0)&&(n == \at(n, Pre))&&(i == \at(i, Pre))&&(j == 0)&&(k == \at(k, Pre))&&(y == \at(y, Pre))&&(x == \at(x, Pre))) || (PLACE_HOLDER_j))) ;
          loop invariant  (\at(x, Pre) + \at(y, Pre) == \at(k, Pre) && \at(n, Pre) > 0) ==> ((0 < \at(n, Pre)) ==> (((m == 0)&&(n == \at(n, Pre))&&(i == \at(i, Pre))&&(j == 0)&&(k == \at(k, Pre))&&(y == \at(y, Pre))&&(x == \at(x, Pre))) || (PLACE_HOLDER_m))) ;
          loop invariant (\at(x, Pre) + \at(y, Pre) == \at(k, Pre) && \at(n, Pre) > 0) ==> ((!(0 < \at(n, Pre))) ==> ((m == 0)&&(n == \at(n, Pre))&&(i == \at(i, Pre))&&(j == 0)&&(k == \at(k, Pre))&&(y == \at(y, Pre))&&(x == \at(x, Pre))));
          loop invariant (\at(x, Pre) + \at(y, Pre) == \at(k, Pre) && \at(n, Pre) > 0) ==> (n == \at(n, Pre));
          loop invariant (\at(x, Pre) + \at(y, Pre) == \at(k, Pre) && \at(n, Pre) > 0) ==> (i == \at(i, Pre));
          loop invariant (\at(x, Pre) + \at(y, Pre) == \at(k, Pre) && \at(n, Pre) > 0) ==> (k == \at(k, Pre));
            */
            while (j < n) {
    if (j == i) {
      x++;
      y--;
    } else {
      y++;
      x--;
    }
    if (unknown()){
       m = j;
    }
    j++;
  }
            
  /*@ assert (x + y) == k; */
  
  /*@ assert(n > 0) ==> (0 <= m && m < n);*/
  

}
Here is the filled-in C loop program with invariant annotations:

```c
int unknown();

/*@
requires (x + y) == k;
requires n > 0;
*/
void foo(int x, int y, int k, int j, int i, int n) {
 
  int m = 0;
  j = 0;
  
            
    /* >>> LOOP INVARIANT TO FILL <<< 
       >>> PRECONDITION OF THE LOOP : \at(x, Pre) + \at(y, Pre) == \at(k, Pre) && \at(n, Pre) > 0 && (m == 0) * (n == \at(n, Pre)) * (i == \at(i, Pre)) * (j == 0) * (k == \at(k, Pre)) * (y == \at(y, Pre)) * (x == \at(x, Pre)) <<< */
    
            /*@
          loop invariant  (\at(x, Pre) + \at(y, Pre) == \at(k, Pre) && \at(n, Pre) > 0) ==> ((0 < \at(n, Pre)) ==> (((m == 0)&&(n == \at(n, Pre))&&(i == \at(i, Pre))&&(j == 0)&&(k == \at(k, Pre))&&(y == \at(y, Pre))&&(x == \at(x, Pre))) || ((x + y) == k))) ;
          loop invariant  (\at(x, Pre) + \at(y, Pre) == \at(k, Pre) && \at(n, Pre) > 0) ==> ((0 < \at(n, Pre)) ==> (((m == 0)&&(n == \at(n, Pre))&&(i == \at(i, Pre))&&(j == 0)&&(k == \at(k, Pre))&&(y == \at(y, Pre))&&(x == \at(x, Pre))) || ((x + y) == k))) ;
          loop invariant  (\at(x, Pre) + \at(y, Pre) == \at(k, Pre) && \at(n, Pre) > 0) ==> ((0 < \at(n, Pre)) ==> (((m == 0)&&(n == \at(n, Pre))&&(i == \at(i, Pre))&&(j == 0)&&(k == \at(k, Pre))&&(y == \at(y, Pre))&&(x == \at(x, Pre))) || (0 <= j && j <= n))) ;
          loop invariant  (\at(x, Pre) + \at(y, Pre) == \at(k, Pre) && \at(n, Pre) > 0) ==> ((0 < \at(n, Pre)) ==> (((m == 0)&&(n == \at(n, Pre))&&(i == \at(i, Pre))&&(j == 0)&&(k == \at(k, Pre))&&(y == \at(y, Pre))&&(x == \at(x, Pre))) || ((0 <= m && m < n)))) ;
          loop invariant (\at(x, Pre) + \at(y, Pre) == \at(k, Pre) && \at(n, Pre) > 0) ==> ((!(0 < \at(n, Pre))) ==> ((m == 0)&&(n == \at(n, Pre))&&(i == \at(i, Pre))&&(j == 0)&&(k == \at(k, Pre))&&(y == \at(y, Pre))&&(x == \at(x, Pre))));
          loop invariant (\at(x, Pre) + \at(y, Pre) == \at(k, Pre) && \at(n, Pre) > 0) ==> (n == \at(n, Pre));
          loop invariant (\at(x, Pre) + \at(y, Pre) == \at(k, Pre) && \at(n, Pre) > 0) ==> (i == \at(i, Pre));
          loop invariant (\at(x, Pre) + \at(y, Pre) == \at(k, Pre) && \at(n, Pre) > 0) ==> (k == \at(k, Pre));
            */
            while (j < n) {
    if (j == i) {
      x++;
      y--;
    } else {
      y++;
      x--;
    }
    if (unknown()){
       m = j;
    }
    j++;
  }
            
  /*@ assert (x + y) == k; */
  
  /*@ assert(n > 0) ==> (0 <= m && m < n);*/
  

}
```

int unknown();

/*@
requires (x + y) == k;
requires n > 0;
*/
void foo(int x, int y, int k, int j, int i, int n) {
 
  int m = 0;
  j = 0;
  
            
            /*@
          loop invariant  (\at(x, Pre) + \at(y, Pre) == \at(k, Pre) && \at(n, Pre) > 0) ==> ((0 < \at(n, Pre)) ==> (((m == 0)&&(n == \at(n, Pre))&&(i == \at(i, Pre))&&(j == 0)&&(k == \at(k, Pre))&&(y == \at(y, Pre))&&(x == \at(x, Pre))) || ((x + y) == k))) ;
          loop invariant  (\at(x, Pre) + \at(y, Pre) == \at(k, Pre) && \at(n, Pre) > 0) ==> ((0 < \at(n, Pre)) ==> (((m == 0)&&(n == \at(n, Pre))&&(i == \at(i, Pre))&&(j == 0)&&(k == \at(k, Pre))&&(y == \at(y, Pre))&&(x == \at(x, Pre))) || ((x + y) == k))) ;
          loop invariant  (\at(x, Pre) + \at(y, Pre) == \at(k, Pre) && \at(n, Pre) > 0) ==> ((0 < \at(n, Pre)) ==> (((m == 0)&&(n == \at(n, Pre))&&(i == \at(i, Pre))&&(j == 0)&&(k == \at(k, Pre))&&(y == \at(y, Pre))&&(x == \at(x, Pre))) || (0 <= j && j <= n))) ;
          loop invariant  (\at(x, Pre) + \at(y, Pre) == \at(k, Pre) && \at(n, Pre) > 0) ==> ((0 < \at(n, Pre)) ==> (((m == 0)&&(n == \at(n, Pre))&&(i == \at(i, Pre))&&(j == 0)&&(k == \at(k, Pre))&&(y == \at(y, Pre))&&(x == \at(x, Pre))) || ((0 <= m && m < n)))) ;
          loop invariant (\at(x, Pre) + \at(y, Pre) == \at(k, Pre) && \at(n, Pre) > 0) ==> ((!(0 < \at(n, Pre))) ==> ((m == 0)&&(n == \at(n, Pre))&&(i == \at(i, Pre))&&(j == 0)&&(k == \at(k, Pre))&&(y == \at(y, Pre))&&(x == \at(x, Pre))));
          loop invariant (\at(x, Pre) + \at(y, Pre) == \at(k, Pre) && \at(n, Pre) > 0) ==> (n == \at(n, Pre));
          loop invariant (\at(x, Pre) + \at(y, Pre) == \at(k, Pre) && \at(n, Pre) > 0) ==> (i == \at(i, Pre));
          loop invariant (\at(x, Pre) + \at(y, Pre) == \at(k, Pre) && \at(n, Pre) > 0) ==> (k == \at(k, Pre));
            */
            while (j < n) {
    if (j == i) {
      x++;
      y--;
    } else {
      y++;
      x--;
    }
    if (unknown()){
       m = j;
    }
    j++;
  }
            
  /*@ assert (x + y) == k; */
  
  /*@ assert(n > 0) ==> (0 <= m && m < n);*/
  

}


int unknown();

/*@
requires (x + y) == k;
requires n > 0;
*/
void foo(int x, int y, int k, int j, int i, int n) {
 
  int m = 0;
  j = 0;
  
            
            /*@
          loop invariant  (\at(x, Pre) + \at(y, Pre) == \at(k, Pre) && \at(n, Pre) > 0) ==> ((0 < \at(n, Pre)) ==> (((m == 0)&&(n == \at(n, Pre))&&(i == \at(i, Pre))&&(j == 0)&&(k == \at(k, Pre))&&(y == \at(y, Pre))&&(x == \at(x, Pre))) || ((x + y) == k))) ;
          loop invariant  (\at(x, Pre) + \at(y, Pre) == \at(k, Pre) && \at(n, Pre) > 0) ==> ((0 < \at(n, Pre)) ==> (((m == 0)&&(n == \at(n, Pre))&&(i == \at(i, Pre))&&(j == 0)&&(k == \at(k, Pre))&&(y == \at(y, Pre))&&(x == \at(x, Pre))) || ((x + y) == k))) ;
          loop invariant  (\at(x, Pre) + \at(y, Pre) == \at(k, Pre) && \at(n, Pre) > 0) ==> ((0 < \at(n, Pre)) ==> (((m == 0)&&(n == \at(n, Pre))&&(i == \at(i, Pre))&&(j == 0)&&(k == \at(k, Pre))&&(y == \at(y, Pre))&&(x == \at(x, Pre))) || (0 <= j && j <= n))) ;
          loop invariant  (\at(x, Pre) + \at(y, Pre) == \at(k, Pre) && \at(n, Pre) > 0) ==> ((0 < \at(n, Pre)) ==> (((m == 0)&&(n == \at(n, Pre))&&(i == \at(i, Pre))&&(j == 0)&&(k == \at(k, Pre))&&(y == \at(y, Pre))&&(x == \at(x, Pre))) || ((0 <= m && m < n)))) ;
          loop invariant (\at(x, Pre) + \at(y, Pre) == \at(k, Pre) && \at(n, Pre) > 0) ==> ((!(0 < \at(n, Pre))) ==> ((m == 0)&&(n == \at(n, Pre))&&(i == \at(i, Pre))&&(j == 0)&&(k == \at(k, Pre))&&(y == \at(y, Pre))&&(x == \at(x, Pre))));
          loop invariant (\at(x, Pre) + \at(y, Pre) == \at(k, Pre) && \at(n, Pre) > 0) ==> (n == \at(n, Pre));
          loop invariant (\at(x, Pre) + \at(y, Pre) == \at(k, Pre) && \at(n, Pre) > 0) ==> (i == \at(i, Pre));
          loop invariant (\at(x, Pre) + \at(y, Pre) == \at(k, Pre) && \at(n, Pre) > 0) ==> (k == \at(k, Pre));
            */
            while (j < n) {
    if (j == i) {
      x++;
      y--;
    } else {
      y++;
      x--;
    }
    if (unknown()){
       m = j;
    }
    j++;
  }
            
  /*@ assert (x + y) == k; */
  
  /*@ assert(n > 0) ==> (0 <= m && m < n);*/
  

}

syntax Correct
Validate:
[True, True, True, True, True, True, True, True]

Verify:
[True, True]

CORRECT INVARIANT
syntax Correct
Validate:
[True, True, True, True, True, True, True, True]

Verify:
[True, True]

syntax Correct
Validate:
[True, True, True, True, True, True, True, True]

Verify:
[True, True]

已移动文件: 020.c -> finish1
-----------------------------------------

文件 020.c 处理完成. 总耗时: 53.85135579109192
-----------------------------------------
finshed_files:['030.c', '028.c', '02.c', '035.c', '026.c', '021.c', '03.c', '024.c', '011.c', '016.c', '04.c', '09.c', '015.c', '032.c', '025.c', '01.c', '018.c', '06.c', '031.c', '046.c', '038.c', '029.c', '017.c', '042.c', '040.c', '039.c', '020.c']
