file:039.c
TRY TIME: 0
[(592, 811, 0)]
[(592, 811, 0)]
[(592, 811, 0)]
[(592, 811, 0)]
Loop 0 : Outer
Sorted indices: [0]
File found: ../sac_c_parser/test/../ip_postcond/goal/039_goal.v. Deleting the file.
File found: ../sac_c_parser/test/../ip_postcond/goal/039_proof_auto.v. Deleting the file.
File found: ../sac_c_parser/test/../ip_postcond/goal/039_proof_manual.v. Deleting the file.
LoopEntry_0:
MAXPATHLEN@pre <= 0 && (glob3_dc == 0) * (glob3_pattern_off == 0) * (glob3_pathlim_off == 0 + (MAXPATHLEN@pre + 1) - 1) * (glob3_pathend_off == 0) * (glob3_pathbuf_off == 0) * (bound_off == 0 + (MAXPATHLEN@pre + 1) - 1) * (pattern_off == 0) * (buf_off == 0) * (__BLAST_NONDET == __BLAST_NONDET@pre) * (MAXPATHLEN == MAXPATHLEN@pre)

[(0, 'MAXPATHLEN@pre <= 0 && (glob3_dc == 0) * (glob3_pattern_off == 0) * (glob3_pathlim_off == 0 + (MAXPATHLEN@pre + 1) - 1) * (glob3_pathend_off == 0) * (glob3_pathbuf_off == 0) * (bound_off == 0 + (MAXPATHLEN@pre + 1) - 1) * (pattern_off == 0) * (buf_off == 0) * (__BLAST_NONDET == __BLAST_NONDET@pre) * (MAXPATHLEN == MAXPATHLEN@pre)')]
Successfully generated loop/039.json
INNER_FLAG: False
Variable Maps: [{'glob3_dc': '0', 'glob3_pattern_off': '0', 'glob3_pathlim_off': '0 + (MAXPATHLEN@pre + 1) - 1', 'glob3_pathend_off': '0', 'glob3_pathbuf_off': '0', 'bound_off': '0 + (MAXPATHLEN@pre + 1) - 1', 'pattern_off': '0', 'buf_off': '0', '__BLAST_NONDET': '__BLAST_NONDET@pre', 'MAXPATHLEN': 'MAXPATHLEN@pre'}]
Path conditions: ['MAXPATHLEN@pre <= 0']
Pre condition: MAXPATHLEN@pre <= 0 && (glob3_dc == 0) * (glob3_pattern_off == 0) * (glob3_pathlim_off == 0 + (MAXPATHLEN@pre + 1) - 1) * (glob3_pathend_off == 0) * (glob3_pathbuf_off == 0) * (bound_off == 0 + (MAXPATHLEN@pre + 1) - 1) * (pattern_off == 0) * (buf_off == 0) * (__BLAST_NONDET == __BLAST_NONDET@pre) * (MAXPATHLEN == MAXPATHLEN@pre)
Loop Condition: None
Updated Loop Conditions: [None]
Global Unchanged Variables ['glob3_pattern_off', 'glob3_pathlim_off', 'glob3_pathend_off', 'glob3_pathbuf_off', 'bound_off', 'pattern_off', 'buf_off', '__BLAST_NONDET', 'MAXPATHLEN']
Non Inductive Variables []
[{'glob3_dc': '0', 'glob3_pattern_off': '0', 'glob3_pathlim_off': '0 + (MAXPATHLEN@pre + 1) - 1', 'glob3_pathend_off': '0', 'glob3_pathbuf_off': '0', 'bound_off': '0 + (MAXPATHLEN@pre + 1) - 1', 'pattern_off': '0', 'buf_off': '0', '__BLAST_NONDET': '__BLAST_NONDET@pre', 'MAXPATHLEN': 'MAXPATHLEN@pre'}]
['MAXPATHLEN@pre <= 0']

                
        /* >>> LOOP INVARIANT TO FILL <<< */
        
                /*@
          loop invariant (\at(MAXPATHLEN, Pre) <= 0) ==> (glob3_pattern_off == 0);
          loop invariant (\at(MAXPATHLEN, Pre) <= 0) ==> (glob3_pathlim_off == 0 + (\at(MAXPATHLEN, Pre) + 1) - 1);
          loop invariant (\at(MAXPATHLEN, Pre) <= 0) ==> (glob3_pathend_off == 0);
          loop invariant (\at(MAXPATHLEN, Pre) <= 0) ==> (glob3_pathbuf_off == 0);
          loop invariant (\at(MAXPATHLEN, Pre) <= 0) ==> (bound_off == 0 + (\at(MAXPATHLEN, Pre) + 1) - 1);
          loop invariant (\at(MAXPATHLEN, Pre) <= 0) ==> (pattern_off == 0);
          loop invariant (\at(MAXPATHLEN, Pre) <= 0) ==> (buf_off == 0);
          loop invariant (\at(MAXPATHLEN, Pre) <= 0) ==> (__BLAST_NONDET == \at(__BLAST_NONDET, Pre));
          loop invariant (\at(MAXPATHLEN, Pre) <= 0) ==> (MAXPATHLEN == \at(MAXPATHLEN, Pre));
                */
                for (;;){
    if (glob3_pathend_off + glob3_dc >= glob3_pathlim_off) break;
    else {
     
      glob3_dc++;
     
      /*@ assert 0 <= glob3_dc;*/
      /*@ assert glob3_dc < MAXPATHLEN + 1; */
      if (unknown()) return;
    }
}
                

                
        /* >>> LOOP INVARIANT TO FILL <<< */
        
                /*@
          loop invariant  (\at(MAXPATHLEN, Pre) <= 0) ==> (((glob3_dc == 0)&&(glob3_pattern_off == 0)&&(glob3_pathlim_off == 0 + (\at(MAXPATHLEN, Pre) + 1) - 1)&&(glob3_pathend_off == 0)&&(glob3_pathbuf_off == 0)&&(bound_off == 0 + (\at(MAXPATHLEN, Pre) + 1) - 1)&&(pattern_off == 0)&&(buf_off == 0)&&(__BLAST_NONDET == \at(__BLAST_NONDET, Pre))&&(MAXPATHLEN == \at(MAXPATHLEN, Pre))) || (PLACE_HOLDER_glob3_dc)) ;
          loop invariant (\at(MAXPATHLEN, Pre) <= 0) ==> (glob3_pattern_off == 0);
          loop invariant (\at(MAXPATHLEN, Pre) <= 0) ==> (glob3_pathlim_off == 0 + (\at(MAXPATHLEN, Pre) + 1) - 1);
          loop invariant (\at(MAXPATHLEN, Pre) <= 0) ==> (glob3_pathend_off == 0);
          loop invariant (\at(MAXPATHLEN, Pre) <= 0) ==> (glob3_pathbuf_off == 0);
          loop invariant (\at(MAXPATHLEN, Pre) <= 0) ==> (bound_off == 0 + (\at(MAXPATHLEN, Pre) + 1) - 1);
          loop invariant (\at(MAXPATHLEN, Pre) <= 0) ==> (pattern_off == 0);
          loop invariant (\at(MAXPATHLEN, Pre) <= 0) ==> (buf_off == 0);
          loop invariant (\at(MAXPATHLEN, Pre) <= 0) ==> (__BLAST_NONDET == \at(__BLAST_NONDET, Pre));
          loop invariant (\at(MAXPATHLEN, Pre) <= 0) ==> (MAXPATHLEN == \at(MAXPATHLEN, Pre));
                */
                for (;;){
    if (glob3_pathend_off + glob3_dc >= glob3_pathlim_off) break;
    else {
     
      glob3_dc++;
     
      /*@ assert 0 <= glob3_dc;*/
      /*@ assert glob3_dc < MAXPATHLEN + 1; */
      if (unknown()) return;
    }
}
                

int unknown()
/*@ Require emp 
   Ensure __return <= INT_MAX && __return > INT_MIN
*/;

/*@ requires MAXPATHLEN <= 0;*/
void foo(int MAXPATHLEN,int  __BLAST_NONDET)
{
  
  int buf_off;
  int pattern_off;
  int bound_off;

 
  int glob3_pathbuf_off;
  int glob3_pathend_off;
  int glob3_pathlim_off;
  int glob3_pattern_off;
  int glob3_dc;


  buf_off = 0;
  pattern_off = 0;

  
  bound_off = 0 + (MAXPATHLEN + 1) - 1;

  glob3_pathbuf_off = buf_off;
  glob3_pathend_off = buf_off;
  glob3_pathlim_off = bound_off;
  glob3_pattern_off = pattern_off;

  glob3_dc = 0;

  
                
        /* >>> LOOP INVARIANT TO FILL <<< */
        
                /*@
          loop invariant  (\at(MAXPATHLEN, Pre) <= 0) ==> (((glob3_dc == 0)&&(glob3_pattern_off == 0)&&(glob3_pathlim_off == 0 + (\at(MAXPATHLEN, Pre) + 1) - 1)&&(glob3_pathend_off == 0)&&(glob3_pathbuf_off == 0)&&(bound_off == 0 + (\at(MAXPATHLEN, Pre) + 1) - 1)&&(pattern_off == 0)&&(buf_off == 0)&&(__BLAST_NONDET == \at(__BLAST_NONDET, Pre))&&(MAXPATHLEN == \at(MAXPATHLEN, Pre))) || (PLACE_HOLDER_glob3_dc)) ;
          loop invariant (\at(MAXPATHLEN, Pre) <= 0) ==> (glob3_pattern_off == 0);
          loop invariant (\at(MAXPATHLEN, Pre) <= 0) ==> (glob3_pathlim_off == 0 + (\at(MAXPATHLEN, Pre) + 1) - 1);
          loop invariant (\at(MAXPATHLEN, Pre) <= 0) ==> (glob3_pathend_off == 0);
          loop invariant (\at(MAXPATHLEN, Pre) <= 0) ==> (glob3_pathbuf_off == 0);
          loop invariant (\at(MAXPATHLEN, Pre) <= 0) ==> (bound_off == 0 + (\at(MAXPATHLEN, Pre) + 1) - 1);
          loop invariant (\at(MAXPATHLEN, Pre) <= 0) ==> (pattern_off == 0);
          loop invariant (\at(MAXPATHLEN, Pre) <= 0) ==> (buf_off == 0);
          loop invariant (\at(MAXPATHLEN, Pre) <= 0) ==> (__BLAST_NONDET == \at(__BLAST_NONDET, Pre));
          loop invariant (\at(MAXPATHLEN, Pre) <= 0) ==> (MAXPATHLEN == \at(MAXPATHLEN, Pre));
                */
                for (;;){
    if (glob3_pathend_off + glob3_dc >= glob3_pathlim_off) break;
    else {
     
      glob3_dc++;
     
      /*@ assert 0 <= glob3_dc;*/
      /*@ assert glob3_dc < MAXPATHLEN + 1; */
      if (unknown()) return;
    }
}
                

}

## Analysis

### a. Purpose and Structure of the Loop:

- **Objective:** The loop increments the variable `glob3_dc` until `glob3_pathend_off + glob3_dc` is no longer less than `glob3_pathlim_off`. The purpose is to simulate the process of iterating and counting up to a certain limit defined by `glob3_pathlim_off`.
- **Structure:** 
  - **Condition:** The loop is governed by the condition `for (;;)` which means it is an infinite loop, but it contains a break condition `if (glob3_pathend_off + glob3_dc >= glob3_pathlim_off) break;`.
  - **Body:**
    - Increments `glob3_dc`.
    - Checks `if (unknown()) return;` which can potentially terminate the function.

### b. Discussion of the Loop Invariant:
- The proposed loop invariant is designed to ensure that various variables maintain their initial values throughout the execution of the loop.
- The main invariant `(\at(MAXPATHLEN, Pre) <= 0) ==> (((glob3_dc == 0)&&(glob3_pattern_off == 0)&&(glob3_pathlim_off == 0 + (\at(MAXPATHLEN, Pre) + 1) - 1)&&(glob3_pathend_off == 0)&&(glob3_pathbuf_off == 0)&&(bound_off == 0 + (\at(MAXPATHLEN, Pre) + 1) - 1)&&(pattern_off == 0)&&(buf_off == 0)&&(__BLAST_NONDET == \at(__BLAST_NONDET, Pre))&&(MAXPATHLEN == \at(MAXPATHLEN, Pre))) || (PLACE_HOLDER_glob3_dc))` ensures that the initial state is either maintained or some other condition holds.

### c. Establishment:
- At the start of the loop, `glob3_dc` is initialized to `0`, and other variables are set according to the precondition. Thus, the invariant holds before the loop begins.

### d. Preservation:
- If the invariant is true at the start of an iteration and the loop condition holds, then incrementing `glob3_dc` by 1 will not violate the invariant, as other variables remain unchanged.

### e. Termination Analysis of the Loop:
- The loop terminates when `glob3_pathend_off + glob3_dc >= glob3_pathlim_off`. At this point, the invariant still holds as `glob3_dc` has been incremented within bounds.

### f. Correctness of the Post-condition:
- Given the loop invariant and termination condition, the post-condition of the program is met when the loop exits, ensuring all variables maintain their required values.

### g. Implication of the Pre-condition:
- The pre-condition sets the initial values for all relevant variables, ensuring the invariant is established before the loop begins.

## Filled C Loop Program with Invariant Annotations

```c
int unknown()
/*@ Require emp 
   Ensure __return <= INT_MAX && __return > INT_MIN
*/;

/*@ requires MAXPATHLEN <= 0;*/
void foo(int MAXPATHLEN,int  __BLAST_NONDET)
{
  
  int buf_off;
  int pattern_off;
  int bound_off;

 
  int glob3_pathbuf_off;
  int glob3_pathend_off;
  int glob3_pathlim_off;
  int glob3_pattern_off;
  int glob3_dc;


  buf_off = 0;
  pattern_off = 0;

  
  bound_off = 0 + (MAXPATHLEN + 1) - 1;

  glob3_pathbuf_off = buf_off;
  glob3_pathend_off = buf_off;
  glob3_pathlim_off = bound_off;
  glob3_pattern_off = pattern_off;

  glob3_dc = 0;

  
                
        /* >>> LOOP INVARIANT TO FILL <<< */
        
                /*@
          loop invariant  (\at(MAXPATHLEN, Pre) <= 0) ==> (((glob3_dc == 0)&&(glob3_pattern_off == 0)&&(glob3_pathlim_off == 0 + (\at(MAXPATHLEN, Pre) + 1) - 1)&&(glob3_pathend_off == 0)&&(glob3_pathbuf_off == 0)&&(bound_off == 0 + (\at(MAXPATHLEN, Pre) + 1) - 1)&&(pattern_off == 0)&&(buf_off == 0)&&(__BLAST_NONDET == \at(__BLAST_NONDET, Pre))&&(MAXPATHLEN == \at(MAXPATHLEN, Pre))) || (glob3_dc > 0)) ;
          loop invariant (\at(MAXPATHLEN, Pre) <= 0) ==> (glob3_pattern_off == 0);
          loop invariant (\at(MAXPATHLEN, Pre) <= 0) ==> (glob3_pathlim_off == 0 + (\at(MAXPATHLEN, Pre) + 1) - 1);
          loop invariant (\at(MAXPATHLEN, Pre) <= 0) ==> (glob3_pathend_off == 0);
          loop invariant (\at(MAXPATHLEN, Pre) <= 0) ==> (glob3_pathbuf_off == 0);
          loop invariant (\at(MAXPATHLEN, Pre) <= 0) ==> (bound_off == 0 + (\at(MAXPATHLEN, Pre) + 1) - 1);
          loop invariant (\at(MAXPATHLEN, Pre) <= 0) ==> (pattern_off == 0);
          loop invariant (\at(MAXPATHLEN, Pre) <= 0) ==> (buf_off == 0);
          loop invariant (\at(MAXPATHLEN, Pre) <= 0) ==> (__BLAST_NONDET == \at(__BLAST_NONDET, Pre));
          loop invariant (\at(MAXPATHLEN, Pre) <= 0) ==> (MAXPATHLEN == \at(MAXPATHLEN, Pre));
                */
                for (;;){
    if (glob3_pathend_off + glob3_dc >= glob3_pathlim_off) break;
    else {
     
      glob3_dc++;
     
      /*@ assert 0 <= glob3_dc;*/
      /*@ assert glob3_dc < MAXPATHLEN + 1; */
      if (unknown()) return;
    }
}
                

}
```

int unknown()
/*@ Require emp 
   Ensure __return <= INT_MAX && __return > INT_MIN
*/;

/*@ requires MAXPATHLEN <= 0;*/
void foo(int MAXPATHLEN,int  __BLAST_NONDET)
{
  
  int buf_off;
  int pattern_off;
  int bound_off;

 
  int glob3_pathbuf_off;
  int glob3_pathend_off;
  int glob3_pathlim_off;
  int glob3_pattern_off;
  int glob3_dc;


  buf_off = 0;
  pattern_off = 0;

  
  bound_off = 0 + (MAXPATHLEN + 1) - 1;

  glob3_pathbuf_off = buf_off;
  glob3_pathend_off = buf_off;
  glob3_pathlim_off = bound_off;
  glob3_pattern_off = pattern_off;

  glob3_dc = 0;

  
                
                /*@
          loop invariant  (\at(MAXPATHLEN, Pre) <= 0) ==> (((glob3_dc == 0)&&(glob3_pattern_off == 0)&&(glob3_pathlim_off == 0 + (\at(MAXPATHLEN, Pre) + 1) - 1)&&(glob3_pathend_off == 0)&&(glob3_pathbuf_off == 0)&&(bound_off == 0 + (\at(MAXPATHLEN, Pre) + 1) - 1)&&(pattern_off == 0)&&(buf_off == 0)&&(__BLAST_NONDET == \at(__BLAST_NONDET, Pre))&&(MAXPATHLEN == \at(MAXPATHLEN, Pre))) || (glob3_dc > 0)) ;
          loop invariant (\at(MAXPATHLEN, Pre) <= 0) ==> (glob3_pattern_off == 0);
          loop invariant (\at(MAXPATHLEN, Pre) <= 0) ==> (glob3_pathlim_off == 0 + (\at(MAXPATHLEN, Pre) + 1) - 1);
          loop invariant (\at(MAXPATHLEN, Pre) <= 0) ==> (glob3_pathend_off == 0);
          loop invariant (\at(MAXPATHLEN, Pre) <= 0) ==> (glob3_pathbuf_off == 0);
          loop invariant (\at(MAXPATHLEN, Pre) <= 0) ==> (bound_off == 0 + (\at(MAXPATHLEN, Pre) + 1) - 1);
          loop invariant (\at(MAXPATHLEN, Pre) <= 0) ==> (pattern_off == 0);
          loop invariant (\at(MAXPATHLEN, Pre) <= 0) ==> (buf_off == 0);
          loop invariant (\at(MAXPATHLEN, Pre) <= 0) ==> (__BLAST_NONDET == \at(__BLAST_NONDET, Pre));
          loop invariant (\at(MAXPATHLEN, Pre) <= 0) ==> (MAXPATHLEN == \at(MAXPATHLEN, Pre));
                */
                for (;;){
    if (glob3_pathend_off + glob3_dc >= glob3_pathlim_off) break;
    else {
     
      glob3_dc++;
     
      /*@ assert 0 <= glob3_dc;*/
      /*@ assert glob3_dc < MAXPATHLEN + 1; */
      if (unknown()) return;
    }
}
                

}


int unknown()
/*@ Require emp 
   Ensure __return <= INT_MAX && __return > INT_MIN
*/;

/*@ requires MAXPATHLEN <= 0;*/
void foo(int MAXPATHLEN,int  __BLAST_NONDET)
{
  
  int buf_off;
  int pattern_off;
  int bound_off;

 
  int glob3_pathbuf_off;
  int glob3_pathend_off;
  int glob3_pathlim_off;
  int glob3_pattern_off;
  int glob3_dc;


  buf_off = 0;
  pattern_off = 0;

  
  bound_off = 0 + (MAXPATHLEN + 1) - 1;

  glob3_pathbuf_off = buf_off;
  glob3_pathend_off = buf_off;
  glob3_pathlim_off = bound_off;
  glob3_pattern_off = pattern_off;

  glob3_dc = 0;

  
                
                /*@
          loop invariant  (\at(MAXPATHLEN, Pre) <= 0) ==> (((glob3_dc == 0)&&(glob3_pattern_off == 0)&&(glob3_pathlim_off == 0 + (\at(MAXPATHLEN, Pre) + 1) - 1)&&(glob3_pathend_off == 0)&&(glob3_pathbuf_off == 0)&&(bound_off == 0 + (\at(MAXPATHLEN, Pre) + 1) - 1)&&(pattern_off == 0)&&(buf_off == 0)&&(__BLAST_NONDET == \at(__BLAST_NONDET, Pre))&&(MAXPATHLEN == \at(MAXPATHLEN, Pre))) || (glob3_dc > 0)) ;
          loop invariant (\at(MAXPATHLEN, Pre) <= 0) ==> (glob3_pattern_off == 0);
          loop invariant (\at(MAXPATHLEN, Pre) <= 0) ==> (glob3_pathlim_off == 0 + (\at(MAXPATHLEN, Pre) + 1) - 1);
          loop invariant (\at(MAXPATHLEN, Pre) <= 0) ==> (glob3_pathend_off == 0);
          loop invariant (\at(MAXPATHLEN, Pre) <= 0) ==> (glob3_pathbuf_off == 0);
          loop invariant (\at(MAXPATHLEN, Pre) <= 0) ==> (bound_off == 0 + (\at(MAXPATHLEN, Pre) + 1) - 1);
          loop invariant (\at(MAXPATHLEN, Pre) <= 0) ==> (pattern_off == 0);
          loop invariant (\at(MAXPATHLEN, Pre) <= 0) ==> (buf_off == 0);
          loop invariant (\at(MAXPATHLEN, Pre) <= 0) ==> (__BLAST_NONDET == \at(__BLAST_NONDET, Pre));
          loop invariant (\at(MAXPATHLEN, Pre) <= 0) ==> (MAXPATHLEN == \at(MAXPATHLEN, Pre));
                */
                for (;;){
    if (glob3_pathend_off + glob3_dc >= glob3_pathlim_off) break;
    else {
     
      glob3_dc++;
     
      /*@ assert 0 <= glob3_dc;*/
      /*@ assert glob3_dc < MAXPATHLEN + 1; */
      if (unknown()) return;
    }
}
                

}

syntax Error
[kernel] Parsing output/039.c (with preprocessing)
[kernel:annot-error] output/039.c:3: Warning: unexpected token 'emp'
[kernel] User Error: warning annot-error treated as fatal error.
[kernel] Frama-C aborted: invalid user input.

after repair

int unknown()
/*@ requires \true; 
    ensures \result <= INT_MAX && \result > INT_MIN;
*/;

/*@ requires MAXPATHLEN <= 0;*/
void foo(int MAXPATHLEN, int __BLAST_NONDET)
{

  int buf_off;
  int pattern_off;
  int bound_off;

  int glob3_pathbuf_off;
  int glob3_pathend_off;
  int glob3_pathlim_off;
  int glob3_pattern_off;
  int glob3_dc;

  buf_off = 0;
  pattern_off = 0;

  bound_off = 0 + (MAXPATHLEN + 1) - 1;

  glob3_pathbuf_off = buf_off;
  glob3_pathend_off = buf_off;
  glob3_pathlim_off = bound_off;
  glob3_pattern_off = pattern_off;

  glob3_dc = 0;

  /*@
    loop invariant (\at(MAXPATHLEN, Pre) <= 0) ==> (((glob3_dc == 0)&&(glob3_pattern_off == 0)&&(glob3_pathlim_off == 0 + (\at(MAXPATHLEN, Pre) + 1) - 1)&&(glob3_pathend_off == 0)&&(glob3_pathbuf_off == 0)&&(bound_off == 0 + (\at(MAXPATHLEN, Pre) + 1) - 1)&&(pattern_off == 0)&&(buf_off == 0)&&(__BLAST_NONDET == \at(__BLAST_NONDET, Pre))&&(MAXPATHLEN == \at(MAXPATHLEN, Pre))) || (glob3_dc > 0));
    loop invariant (\at(MAXPATHLEN, Pre) <= 0) ==> (glob3_pattern_off == 0);
    loop invariant (\at(MAXPATHLEN, Pre) <= 0) ==> (glob3_pathlim_off == 0 + (\at(MAXPATHLEN, Pre) + 1) - 1);
    loop invariant (\at(MAXPATHLEN, Pre) <= 0) ==> (glob3_pathend_off == 0);
    loop invariant (\at(MAXPATHLEN, Pre) <= 0) ==> (glob3_pathbuf_off == 0);
    loop invariant (\at(MAXPATHLEN, Pre) <= 0) ==> (bound_off == 0 + (\at(MAXPATHLEN, Pre) + 1) - 1);
    loop invariant (\at(MAXPATHLEN, Pre) <= 0) ==> (pattern_off == 0);
    loop invariant (\at(MAXPATHLEN, Pre) <= 0) ==> (buf_off == 0);
    loop invariant (\at(MAXPATHLEN, Pre) <= 0) ==> (__BLAST_NONDET == \at(__BLAST_NONDET, Pre));
    loop invariant (\at(MAXPATHLEN, Pre) <= 0) ==> (MAXPATHLEN == \at(MAXPATHLEN, Pre));
  */
  for (;;)
  {
    if (glob3_pathend_off + glob3_dc >= glob3_pathlim_off) break;
    else
    {

      glob3_dc++;

      /*@ assert 0 <= glob3_dc;*/
      /*@ assert glob3_dc < MAXPATHLEN + 1; */
      if (unknown()) return;
    }
  }
}

syntax Error
[kernel] Parsing output/039.c (with preprocessing)
[kernel] output/039.c:2: 
  syntax error:
  Location: between lines 2 and 4
  1     
  
  2     int unknown()
  3     /*@ requires \true; 
  4         ensures \result <= INT_MAX && \result > INT_MIN;
  
  5     */;
  6
[kernel] Frama-C aborted: invalid user input.

syntax Error
[kernel] Parsing output/039.c (with preprocessing)
[kernel] output/039.c:2: 
  syntax error:
  Location: between lines 2 and 4
  1     
  
  2     int unknown()
  3     /*@ requires \true; 
  4         ensures \result <= INT_MAX && \result > INT_MIN;
  
  5     */;
  6
[kernel] Frama-C aborted: invalid user input.

/*@
    loop invariant (\at(MAXPATHLEN, Pre) <= 0) ==> (((glob3_dc == 0)&&(glob3_pattern_off == 0)&&(glob3_pathlim_off == 0 + (\at(MAXPATHLEN, Pre) + 1) - 1)&&(glob3_pathend_off == 0)&&(glob3_pathbuf_off == 0)&&(bound_off == 0 + (\at(MAXPATHLEN, Pre) + 1) - 1)&&(pattern_off == 0)&&(buf_off == 0)&&(__BLAST_NONDET == \at(__BLAST_NONDET, Pre))&&(MAXPATHLEN == \at(MAXPATHLEN, Pre))) || (glob3_dc > 0));
    loop invariant (\at(MAXPATHLEN, Pre) <= 0) ==> (glob3_pattern_off == 0);
    loop invariant (\at(MAXPATHLEN, Pre) <= 0) ==> (glob3_pathlim_off == 0 + (\at(MAXPATHLEN, Pre) + 1) - 1);
    loop invariant (\at(MAXPATHLEN, Pre) <= 0) ==> (glob3_pathend_off == 0);
    loop invariant (\at(MAXPATHLEN, Pre) <= 0) ==> (glob3_pathbuf_off == 0);
    loop invariant (\at(MAXPATHLEN, Pre) <= 0) ==> (bound_off == 0 + (\at(MAXPATHLEN, Pre) + 1) - 1);
    loop invariant (\at(MAXPATHLEN, Pre) <= 0) ==> (pattern_off == 0);
    loop invariant (\at(MAXPATHLEN, Pre) <= 0) ==> (buf_off == 0);
    loop invariant (\at(MAXPATHLEN, Pre) <= 0) ==> (__BLAST_NONDET == \at(__BLAST_NONDET, Pre));
    loop invariant (\at(MAXPATHLEN, Pre) <= 0) ==> (MAXPATHLEN == \at(MAXPATHLEN, Pre));
  */
  for (;;)
  {
    if (glob3_pathend_off + glob3_dc >= glob3_pathlim_off) break;
    else
    {

      glob3_dc++;

      /*@ assert 0 <= glob3_dc;*/
      /*@ assert glob3_dc < MAXPATHLEN + 1; */
      if (unknown()) return;
    }
  }
转换后
/*@ Inv
    ((MAXPATHLEN@pre <= 0) => (((glob3_dc == 0)&&(glob3_pattern_off == 0)&&(glob3_pathlim_off == 0 + (MAXPATHLEN@pre + 1) - 1)&&(glob3_pathend_off == 0)&&(glob3_pathbuf_off == 0)&&(bound_off == 0 + (MAXPATHLEN@pre + 1) - 1)&&(pattern_off == 0)&&(buf_off == 0)&&(__BLAST_NONDET == __BLAST_NONDET@pre)&&(MAXPATHLEN == MAXPATHLEN@pre)) || (glob3_dc > 0))) &&
((MAXPATHLEN@pre <= 0) => (glob3_pattern_off == 0)) &&
((MAXPATHLEN@pre <= 0) => (glob3_pathlim_off == 0 + (MAXPATHLEN@pre + 1) - 1)) &&
((MAXPATHLEN@pre <= 0) => (glob3_pathend_off == 0)) &&
((MAXPATHLEN@pre <= 0) => (glob3_pathbuf_off == 0)) &&
((MAXPATHLEN@pre <= 0) => (bound_off == 0 + (MAXPATHLEN@pre + 1) - 1)) &&
((MAXPATHLEN@pre <= 0) => (pattern_off == 0)) &&
((MAXPATHLEN@pre <= 0) => (buf_off == 0)) &&
((MAXPATHLEN@pre <= 0) => (__BLAST_NONDET == __BLAST_NONDET@pre)) &&
((MAXPATHLEN@pre <= 0) => (MAXPATHLEN == MAXPATHLEN@pre))
    */
  for (;;)
  {
    if (glob3_pathend_off + glob3_dc >= glob3_pathlim_off) break;
    else
    {

      glob3_dc++;

      /*@ Inv
    (assert 0 <= glob3_dc)
    */
      /*@ Inv
    (assert glob3_dc < MAXPATHLEN + 1)
    */
      if (unknown()) return;
    }
  }
syntax Error
[kernel] Parsing output/039.c (with preprocessing)
[kernel] output/039.c:2: 
  syntax error:
  Location: between lines 2 and 4
  1     
  
  2     int unknown()
  3     /*@ requires \true; 
  4         ensures \result <= INT_MAX && \result > INT_MIN;
  
  5     */;
  6
[kernel] Frama-C aborted: invalid user input.

after repair

/*@ requires MAXPATHLEN <= 0; */
void foo(int MAXPATHLEN, int __BLAST_NONDET) {
    int buf_off;
    int pattern_off;
    int bound_off;

    int glob3_pathbuf_off;
    int glob3_pathend_off;
    int glob3_pathlim_off;
    int glob3_pattern_off;
    int glob3_dc;

    buf_off = 0;
    pattern_off = 0;

    bound_off = 0 + (MAXPATHLEN + 1) - 1;

    glob3_pathbuf_off = buf_off;
    glob3_pathend_off = buf_off;
    glob3_pathlim_off = bound_off;
    glob3_pattern_off = pattern_off;

    glob3_dc = 0;

    /*@
        loop invariant (\at(MAXPATHLEN, Pre) <= 0) ==> (((glob3_dc == 0) && (glob3_pattern_off == 0) && (glob3_pathlim_off == 0 + (\at(MAXPATHLEN, Pre) + 1) - 1) && (glob3_pathend_off == 0) && (glob3_pathbuf_off == 0) && (bound_off == 0 + (\at(MAXPATHLEN, Pre) + 1) - 1) && (pattern_off == 0) && (buf_off == 0) && (__BLAST_NONDET == \at(__BLAST_NONDET, Pre)) && (MAXPATHLEN == \at(MAXPATHLEN, Pre))) || (glob3_dc > 0));
        loop invariant (\at(MAXPATHLEN, Pre) <= 0) ==> (glob3_pattern_off == 0);
        loop invariant (\at(MAXPATHLEN, Pre) <= 0) ==> (glob3_pathlim_off == 0 + (\at(MAXPATHLEN, Pre) + 1) - 1);
        loop invariant (\at(MAXPATHLEN, Pre) <= 0) ==> (glob3_pathend_off == 0);
        loop invariant (\at(MAXPATHLEN, Pre) <= 0) ==> (glob3_pathbuf_off == 0);
        loop invariant (\at(MAXPATHLEN, Pre) <= 0) ==> (bound_off == 0 + (\at(MAXPATHLEN, Pre) + 1) - 1);
        loop invariant (\at(MAXPATHLEN, Pre) <= 0) ==> (pattern_off == 0);
        loop invariant (\at(MAXPATHLEN, Pre) <= 0) ==> (buf_off == 0);
        loop invariant (\at(MAXPATHLEN, Pre) <= 0) ==> (__BLAST_NONDET == \at(__BLAST_NONDET, Pre));
        loop invariant (\at(MAXPATHLEN, Pre) <= 0) ==> (MAXPATHLEN == \at(MAXPATHLEN, Pre));
    */
    for (;;) {
        if (glob3_pathend_off + glob3_dc >= glob3_pathlim_off) break;
        else {
            glob3_dc++;

            /*@ assert 0 <= glob3_dc; */
            /*@ assert glob3_dc < MAXPATHLEN + 1; */
            if (unknown()) return;
        }
    }
}

syntax Correct
Validate:
[True, True, True, True, True, True, True, True, True, True]

Verify:
[True, True]

after hudini

/*@ requires MAXPATHLEN <= 0; */
void foo(int MAXPATHLEN, int __BLAST_NONDET) {
    int buf_off;
    int pattern_off;
    int bound_off;

    int glob3_pathbuf_off;
    int glob3_pathend_off;
    int glob3_pathlim_off;
    int glob3_pattern_off;
    int glob3_dc;

    buf_off = 0;
    pattern_off = 0;

    bound_off = 0 + (MAXPATHLEN + 1) - 1;

    glob3_pathbuf_off = buf_off;
    glob3_pathend_off = buf_off;
    glob3_pathlim_off = bound_off;
    glob3_pattern_off = pattern_off;

    glob3_dc = 0;

    /*@
        loop invariant (\at(MAXPATHLEN, Pre) <= 0) ==> (((glob3_dc == 0) && (glob3_pattern_off == 0) && (glob3_pathlim_off == 0 + (\at(MAXPATHLEN, Pre) + 1) - 1) && (glob3_pathend_off == 0) && (glob3_pathbuf_off == 0) && (bound_off == 0 + (\at(MAXPATHLEN, Pre) + 1) - 1) && (pattern_off == 0) && (buf_off == 0) && (__BLAST_NONDET == \at(__BLAST_NONDET, Pre)) && (MAXPATHLEN == \at(MAXPATHLEN, Pre))) || (glob3_dc > 0));
        loop invariant (\at(MAXPATHLEN, Pre) <= 0) ==> (glob3_pattern_off == 0);
        loop invariant (\at(MAXPATHLEN, Pre) <= 0) ==> (glob3_pathlim_off == 0 + (\at(MAXPATHLEN, Pre) + 1) - 1);
        loop invariant (\at(MAXPATHLEN, Pre) <= 0) ==> (glob3_pathend_off == 0);
        loop invariant (\at(MAXPATHLEN, Pre) <= 0) ==> (glob3_pathbuf_off == 0);
        loop invariant (\at(MAXPATHLEN, Pre) <= 0) ==> (bound_off == 0 + (\at(MAXPATHLEN, Pre) + 1) - 1);
        loop invariant (\at(MAXPATHLEN, Pre) <= 0) ==> (pattern_off == 0);
        loop invariant (\at(MAXPATHLEN, Pre) <= 0) ==> (buf_off == 0);
        loop invariant (\at(MAXPATHLEN, Pre) <= 0) ==> (__BLAST_NONDET == \at(__BLAST_NONDET, Pre));
        loop invariant (\at(MAXPATHLEN, Pre) <= 0) ==> (MAXPATHLEN == \at(MAXPATHLEN, Pre));
    */
    for (;;) {
        if (glob3_pathend_off + glob3_dc >= glob3_pathlim_off) break;
        else {
            glob3_dc++;

            /*@ assert 0 <= glob3_dc; */
            /*@ assert glob3_dc < MAXPATHLEN + 1; */
            if (unknown()) return;
        }
    }
}

syntax Correct
Validate:
[True, True, True, True, True, True, True, True, True, True]

Verify:
[True, True]

/*@
        loop invariant (\at(MAXPATHLEN, Pre) <= 0) ==> (((glob3_dc == 0) && (glob3_pattern_off == 0) && (glob3_pathlim_off == 0 + (\at(MAXPATHLEN, Pre) + 1) - 1) && (glob3_pathend_off == 0) && (glob3_pathbuf_off == 0) && (bound_off == 0 + (\at(MAXPATHLEN, Pre) + 1) - 1) && (pattern_off == 0) && (buf_off == 0) && (__BLAST_NONDET == \at(__BLAST_NONDET, Pre)) && (MAXPATHLEN == \at(MAXPATHLEN, Pre))) || (glob3_dc > 0));
        loop invariant (\at(MAXPATHLEN, Pre) <= 0) ==> (glob3_pattern_off == 0);
        loop invariant (\at(MAXPATHLEN, Pre) <= 0) ==> (glob3_pathlim_off == 0 + (\at(MAXPATHLEN, Pre) + 1) - 1);
        loop invariant (\at(MAXPATHLEN, Pre) <= 0) ==> (glob3_pathend_off == 0);
        loop invariant (\at(MAXPATHLEN, Pre) <= 0) ==> (glob3_pathbuf_off == 0);
        loop invariant (\at(MAXPATHLEN, Pre) <= 0) ==> (bound_off == 0 + (\at(MAXPATHLEN, Pre) + 1) - 1);
        loop invariant (\at(MAXPATHLEN, Pre) <= 0) ==> (pattern_off == 0);
        loop invariant (\at(MAXPATHLEN, Pre) <= 0) ==> (buf_off == 0);
        loop invariant (\at(MAXPATHLEN, Pre) <= 0) ==> (__BLAST_NONDET == \at(__BLAST_NONDET, Pre));
        loop invariant (\at(MAXPATHLEN, Pre) <= 0) ==> (MAXPATHLEN == \at(MAXPATHLEN, Pre));
    */
    for (;;) {
        if (glob3_pathend_off + glob3_dc >= glob3_pathlim_off) break;
        else {
            glob3_dc++;

            /*@ assert 0 <= glob3_dc; */
            /*@ assert glob3_dc < MAXPATHLEN + 1; */
            if (unknown()) return;
        }
    }
转换后
/*@ Inv
    ((MAXPATHLEN@pre <= 0) => (((glob3_dc == 0) && (glob3_pattern_off == 0) && (glob3_pathlim_off == 0 + (MAXPATHLEN@pre + 1) - 1) && (glob3_pathend_off == 0) && (glob3_pathbuf_off == 0) && (bound_off == 0 + (MAXPATHLEN@pre + 1) - 1) && (pattern_off == 0) && (buf_off == 0) && (__BLAST_NONDET == __BLAST_NONDET@pre) && (MAXPATHLEN == MAXPATHLEN@pre)) || (glob3_dc > 0))) &&
((MAXPATHLEN@pre <= 0) => (glob3_pattern_off == 0)) &&
((MAXPATHLEN@pre <= 0) => (glob3_pathlim_off == 0 + (MAXPATHLEN@pre + 1) - 1)) &&
((MAXPATHLEN@pre <= 0) => (glob3_pathend_off == 0)) &&
((MAXPATHLEN@pre <= 0) => (glob3_pathbuf_off == 0)) &&
((MAXPATHLEN@pre <= 0) => (bound_off == 0 + (MAXPATHLEN@pre + 1) - 1)) &&
((MAXPATHLEN@pre <= 0) => (pattern_off == 0)) &&
((MAXPATHLEN@pre <= 0) => (buf_off == 0)) &&
((MAXPATHLEN@pre <= 0) => (__BLAST_NONDET == __BLAST_NONDET@pre)) &&
((MAXPATHLEN@pre <= 0) => (MAXPATHLEN == MAXPATHLEN@pre))
    */
    for (;;) {
        if (glob3_pathend_off + glob3_dc >= glob3_pathlim_off) break;
        else {
            glob3_dc++;

            /*@ Inv
    (assert 0 <= glob3_dc)
    */
            /*@ Inv
    (assert glob3_dc < MAXPATHLEN + 1)
    */
            if (unknown()) return;
        }
    }
PARTIAL CORRECT INVARIANT
继续符号执行
/*@ Inv
    ((MAXPATHLEN@pre <= 0) => (((glob3_dc == 0) && (glob3_pattern_off == 0) && (glob3_pathlim_off == 0 + (MAXPATHLEN@pre + 1) - 1) && (glob3_pathend_off == 0) && (glob3_pathbuf_off == 0) && (bound_off == 0 + (MAXPATHLEN@pre + 1) - 1) && (pattern_off == 0) && (buf_off == 0) && (__BLAST_NONDET == __BLAST_NONDET@pre) && (MAXPATHLEN == MAXPATHLEN@pre)) || (glob3_dc > 0))) &&
((MAXPATHLEN@pre <= 0) => (glob3_pattern_off == 0)) &&
((MAXPATHLEN@pre <= 0) => (glob3_pathlim_off == 0 + (MAXPATHLEN@pre + 1) - 1)) &&
((MAXPATHLEN@pre <= 0) => (glob3_pathend_off == 0)) &&
((MAXPATHLEN@pre <= 0) => (glob3_pathbuf_off == 0)) &&
((MAXPATHLEN@pre <= 0) => (bound_off == 0 + (MAXPATHLEN@pre + 1) - 1)) &&
((MAXPATHLEN@pre <= 0) => (pattern_off == 0)) &&
((MAXPATHLEN@pre <= 0) => (buf_off == 0)) &&
((MAXPATHLEN@pre <= 0) => (__BLAST_NONDET == __BLAST_NONDET@pre)) &&
((MAXPATHLEN@pre <= 0) => (MAXPATHLEN == MAXPATHLEN@pre))
    */
    for (;;) {
        if (glob3_pathend_off + glob3_dc >= glob3_pathlim_off) break;
        else {
            glob3_dc++;

            /*@ Inv
    (assert 0 <= glob3_dc)
    */
            /*@ Inv
    (assert glob3_dc < MAXPATHLEN + 1)
    */
            if (unknown()) return;
        }
    }
File found: ../sac_c_parser/test/../ip_postcond/goal/039_goal.v. Deleting the file.
File found: ../sac_c_parser/test/../ip_postcond/goal/039_proof_auto.v. Deleting the file.
File found: ../sac_c_parser/test/../ip_postcond/goal/039_proof_manual.v. Deleting the file.
LoopEntry_0:
MAXPATHLEN@pre <= 0 && (glob3_dc == 0) * (glob3_pattern_off == 0) * (glob3_pathlim_off == 0 + (MAXPATHLEN@pre + 1) - 1) * (glob3_pathend_off == 0) * (glob3_pathbuf_off == 0) * (bound_off == 0 + (MAXPATHLEN@pre + 1) - 1) * (pattern_off == 0) * (buf_off == 0) * (__BLAST_NONDET == __BLAST_NONDET@pre) * (MAXPATHLEN == MAXPATHLEN@pre)

[(0, 'MAXPATHLEN@pre <= 0 && (glob3_dc == 0) * (glob3_pattern_off == 0) * (glob3_pathlim_off == 0 + (MAXPATHLEN@pre + 1) - 1) * (glob3_pathend_off == 0) * (glob3_pathbuf_off == 0) * (bound_off == 0 + (MAXPATHLEN@pre + 1) - 1) * (pattern_off == 0) * (buf_off == 0) * (__BLAST_NONDET == __BLAST_NONDET@pre) * (MAXPATHLEN == MAXPATHLEN@pre)')]
Successfully generated loop/039.json
syntax Correct
Validate:
[True, True, True, True, True, True, True, True, True, True]

Verify:
[True, True]

CORRECT INVARIANT
syntax Correct
Validate:
[True, True, True, True, True, True, True, True, True, True]

Verify:
[True, True]

已移动文件: 039.c -> finish
-----------------------------------------

文件 039.c 处理完成. 总耗时: 92.61061596870422
错误的文件名:
  - 032.c
  - 06.c
  - 031.c
  - 017.c
  - 042.c
========================================
错误的文件名:
  - 032.c
  - 06.c
  - 031.c
  - 017.c
  - 042.c
========================================
错误的文件名:
  - 032.c
  - 06.c
  - 031.c
  - 017.c
  - 042.c
========================================
-----------------------------------------
finshed_files:['032.c', '06.c', '031.c', '017.c', '042.c', '039.c']
