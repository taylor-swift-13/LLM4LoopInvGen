file:4.c
TRY TIME: 0
[(93, 177, 0)]
[(93, 177, 0)]
[(93, 177, 0)]
[(93, 177, 0)]
Loop 0 : Outer
Sorted indices: [0]
File not found: ../sac_c_parser/test/../ip_postcond/goal/4_goal.v. No file to delete.
File not found: ../sac_c_parser/test/../ip_postcond/goal/4_proof_auto.v. No file to delete.
File not found: ../sac_c_parser/test/../ip_postcond/goal/4_proof_manual.v. No file to delete.
LoopEntry_0:
(x == 0) * (z == z@pre) * (y == y@pre)

Successfully generated loop/4.json
INNER_FLAG: False
Variable Maps: [{'x': '0', 'z': 'z@pre', 'y': 'y@pre'}]
Path conditions: [None]
Pre condition: (x == 0) * (z == z@pre) * (y == y@pre)
Loop Condition: x < 500
Updated Loop Conditions: ['0 < 500']
Global Unchanged Variables ['z']
Non Inductive Variables ['y']
[{'x': '0', 'z': 'z@pre', 'y': 'y@pre'}]
[None]

                
        /* >>> LOOP INVARIANT TO FILL <<< */
        
                /*@
          loop invariant z == \at(z, Pre);
                */
                while(x < 500) {
   x += 1;
   if( z <= y) {
      y = z;
   }
}
                

                
        /* >>> LOOP INVARIANT TO FILL <<< */
        
                /*@
          loop invariant  ((x == 0)&&(z == \at(z, Pre))&&(y == \at(y, Pre))) || (PLACE_HOLDER_y) ;
          loop invariant  ((x == 0)&&(z == \at(z, Pre))&&(y == \at(y, Pre))) || (PLACE_HOLDER_x) ;
          loop invariant z == \at(z, Pre);
                */
                while(x < 500) {
   x += 1;
   if( z <= y) {
      y = z;
   }
}
                
void foo(int y,int z)
{
    int x = 0;   

    
    

                
        /* >>> LOOP INVARIANT TO FILL <<< */
        
                /*@
          loop invariant  ((x == 0)&&(z == \at(z, Pre))&&(y == \at(y, Pre))) || (PLACE_HOLDER_y) ;
          loop invariant  ((x == 0)&&(z == \at(z, Pre))&&(y == \at(y, Pre))) || (PLACE_HOLDER_x) ;
          loop invariant z == \at(z, Pre);
                */
                while(x < 500) {
   x += 1;
   if( z <= y) {
      y = z;
   }
}
                


   
    /*@ assert z >= y; */
}
To analyze the given C program and fill in the placeholders for the loop invariants, we first need to understand the structure and goal of the loop.

### a. Purpose and Structure of the Loop

- **Objective:** The loop iterates with the goal of ensuring that by its end, the variable `z` is greater than or equal to `y`.
- **Structure:** The loop starts with the initialization of `x` to 0 and continues to iterate while `x` is less than 500. In each iteration, `x` is incremented by 1. Within the loop's body, if `z` is less than or equal to `y`, `y` is set to be equal to `z`.
- **Relevant Variables:** The loop primarily manipulates `x` and `y`, while `z` remains constant throughout the loop.

### b. Discussion of the Loop Invariant

The loop invariant must capture the relationship between `x`, `y`, and `z` during each iteration, ensuring that the condition `z >= y` is true when the loop terminates.

### c. Establishment

The invariant needs to be true before the loop starts. Initially, `x` is 0, and `z` and `y` are at their pre-condition values. The equality constraints in the invariant are established by these initial values.

### d. Preservation

During each iteration, if `z <= y`, then `y` is set to `z`, preserving the invariant that `z >= y`. If `z > y`, `y` remains unchanged, and the invariant still holds.

### e. Termination Analysis of the Loop

Upon termination, `x` will be 500, and the loop condition `x < 500` becomes false. The invariant ensures that `z >= y` holds at this point.

### f. Correctness of the Post-condition

Once the loop terminates, the invariant, combined with the termination condition (`x >= 500`), guarantees the post-condition `z >= y`.

### g. Implication of the Pre-condition

The pre-condition ensures that initially `x` is 0, and `z` and `y` are at their precondition values, establishing the invariant before the loop begins.

### Annotated C Loop Program

```c
void foo(int y,int z)
{
    int x = 0;   

                
        /* >>> LOOP INVARIANT TO FILL <<< */
        
                /*@
          loop invariant  ((x == 0)&&(z == \at(z, Pre))&&(y == \at(y, Pre))) || (y >= z) ;
          loop invariant  ((x == 0)&&(z == \at(z, Pre))&&(y == \at(y, Pre))) || (x <= 500) ;
          loop invariant z == \at(z, Pre);
                */
                while(x < 500) {
   x += 1;
   if( z <= y) {
      y = z;
   }
}
                


   
    /*@ assert z >= y; */
}
```

In this completed program, the placeholders within the loop invariants have been filled with logical expressions that help verify the intended behavior of the loop, ensuring that `z >= y` is a valid assertion after the loop execution.

void foo(int y,int z)
{
    int x = 0;   

                
                /*@
          loop invariant  ((x == 0)&&(z == \at(z, Pre))&&(y == \at(y, Pre))) || (y >= z) ;
          loop invariant  ((x == 0)&&(z == \at(z, Pre))&&(y == \at(y, Pre))) || (x <= 500) ;
          loop invariant z == \at(z, Pre);
                */
                while(x < 500) {
   x += 1;
   if( z <= y) {
      y = z;
   }
}
                


   
    /*@ assert z >= y; */
}


void foo(int y,int z)
{
    int x = 0;   

                
                /*@
          loop invariant  ((x == 0)&&(z == \at(z, Pre))&&(y == \at(y, Pre))) || (y >= z) ;
          loop invariant  ((x == 0)&&(z == \at(z, Pre))&&(y == \at(y, Pre))) || (x <= 500) ;
          loop invariant z == \at(z, Pre);
                */
                while(x < 500) {
   x += 1;
   if( z <= y) {
      y = z;
   }
}
                


   
    /*@ assert z >= y; */
}

/*@
          loop invariant  ((x == 0)&&(z == \at(z, Pre))&&(y == \at(y, Pre))) || (y >= z) ;
          loop invariant  ((x == 0)&&(z == \at(z, Pre))&&(y == \at(y, Pre))) || (x <= 500) ;
          loop invariant z == \at(z, Pre);
                */
                while(x < 500) {
   x += 1;
   if( z <= y) {
      y = z;
   }
}
转换后
/*@ Inv
    (((x == 0)&&(z == z@pre)&&(y == y@pre)) || (y >= z) ) &&
(((x == 0)&&(z == z@pre)&&(y == y@pre)) || (x <= 500) ) &&
(z == z@pre)
    */
    
                while(x < 500) {
   x += 1;
   if( z <= y) {
      y = z;
   }
}
File found: ../sac_c_parser/test/../ip_postcond/goal/4_goal.v. Deleting the file.
File found: ../sac_c_parser/test/../ip_postcond/goal/4_proof_auto.v. Deleting the file.
File found: ../sac_c_parser/test/../ip_postcond/goal/4_proof_manual.v. Deleting the file.
LoopEntry_0:
(x == 0) * (z == z@pre) * (y == y@pre)

Successfully generated loop/4.json
syntax Correct
Validate:
[False, True, True]

Goal Preservation of Invariant (file output/4.c, line 8)
Error found in file: output/4.c at line: 8
Error line content: loop invariant  ((x == 0)&&(z == \at(z, Pre))&&(y == \at(y, Pre))) || (y >= z) ;

Verify:
[False]

Goal Assertion (file output/4.c, line 22)
Error found in file: output/4.c at line: 22
Error line content: /*@ assert z >= y; */

syntax Correct
Validate:
[False, True, True]

Goal Preservation of Invariant (file output/4.c, line 8)
Error found in file: output/4.c at line: 8
Error line content: loop invariant  ((x == 0)&&(z == \at(z, Pre))&&(y == \at(y, Pre))) || (y >= z) ;

Verify:
[False]

Goal Assertion (file output/4.c, line 22)
Error found in file: output/4.c at line: 22
Error line content: /*@ assert z >= y; */

RESULT PASS_1
1
0
0
RESULT PASS_3
1
0
0
TRY TIME: 1
[(93, 177, 0)]
[(93, 177, 0)]
[(93, 177, 0)]
[(93, 177, 0)]
Loop 0 : Outer
Sorted indices: [0]
File found: ../sac_c_parser/test/../ip_postcond/goal/4_goal.v. Deleting the file.
File found: ../sac_c_parser/test/../ip_postcond/goal/4_proof_auto.v. Deleting the file.
File found: ../sac_c_parser/test/../ip_postcond/goal/4_proof_manual.v. Deleting the file.
LoopEntry_0:
(x == 0) * (z == z@pre) * (y == y@pre)

Successfully generated loop/4.json
INNER_FLAG: False
Variable Maps: [{'x': '0', 'z': 'z@pre', 'y': 'y@pre'}]
Path conditions: [None]
Pre condition: (x == 0) * (z == z@pre) * (y == y@pre)
Loop Condition: x < 500
Updated Loop Conditions: ['0 < 500']
Global Unchanged Variables ['z']
Non Inductive Variables ['y']
[{'x': '0', 'z': 'z@pre', 'y': 'y@pre'}]
[None]

                
        /* >>> LOOP INVARIANT TO FILL <<< */
        
                /*@
          loop invariant z == \at(z, Pre);
                */
                while(x < 500) {
   x += 1;
   if( z <= y) {
      y = z;
   }
}
                

                
        /* >>> LOOP INVARIANT TO FILL <<< */
        
                /*@
          loop invariant  ((x == 0)&&(z == \at(z, Pre))&&(y == \at(y, Pre))) || (PLACE_HOLDER_y) ;
          loop invariant  ((x == 0)&&(z == \at(z, Pre))&&(y == \at(y, Pre))) || (PLACE_HOLDER_x) ;
          loop invariant z == \at(z, Pre);
                */
                while(x < 500) {
   x += 1;
   if( z <= y) {
      y = z;
   }
}
                
void foo(int y,int z)
{
    int x = 0;   

    
    

                
        /* >>> LOOP INVARIANT TO FILL <<< */
        
                /*@
          loop invariant  ((x == 0)&&(z == \at(z, Pre))&&(y == \at(y, Pre))) || (PLACE_HOLDER_y) ;
          loop invariant  ((x == 0)&&(z == \at(z, Pre))&&(y == \at(y, Pre))) || (PLACE_HOLDER_x) ;
          loop invariant z == \at(z, Pre);
                */
                while(x < 500) {
   x += 1;
   if( z <= y) {
      y = z;
   }
}
                


   
    /*@ assert z >= y; */
}
Certainly! Let's analyze the given C loop program and fill in the necessary loop invariants. Here's the analysis followed by the completed program with the filled-in placeholders.

### Analysis

#### a. Purpose and Structure of the Loop
- **Objective:** The loop aims to increment the variable `x` from `0` to `500`. Additionally, it updates `y` to the value of `z` if `z` is less than or equal to `y`.
- **Structure:**
  - **Loop Condition:** The loop continues executing as long as `x < 500`.
  - **Body Operations:**
    - Increment `x` by `1`.
    - If `z <= y`, update `y` to `z`.
  - **Relevant Variables:** `x`, `y`, `z`.

#### b. Discussion of the Loop Invariant
- The loop invariants need to capture the relationship between `x`, `y`, and `z` throughout the loop execution.
- **Proposed Loop Invariants:**
  - `(x == 0) && (z == \at(z, Pre)) && (y == \at(y, Pre)) || (y >= z)`
  - `(x == 0) && (z == \at(z, Pre)) && (y == \at(y, Pre)) || (x <= 500)`
  - `z == \at(z, Pre)`

#### c. Establishment
- Before the loop starts, `x` is `0`, and `z` and `y` retain their initial values. Therefore, the invariants are trivially true initially due to the pre-condition.

#### d. Preservation
- If the invariants hold at the start of an iteration:
  - `z` remains unchanged, satisfying `z == \at(z, Pre)`.
  - `x` is incremented by `1`, and as long as `x < 500`, `x <= 500` holds.
  - If `z <= y`, then `y` is updated to `z`, ensuring `y >= z` remains true.

#### e. Termination Analysis of the Loop
- When the loop terminates, `x` equals `500`, satisfying the conditions `x <= 500` and `y >= z`.
- The invariant `z == \at(z, Pre)` holds throughout since `z` is never modified.

#### f. Correctness of the Post-condition
- The post-condition `z >= y` is satisfied since the invariant `y >= z` holds at the loop's end, implying `z >= y`.

#### g. Implication of the Pre-condition
- The pre-condition `(x == 0) * (z == \at(z, Pre)) * (y == \at(y, Pre))` ensures the invariants are established before the loop starts.

### Completed C Loop Program

```c
void foo(int y, int z) {
    int x = 0;

    /* >>> LOOP INVARIANT TO FILL <<< */
    /*@
      loop invariant  ((x == 0)&&(z == \at(z, Pre))&&(y == \at(y, Pre))) || (y >= z);
      loop invariant  ((x == 0)&&(z == \at(z, Pre))&&(y == \at(y, Pre))) || (x <= 500);
      loop invariant z == \at(z, Pre);
    */
    while(x < 500) {
        x += 1;
        if(z <= y) {
            y = z;
        }
    }

    /*@ assert z >= y; */
}
```

This fills in the placeholders in the given loop invariants, ensuring that the assertions and post-conditions are satisfied according to the analysis.

void foo(int y, int z) {
    int x = 0;

    /* >>> LOOP INVARIANT TO FILL <<< */
    /*@
      loop invariant  ((x == 0)&&(z == \at(z, Pre))&&(y == \at(y, Pre))) || (y >= z);
      loop invariant  ((x == 0)&&(z == \at(z, Pre))&&(y == \at(y, Pre))) || (x <= 500);
      loop invariant z == \at(z, Pre);
    */
    while(x < 500) {
        x += 1;
        if(z <= y) {
            y = z;
        }
    }

    /*@ assert z >= y; */
}


void foo(int y, int z) {
    int x = 0;

    /* >>> LOOP INVARIANT TO FILL <<< */
    /*@
      loop invariant  ((x == 0)&&(z == \at(z, Pre))&&(y == \at(y, Pre))) || (y >= z);
      loop invariant  ((x == 0)&&(z == \at(z, Pre))&&(y == \at(y, Pre))) || (x <= 500);
      loop invariant z == \at(z, Pre);
    */
    while(x < 500) {
        x += 1;
        if(z <= y) {
            y = z;
        }
    }

    /*@ assert z >= y; */
}

/*@
      loop invariant  ((x == 0)&&(z == \at(z, Pre))&&(y == \at(y, Pre))) || (y >= z);
      loop invariant  ((x == 0)&&(z == \at(z, Pre))&&(y == \at(y, Pre))) || (x <= 500);
      loop invariant z == \at(z, Pre);
    */
    while(x < 500) {
        x += 1;
        if(z <= y) {
            y = z;
        }
    }
转换后
/*@ Inv
    (((x == 0)&&(z == z@pre)&&(y == y@pre)) || (y >= z)) &&
(((x == 0)&&(z == z@pre)&&(y == y@pre)) || (x <= 500)) &&
(z == z@pre)
    */
    
    while(x < 500) {
        x += 1;
        if(z <= y) {
            y = z;
        }
    }
File found: ../sac_c_parser/test/../ip_postcond/goal/4_goal.v. Deleting the file.
File found: ../sac_c_parser/test/../ip_postcond/goal/4_proof_auto.v. Deleting the file.
File found: ../sac_c_parser/test/../ip_postcond/goal/4_proof_manual.v. Deleting the file.
LoopEntry_0:
(x == 0) * (z == z@pre) * (y == y@pre)

Successfully generated loop/4.json
syntax Correct
Validate:
[False, True, True]

Goal Preservation of Invariant (file output/4.c, line 7)
Error found in file: output/4.c at line: 7
Error line content: loop invariant  ((x == 0)&&(z == \at(z, Pre))&&(y == \at(y, Pre))) || (y >= z);

Verify:
[False]

Goal Assertion (file output/4.c, line 18)
Error found in file: output/4.c at line: 18
Error line content: /*@ assert z >= y; */

syntax Correct
Validate:
[False, True, True]

Goal Preservation of Invariant (file output/4.c, line 7)
Error found in file: output/4.c at line: 7
Error line content: loop invariant  ((x == 0)&&(z == \at(z, Pre))&&(y == \at(y, Pre))) || (y >= z);

Verify:
[False]

Goal Assertion (file output/4.c, line 18)
Error found in file: output/4.c at line: 18
Error line content: /*@ assert z >= y; */

RESULT PASS_1
0
0
0
RESULT PASS_3
0
0
0
TRY TIME: 2
[(93, 177, 0)]
[(93, 177, 0)]
[(93, 177, 0)]
[(93, 177, 0)]
Loop 0 : Outer
Sorted indices: [0]
File found: ../sac_c_parser/test/../ip_postcond/goal/4_goal.v. Deleting the file.
File found: ../sac_c_parser/test/../ip_postcond/goal/4_proof_auto.v. Deleting the file.
File found: ../sac_c_parser/test/../ip_postcond/goal/4_proof_manual.v. Deleting the file.
LoopEntry_0:
(x == 0) * (z == z@pre) * (y == y@pre)

Successfully generated loop/4.json
INNER_FLAG: False
Variable Maps: [{'x': '0', 'z': 'z@pre', 'y': 'y@pre'}]
Path conditions: [None]
Pre condition: (x == 0) * (z == z@pre) * (y == y@pre)
Loop Condition: x < 500
Updated Loop Conditions: ['0 < 500']
Global Unchanged Variables ['z']
Non Inductive Variables ['y']
[{'x': '0', 'z': 'z@pre', 'y': 'y@pre'}]
[None]

                
        /* >>> LOOP INVARIANT TO FILL <<< */
        
                /*@
          loop invariant z == \at(z, Pre);
                */
                while(x < 500) {
   x += 1;
   if( z <= y) {
      y = z;
   }
}
                

                
        /* >>> LOOP INVARIANT TO FILL <<< */
        
                /*@
          loop invariant  ((x == 0)&&(z == \at(z, Pre))&&(y == \at(y, Pre))) || (PLACE_HOLDER_y) ;
          loop invariant  ((x == 0)&&(z == \at(z, Pre))&&(y == \at(y, Pre))) || (PLACE_HOLDER_x) ;
          loop invariant z == \at(z, Pre);
                */
                while(x < 500) {
   x += 1;
   if( z <= y) {
      y = z;
   }
}
                
void foo(int y,int z)
{
    int x = 0;   

    
    

                
        /* >>> LOOP INVARIANT TO FILL <<< */
        
                /*@
          loop invariant  ((x == 0)&&(z == \at(z, Pre))&&(y == \at(y, Pre))) || (PLACE_HOLDER_y) ;
          loop invariant  ((x == 0)&&(z == \at(z, Pre))&&(y == \at(y, Pre))) || (PLACE_HOLDER_x) ;
          loop invariant z == \at(z, Pre);
                */
                while(x < 500) {
   x += 1;
   if( z <= y) {
      y = z;
   }
}
                


   
    /*@ assert z >= y; */
}
To analyze the given C program and fill in the placeholders for loop invariants, let's start by understanding the loop and its purpose.

### a. Purpose and Structure of the Loop:

**Objective:**  
The loop iterates while the variable `x` is less than 500, incrementing `x` by 1 in each iteration. The loop also checks if `z` is less than or equal to `y`, and if so, assigns `z` to `y`.

**Structure:**  
- **Loop Condition:** The loop continues as long as `x < 500`.
- **Operations:** 
  - Increment `x` by 1 on each iteration.
  - If `z <= y`, set `y = z`.
- **Relevant Variables:** 
  - `x`: Initialized to 0 and incremented until 500.
  - `y`: Potentially updated during the loop.
  - `z`: Not modified, remains constant throughout.

### b. Discussion of the Loop Invariant:

The invariant must capture the relationship between `x`, `y`, and `z` that holds throughout the loop's execution. It should also help prove the post-condition: `z >= y`.

### c. Establishment:

Initially, `x == 0`, `z == \at(z, Pre)`, and `y == \at(y, Pre)`, which satisfies the pre-condition and should establish the invariant before the loop begins.

### d. Preservation:

If the invariant holds at the beginning of an iteration and `x < 500`, then:
- Incrementing `x` by 1 preserves the invariant on `x`.
- If `z <= y`, setting `y = z` ensures `z >= y` continues to hold, as `z` is constant.

### e. Termination Analysis of the Loop:

When the loop terminates, `x` will be 500, and the invariant ensures `z >= y` holds because `y` can only be reduced to `z` when `z <= y`.

### f. Correctness of the Post-condition:

The invariant `z >= y` at loop termination ensures the post-condition `z >= y` is met.

### g. Implication of the Pre-condition:

The pre-condition implies the initial invariant by setting `x = 0`, `z = \at(z, Pre)`, and `y = \at(y, Pre)`.

Now, we fill in the placeholders in the loop invariants:

```c
void foo(int y,int z)
{
    int x = 0;   

                
        /* >>> LOOP INVARIANT TO FILL <<< */
        
                /*@
          loop invariant  ((x == 0)&&(z == \at(z, Pre))&&(y == \at(y, Pre))) || (y == z) ;
          loop invariant  ((x == 0)&&(z == \at(z, Pre))&&(y == \at(y, Pre))) || (x <= 500 && z >= y) ;
          loop invariant z == \at(z, Pre);
                */
                while(x < 500) {
   x += 1;
   if( z <= y) {
      y = z;
   }
}
                


   
    /*@ assert z >= y; */
}
```

void foo(int y,int z)
{
    int x = 0;   

                
                /*@
          loop invariant  ((x == 0)&&(z == \at(z, Pre))&&(y == \at(y, Pre))) || (y == z) ;
          loop invariant  ((x == 0)&&(z == \at(z, Pre))&&(y == \at(y, Pre))) || (x <= 500 && z >= y) ;
          loop invariant z == \at(z, Pre);
                */
                while(x < 500) {
   x += 1;
   if( z <= y) {
      y = z;
   }
}
                


   
    /*@ assert z >= y; */
}


void foo(int y,int z)
{
    int x = 0;   

                
                /*@
          loop invariant  ((x == 0)&&(z == \at(z, Pre))&&(y == \at(y, Pre))) || (y == z) ;
          loop invariant  ((x == 0)&&(z == \at(z, Pre))&&(y == \at(y, Pre))) || (x <= 500 && z >= y) ;
          loop invariant z == \at(z, Pre);
                */
                while(x < 500) {
   x += 1;
   if( z <= y) {
      y = z;
   }
}
                


   
    /*@ assert z >= y; */
}

/*@
          loop invariant  ((x == 0)&&(z == \at(z, Pre))&&(y == \at(y, Pre))) || (y == z) ;
          loop invariant  ((x == 0)&&(z == \at(z, Pre))&&(y == \at(y, Pre))) || (x <= 500 && z >= y) ;
          loop invariant z == \at(z, Pre);
                */
                while(x < 500) {
   x += 1;
   if( z <= y) {
      y = z;
   }
}
转换后
/*@ Inv
    (((x == 0)&&(z == z@pre)&&(y == y@pre)) || (y == z) ) &&
(((x == 0)&&(z == z@pre)&&(y == y@pre)) || (x <= 500 && z >= y) ) &&
(z == z@pre)
    */
    
                while(x < 500) {
   x += 1;
   if( z <= y) {
      y = z;
   }
}
File found: ../sac_c_parser/test/../ip_postcond/goal/4_goal.v. Deleting the file.
File found: ../sac_c_parser/test/../ip_postcond/goal/4_proof_auto.v. Deleting the file.
File found: ../sac_c_parser/test/../ip_postcond/goal/4_proof_manual.v. Deleting the file.
LoopEntry_0:
(x == 0) * (z == z@pre) * (y == y@pre)

Successfully generated loop/4.json
syntax Correct
Validate:
[False, True, True]

Goal Preservation of Invariant (file output/4.c, line 8)
Error found in file: output/4.c at line: 8
Error line content: loop invariant  ((x == 0)&&(z == \at(z, Pre))&&(y == \at(y, Pre))) || (y == z) ;

Verify:
[True]

syntax Correct
Validate:
[False, True, True]

Goal Preservation of Invariant (file output/4.c, line 8)
Error found in file: output/4.c at line: 8
Error line content: loop invariant  ((x == 0)&&(z == \at(z, Pre))&&(y == \at(y, Pre))) || (y == z) ;

Verify:
[True]

RESULT PASS_1
0
0
0
RESULT PASS_3
0
0
0
已移动文件: 4.c -> finish
-----------------------------------------

文件 4.c 处理完成. 总耗时: 120.5324637889862
错误的文件名:
  - 9.c
  - 65.c
  - 11.c
  - 70.c
  - 94.c
  - 17.c
  - 40.c
  - 88.c
  - 4.c
========================================
错误的文件名:
  - 9.c
  - 65.c
  - 70.c
  - 94.c
  - 88.c
  - 4.c
========================================
-----------------------------------------
finshed_files:['9.c', '65.c', '11.c', '70.c', '94.c', '33.c', '17.c', '105.c', '101.c', '40.c', '88.c', '4.c']
