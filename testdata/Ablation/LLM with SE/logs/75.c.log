file:75.c
TRY TIME: 0
[(145, 231, 0)]
[(145, 231, 0)]
[(145, 231, 0)]
[(145, 231, 0)]
Loop 0 : Outer
Sorted indices: [0]
File not found: ../sac_c_parser/test/../ip_postcond/goal/75_goal.v. No file to delete.
File not found: ../sac_c_parser/test/../ip_postcond/goal/75_proof_auto.v. No file to delete.
File not found: ../sac_c_parser/test/../ip_postcond/goal/75_proof_manual.v. No file to delete.
LoopEntry_0:
0 <= y@pre && y@pre <= 127 && (z == 36 * y@pre) * (c == 0) * (x3 == x3@pre) * (x2 == x2@pre) * (x1 == x1@pre) * (y == y@pre)

Successfully generated loop/75.json
INNER_FLAG: False
Variable Maps: [{'z': '36 * y@pre', 'c': '0', 'x3': 'x3@pre', 'x2': 'x2@pre', 'x1': 'x1@pre', 'y': 'y@pre'}]
Path conditions: ['0 <= y@pre && y@pre <= 127']
Pre condition: 0 <= y@pre && y@pre <= 127 && (z == 36 * y@pre) * (c == 0) * (x3 == x3@pre) * (x2 == x2@pre) * (x1 == x1@pre) * (y == y@pre)
Loop Condition: unknown()
Updated Loop Conditions: ['unknown()']
Global Unchanged Variables ['x3', 'x2', 'x1', 'y']
Non Inductive Variables []
[{'z': '36 * y@pre', 'c': '0', 'x3': 'x3@pre', 'x2': 'x2@pre', 'x1': 'x1@pre', 'y': 'y@pre'}]
['0 <= y@pre && y@pre <= 127']

                
        /* >>> LOOP INVARIANT TO FILL <<< */
        
                /*@
          loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (x3 == \at(x3, Pre));
          loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (x2 == \at(x2, Pre));
          loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (x1 == \at(x1, Pre));
          loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (y == \at(y, Pre));
                */
                while (unknown()) {

    if ( c < 36 )
    {
    z  = z + 1;
    c  = c + 1;
    }
  }
                

                
        /* >>> LOOP INVARIANT TO FILL <<< */
        
                /*@
          loop invariant  (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (((z == 36 * \at(y, Pre))&&(c == 0)&&(x3 == \at(x3, Pre))&&(x2 == \at(x2, Pre))&&(x1 == \at(x1, Pre))&&(y == \at(y, Pre))) || (PLACE_HOLDER_c)) ;
          loop invariant  (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (((z == 36 * \at(y, Pre))&&(c == 0)&&(x3 == \at(x3, Pre))&&(x2 == \at(x2, Pre))&&(x1 == \at(x1, Pre))&&(y == \at(y, Pre))) || (PLACE_HOLDER_z)) ;
          loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (x3 == \at(x3, Pre));
          loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (x2 == \at(x2, Pre));
          loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (x1 == \at(x1, Pre));
          loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (y == \at(y, Pre));
                */
                while (unknown()) {

    if ( c < 36 )
    {
    z  = z + 1;
    c  = c + 1;
    }
  }
                
int unknown();
/*@ requires 0 <= y && y <= 127; */
void foo(int y,int x1,int x2,int x3) {
  int c = 0;
  int z = 36 * y;
  

  
                
        /* >>> LOOP INVARIANT TO FILL <<< */
        
                /*@
          loop invariant  (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (((z == 36 * \at(y, Pre))&&(c == 0)&&(x3 == \at(x3, Pre))&&(x2 == \at(x2, Pre))&&(x1 == \at(x1, Pre))&&(y == \at(y, Pre))) || (PLACE_HOLDER_c)) ;
          loop invariant  (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (((z == 36 * \at(y, Pre))&&(c == 0)&&(x3 == \at(x3, Pre))&&(x2 == \at(x2, Pre))&&(x1 == \at(x1, Pre))&&(y == \at(y, Pre))) || (PLACE_HOLDER_z)) ;
          loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (x3 == \at(x3, Pre));
          loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (x2 == \at(x2, Pre));
          loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (x1 == \at(x1, Pre));
          loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (y == \at(y, Pre));
                */
                while (unknown()) {

    if ( c < 36 )
    {
    z  = z + 1;
    c  = c + 1;
    }
  }
                
    /*@ assert  ( c < 36 ) ==> ( z >= 0 ) ; */
      
  
}
To analyze the given C program and fill in the placeholders for the loop invariants, let's break down the task step-by-step:

### a. Purpose and Structure of the Loop:
- **Objective:** The loop aims to increment the values of `c` and `z` as long as `c` is less than 36. The loop condition is governed by the unknown function `unknown()` which can return any non-negative integer. The intended outcome is to establish certain properties of `z` and `c` at the end of the loop.
- **Structure:** 
  - **Loop Condition:** The loop continues while the function `unknown()` provides a positive condition.
  - **Operations:** Inside the loop, `z` and `c` are both incremented by 1 if `c < 36`.
  - **Relevant Variables:** `z`, `c`, `x1`, `x2`, `x3`, `y`.

### b. Discussion of the Loop Invariant:
Loop invariants are conditions that remain true throughout the execution of the loop. In this program, we need to ensure that properties of variables `z`, `c`, `x1`, `x2`, `x3`, and `y` are preserved or transformed appropriately during each iteration.

### c. Establishment:
The invariants are initially true due to the pre-condition. Before the loop begins, the pre-condition ensures that the initial values of variables satisfy the loop invariants.

### d. Preservation:
Given the operations within the loop, if the invariants are true at the start of an iteration, they remain true after the iteration ends. Specifically, the increment operations preserve the relationship between `z` and `c`.

### e. Termination Analysis of the Loop:
When the loop terminates, `c` must be at least 36 for the loop condition to stop executing. The invariants should still hold, indicating that `z` has been incremented appropriately.

### f. Correctness of the Post-condition:
The post-condition asserts that if `c < 36`, then `z >= 0`. This is ensured by the loop invariants, which maintain the relationship between `z` and `c`.

### g. Implication of the Pre-condition:
The pre-condition implies the loop invariants because it establishes the initial values of the variables, which are maintained or incremented appropriately through the loop iterations.

Now, let's fill in the placeholders in the ACSL annotations for the loop invariant:

```c
int unknown();
/*@ requires 0 <= y && y <= 127; */
void foo(int y,int x1,int x2,int x3) {
  int c = 0;
  int z = 36 * y;
  
                
        /* >>> LOOP INVARIANT TO FILL <<< */
        
                /*@
          loop invariant  (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (((z == 36 * \at(y, Pre))&&(c == 0)&&(x3 == \at(x3, Pre))&&(x2 == \at(x2, Pre))&&(x1 == \at(x1, Pre))&&(y == \at(y, Pre))) || (z == 36 * \at(y, Pre) + c)) ;
          loop invariant  (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (((z == 36 * \at(y, Pre))&&(c == 0)&&(x3 == \at(x3, Pre))&&(x2 == \at(x2, Pre))&&(x1 == \at(x1, Pre))&&(y == \at(y, Pre))) || (c <= 36)) ;
          loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (x3 == \at(x3, Pre));
          loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (x2 == \at(x2, Pre));
          loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (x1 == \at(x1, Pre));
          loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (y == \at(y, Pre));
                */
                while (unknown()) {

    if ( c < 36 )
    {
    z  = z + 1;
    c  = c + 1;
    }
  }
                
    /*@ assert  ( c < 36 ) ==> ( z >= 0 ) ; */
      
  
}
```

These invariants correctly capture the behavior of the loop and ensure the post-condition is met.

int unknown();
/*@ requires 0 <= y && y <= 127; */
void foo(int y,int x1,int x2,int x3) {
  int c = 0;
  int z = 36 * y;
  
                
                /*@
          loop invariant  (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (((z == 36 * \at(y, Pre))&&(c == 0)&&(x3 == \at(x3, Pre))&&(x2 == \at(x2, Pre))&&(x1 == \at(x1, Pre))&&(y == \at(y, Pre))) || (z == 36 * \at(y, Pre) + c)) ;
          loop invariant  (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (((z == 36 * \at(y, Pre))&&(c == 0)&&(x3 == \at(x3, Pre))&&(x2 == \at(x2, Pre))&&(x1 == \at(x1, Pre))&&(y == \at(y, Pre))) || (c <= 36)) ;
          loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (x3 == \at(x3, Pre));
          loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (x2 == \at(x2, Pre));
          loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (x1 == \at(x1, Pre));
          loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (y == \at(y, Pre));
                */
                while (unknown()) {

    if ( c < 36 )
    {
    z  = z + 1;
    c  = c + 1;
    }
  }
                
    /*@ assert  ( c < 36 ) ==> ( z >= 0 ) ; */
      
  
}


int unknown();
/*@ requires 0 <= y && y <= 127; */
void foo(int y,int x1,int x2,int x3) {
  int c = 0;
  int z = 36 * y;
  
                
                /*@
          loop invariant  (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (((z == 36 * \at(y, Pre))&&(c == 0)&&(x3 == \at(x3, Pre))&&(x2 == \at(x2, Pre))&&(x1 == \at(x1, Pre))&&(y == \at(y, Pre))) || (z == 36 * \at(y, Pre) + c)) ;
          loop invariant  (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (((z == 36 * \at(y, Pre))&&(c == 0)&&(x3 == \at(x3, Pre))&&(x2 == \at(x2, Pre))&&(x1 == \at(x1, Pre))&&(y == \at(y, Pre))) || (c <= 36)) ;
          loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (x3 == \at(x3, Pre));
          loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (x2 == \at(x2, Pre));
          loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (x1 == \at(x1, Pre));
          loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (y == \at(y, Pre));
                */
                while (unknown()) {

    if ( c < 36 )
    {
    z  = z + 1;
    c  = c + 1;
    }
  }
                
    /*@ assert  ( c < 36 ) ==> ( z >= 0 ) ; */
      
  
}

/*@
          loop invariant  (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (((z == 36 * \at(y, Pre))&&(c == 0)&&(x3 == \at(x3, Pre))&&(x2 == \at(x2, Pre))&&(x1 == \at(x1, Pre))&&(y == \at(y, Pre))) || (z == 36 * \at(y, Pre) + c)) ;
          loop invariant  (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (((z == 36 * \at(y, Pre))&&(c == 0)&&(x3 == \at(x3, Pre))&&(x2 == \at(x2, Pre))&&(x1 == \at(x1, Pre))&&(y == \at(y, Pre))) || (c <= 36)) ;
          loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (x3 == \at(x3, Pre));
          loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (x2 == \at(x2, Pre));
          loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (x1 == \at(x1, Pre));
          loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (y == \at(y, Pre));
                */
                while (unknown()) {

    if ( c < 36 )
    {
    z  = z + 1;
    c  = c + 1;
    }
  }
转换后
/*@ Inv
    ((0 <= y@pre && y@pre <= 127) => (((z == 36 * y@pre)&&(c == 0)&&(x3 == x3@pre)&&(x2 == x2@pre)&&(x1 == x1@pre)&&(y == y@pre)) || (z == 36 * y@pre + c)) ) &&
((0 <= y@pre && y@pre <= 127) => (((z == 36 * y@pre)&&(c == 0)&&(x3 == x3@pre)&&(x2 == x2@pre)&&(x1 == x1@pre)&&(y == y@pre)) || (c <= 36)) ) &&
((0 <= y@pre && y@pre <= 127) => (x3 == x3@pre)) &&
((0 <= y@pre && y@pre <= 127) => (x2 == x2@pre)) &&
((0 <= y@pre && y@pre <= 127) => (x1 == x1@pre)) &&
((0 <= y@pre && y@pre <= 127) => (y == y@pre))
    */
    
                while (unknown()) {

    if ( c < 36 )
    {
    z  = z + 1;
    c  = c + 1;
    }
  }
File found: ../sac_c_parser/test/../ip_postcond/goal/75_goal.v. Deleting the file.
File found: ../sac_c_parser/test/../ip_postcond/goal/75_proof_auto.v. Deleting the file.
File found: ../sac_c_parser/test/../ip_postcond/goal/75_proof_manual.v. Deleting the file.
LoopEntry_0:
0 <= y@pre && y@pre <= 127 && (z == 36 * y@pre) * (c == 0) * (x3 == x3@pre) * (x2 == x2@pre) * (x1 == x1@pre) * (y == y@pre)

Successfully generated loop/75.json
syntax Correct
Validate:
[True, True, True, True, True, True]

Verify:
[False]

Goal Assertion (file output/75.c, line 26)
Error found in file: output/75.c at line: 26
Error line content: /*@ assert  ( c < 36 ) ==> ( z >= 0 ) ; */

syntax Correct
Validate:
[True, True, True, True, True, True]

Verify:
[False]

Goal Assertion (file output/75.c, line 26)
Error found in file: output/75.c at line: 26
Error line content: /*@ assert  ( c < 36 ) ==> ( z >= 0 ) ; */

RESULT PASS_1
1
1
0
RESULT PASS_3
1
1
0
TRY TIME: 1
[(145, 231, 0)]
[(145, 231, 0)]
[(145, 231, 0)]
[(145, 231, 0)]
Loop 0 : Outer
Sorted indices: [0]
File found: ../sac_c_parser/test/../ip_postcond/goal/75_goal.v. Deleting the file.
File found: ../sac_c_parser/test/../ip_postcond/goal/75_proof_auto.v. Deleting the file.
File found: ../sac_c_parser/test/../ip_postcond/goal/75_proof_manual.v. Deleting the file.
LoopEntry_0:
0 <= y@pre && y@pre <= 127 && (z == 36 * y@pre) * (c == 0) * (x3 == x3@pre) * (x2 == x2@pre) * (x1 == x1@pre) * (y == y@pre)

Successfully generated loop/75.json
INNER_FLAG: False
Variable Maps: [{'z': '36 * y@pre', 'c': '0', 'x3': 'x3@pre', 'x2': 'x2@pre', 'x1': 'x1@pre', 'y': 'y@pre'}]
Path conditions: ['0 <= y@pre && y@pre <= 127']
Pre condition: 0 <= y@pre && y@pre <= 127 && (z == 36 * y@pre) * (c == 0) * (x3 == x3@pre) * (x2 == x2@pre) * (x1 == x1@pre) * (y == y@pre)
Loop Condition: unknown()
Updated Loop Conditions: ['unknown()']
Global Unchanged Variables ['x3', 'x2', 'x1', 'y']
Non Inductive Variables []
[{'z': '36 * y@pre', 'c': '0', 'x3': 'x3@pre', 'x2': 'x2@pre', 'x1': 'x1@pre', 'y': 'y@pre'}]
['0 <= y@pre && y@pre <= 127']

                
        /* >>> LOOP INVARIANT TO FILL <<< */
        
                /*@
          loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (x3 == \at(x3, Pre));
          loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (x2 == \at(x2, Pre));
          loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (x1 == \at(x1, Pre));
          loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (y == \at(y, Pre));
                */
                while (unknown()) {

    if ( c < 36 )
    {
    z  = z + 1;
    c  = c + 1;
    }
  }
                

                
        /* >>> LOOP INVARIANT TO FILL <<< */
        
                /*@
          loop invariant  (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (((z == 36 * \at(y, Pre))&&(c == 0)&&(x3 == \at(x3, Pre))&&(x2 == \at(x2, Pre))&&(x1 == \at(x1, Pre))&&(y == \at(y, Pre))) || (PLACE_HOLDER_c)) ;
          loop invariant  (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (((z == 36 * \at(y, Pre))&&(c == 0)&&(x3 == \at(x3, Pre))&&(x2 == \at(x2, Pre))&&(x1 == \at(x1, Pre))&&(y == \at(y, Pre))) || (PLACE_HOLDER_z)) ;
          loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (x3 == \at(x3, Pre));
          loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (x2 == \at(x2, Pre));
          loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (x1 == \at(x1, Pre));
          loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (y == \at(y, Pre));
                */
                while (unknown()) {

    if ( c < 36 )
    {
    z  = z + 1;
    c  = c + 1;
    }
  }
                
int unknown();
/*@ requires 0 <= y && y <= 127; */
void foo(int y,int x1,int x2,int x3) {
  int c = 0;
  int z = 36 * y;
  

  
                
        /* >>> LOOP INVARIANT TO FILL <<< */
        
                /*@
          loop invariant  (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (((z == 36 * \at(y, Pre))&&(c == 0)&&(x3 == \at(x3, Pre))&&(x2 == \at(x2, Pre))&&(x1 == \at(x1, Pre))&&(y == \at(y, Pre))) || (PLACE_HOLDER_c)) ;
          loop invariant  (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (((z == 36 * \at(y, Pre))&&(c == 0)&&(x3 == \at(x3, Pre))&&(x2 == \at(x2, Pre))&&(x1 == \at(x1, Pre))&&(y == \at(y, Pre))) || (PLACE_HOLDER_z)) ;
          loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (x3 == \at(x3, Pre));
          loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (x2 == \at(x2, Pre));
          loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (x1 == \at(x1, Pre));
          loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (y == \at(y, Pre));
                */
                while (unknown()) {

    if ( c < 36 )
    {
    z  = z + 1;
    c  = c + 1;
    }
  }
                
    /*@ assert  ( c < 36 ) ==> ( z >= 0 ) ; */
      
  
}
To solve this problem, we'll analyze the given loop and fill in the placeholders with appropriate loop invariants. Let's go through each step in detail:

### Analysis

#### a. Purpose and Structure of the Loop
- **Objective**: The loop increments variables `z` and `c` while `c < 36`. The loop continues execution based on an unknown condition (`unknown()`), which means it could iterate a non-negative number of times without a deterministic bound.
- **Structure**: 
  - **Condition**: The loop executes while `unknown()` is true. Within the loop, there is an additional conditional check `if (c < 36)`, which affects the execution of the loop body.
  - **Operations**: Within the loop body, if `c < 36`, both `z` and `c` are incremented by 1.
  - **Variables**: The relevant variables are `z` and `c`, which are updated within the loop, and `x1`, `x2`, `x3`, and `y`, which remain unchanged during the loop.

#### b. Discussion of the Loop Invariant
- The proposed loop invariant ensures that the relationship between `z` and `c` is maintained throughout the loop iterations. Specifically, when the loop starts, `z` is initialized to `36*y` and `c` to `0`. As the loop progresses and `c` is incremented, `z` is also incremented, maintaining the relation `z == 36*y + c`.

#### c. Establishment
- Initially, `c` is 0 and `z` is `36*y`, so the invariant `z == 36*y + c` holds true before the loop begins.

#### d. Preservation
- If the invariant holds true at the start of a loop iteration, then after executing the loop body (where both `z` and `c` are incremented by 1), the invariant `z == 36*y + c` remains true.

#### e. Termination Analysis of the Loop
- Upon termination of the loop (when `unknown()` is false), the invariant still holds, and `c` remains less than 36. This implies that `z` was incremented `c` times from its initial value `36*y`, satisfying the invariant `z == 36*y + c`.

#### f. Correctness of the Post-condition
- The post-condition `(c < 36) ==> (z >= 0)` is ensured because `z` is always greater than or equal to its starting value `36*y`, and since `y >= 0`, `z` is always non-negative.

#### g. Implication of the Pre-condition
- The pre-condition `0 <= y && y <= 127` implies that `z` starts at `36*y`, which is non-negative, and the invariant `z == 36*y + c` is established with `c` starting at 0.

### Filled Loop Invariant

```c
int unknown();
/*@ requires 0 <= y && y <= 127; */
void foo(int y, int x1, int x2, int x3) {
  int c = 0;
  int z = 36 * y;
  
  /* >>> LOOP INVARIANT TO FILL <<< */
  /*@
    loop invariant  (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (((z == 36 * \at(y, Pre))&&(c == 0)&&(x3 == \at(x3, Pre))&&(x2 == \at(x2, Pre))&&(x1 == \at(x1, Pre))&&(y == \at(y, Pre))) || (z == 36 * \at(y, Pre) + c)) ;
    loop invariant  (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (((z == 36 * \at(y, Pre))&&(c == 0)&&(x3 == \at(x3, Pre))&&(x2 == \at(x2, Pre))&&(x1 == \at(x1, Pre))&&(y == \at(y, Pre))) || (c <= 36)) ;
    loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (x3 == \at(x3, Pre));
    loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (x2 == \at(x2, Pre));
    loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (x1 == \at(x1, Pre));
    loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (y == \at(y, Pre));
  */
  while (unknown()) {
    if (c < 36) {
      z = z + 1;
      c = c + 1;
    }
  }
  
  /*@ assert  ( c < 36 ) ==> ( z >= 0 ) ; */
}
```

int unknown();
/*@ requires 0 <= y && y <= 127; */
void foo(int y, int x1, int x2, int x3) {
  int c = 0;
  int z = 36 * y;
  
  /* >>> LOOP INVARIANT TO FILL <<< */
  /*@
    loop invariant  (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (((z == 36 * \at(y, Pre))&&(c == 0)&&(x3 == \at(x3, Pre))&&(x2 == \at(x2, Pre))&&(x1 == \at(x1, Pre))&&(y == \at(y, Pre))) || (z == 36 * \at(y, Pre) + c)) ;
    loop invariant  (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (((z == 36 * \at(y, Pre))&&(c == 0)&&(x3 == \at(x3, Pre))&&(x2 == \at(x2, Pre))&&(x1 == \at(x1, Pre))&&(y == \at(y, Pre))) || (c <= 36)) ;
    loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (x3 == \at(x3, Pre));
    loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (x2 == \at(x2, Pre));
    loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (x1 == \at(x1, Pre));
    loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (y == \at(y, Pre));
  */
  while (unknown()) {
    if (c < 36) {
      z = z + 1;
      c = c + 1;
    }
  }
  
  /*@ assert  ( c < 36 ) ==> ( z >= 0 ) ; */
}


int unknown();
/*@ requires 0 <= y && y <= 127; */
void foo(int y, int x1, int x2, int x3) {
  int c = 0;
  int z = 36 * y;
  
  /* >>> LOOP INVARIANT TO FILL <<< */
  /*@
    loop invariant  (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (((z == 36 * \at(y, Pre))&&(c == 0)&&(x3 == \at(x3, Pre))&&(x2 == \at(x2, Pre))&&(x1 == \at(x1, Pre))&&(y == \at(y, Pre))) || (z == 36 * \at(y, Pre) + c)) ;
    loop invariant  (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (((z == 36 * \at(y, Pre))&&(c == 0)&&(x3 == \at(x3, Pre))&&(x2 == \at(x2, Pre))&&(x1 == \at(x1, Pre))&&(y == \at(y, Pre))) || (c <= 36)) ;
    loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (x3 == \at(x3, Pre));
    loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (x2 == \at(x2, Pre));
    loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (x1 == \at(x1, Pre));
    loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (y == \at(y, Pre));
  */
  while (unknown()) {
    if (c < 36) {
      z = z + 1;
      c = c + 1;
    }
  }
  
  /*@ assert  ( c < 36 ) ==> ( z >= 0 ) ; */
}

/*@
    loop invariant  (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (((z == 36 * \at(y, Pre))&&(c == 0)&&(x3 == \at(x3, Pre))&&(x2 == \at(x2, Pre))&&(x1 == \at(x1, Pre))&&(y == \at(y, Pre))) || (z == 36 * \at(y, Pre) + c)) ;
    loop invariant  (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (((z == 36 * \at(y, Pre))&&(c == 0)&&(x3 == \at(x3, Pre))&&(x2 == \at(x2, Pre))&&(x1 == \at(x1, Pre))&&(y == \at(y, Pre))) || (c <= 36)) ;
    loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (x3 == \at(x3, Pre));
    loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (x2 == \at(x2, Pre));
    loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (x1 == \at(x1, Pre));
    loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (y == \at(y, Pre));
  */
  while (unknown()) {
    if (c < 36) {
      z = z + 1;
      c = c + 1;
    }
  }
转换后
/*@ Inv
    ((0 <= y@pre && y@pre <= 127) => (((z == 36 * y@pre)&&(c == 0)&&(x3 == x3@pre)&&(x2 == x2@pre)&&(x1 == x1@pre)&&(y == y@pre)) || (z == 36 * y@pre + c)) ) &&
((0 <= y@pre && y@pre <= 127) => (((z == 36 * y@pre)&&(c == 0)&&(x3 == x3@pre)&&(x2 == x2@pre)&&(x1 == x1@pre)&&(y == y@pre)) || (c <= 36)) ) &&
((0 <= y@pre && y@pre <= 127) => (x3 == x3@pre)) &&
((0 <= y@pre && y@pre <= 127) => (x2 == x2@pre)) &&
((0 <= y@pre && y@pre <= 127) => (x1 == x1@pre)) &&
((0 <= y@pre && y@pre <= 127) => (y == y@pre))
    */
    
  while (unknown()) {
    if (c < 36) {
      z = z + 1;
      c = c + 1;
    }
  }
File found: ../sac_c_parser/test/../ip_postcond/goal/75_goal.v. Deleting the file.
File found: ../sac_c_parser/test/../ip_postcond/goal/75_proof_auto.v. Deleting the file.
File found: ../sac_c_parser/test/../ip_postcond/goal/75_proof_manual.v. Deleting the file.
LoopEntry_0:
0 <= y@pre && y@pre <= 127 && (z == 36 * y@pre) * (c == 0) * (x3 == x3@pre) * (x2 == x2@pre) * (x1 == x1@pre) * (y == y@pre)

Successfully generated loop/75.json
syntax Correct
Validate:
[True, True, True, True, True, True]

Verify:
[False]

Goal Assertion (file output/75.c, line 24)
Error found in file: output/75.c at line: 24
Error line content: /*@ assert  ( c < 36 ) ==> ( z >= 0 ) ; */

syntax Correct
Validate:
[True, True, True, True, True, True]

Verify:
[False]

Goal Assertion (file output/75.c, line 24)
Error found in file: output/75.c at line: 24
Error line content: /*@ assert  ( c < 36 ) ==> ( z >= 0 ) ; */

RESULT PASS_1
0
0
0
RESULT PASS_3
0
0
0
TRY TIME: 2
[(145, 231, 0)]
[(145, 231, 0)]
[(145, 231, 0)]
[(145, 231, 0)]
Loop 0 : Outer
Sorted indices: [0]
File found: ../sac_c_parser/test/../ip_postcond/goal/75_goal.v. Deleting the file.
File found: ../sac_c_parser/test/../ip_postcond/goal/75_proof_auto.v. Deleting the file.
File found: ../sac_c_parser/test/../ip_postcond/goal/75_proof_manual.v. Deleting the file.
LoopEntry_0:
0 <= y@pre && y@pre <= 127 && (z == 36 * y@pre) * (c == 0) * (x3 == x3@pre) * (x2 == x2@pre) * (x1 == x1@pre) * (y == y@pre)

Successfully generated loop/75.json
INNER_FLAG: False
Variable Maps: [{'z': '36 * y@pre', 'c': '0', 'x3': 'x3@pre', 'x2': 'x2@pre', 'x1': 'x1@pre', 'y': 'y@pre'}]
Path conditions: ['0 <= y@pre && y@pre <= 127']
Pre condition: 0 <= y@pre && y@pre <= 127 && (z == 36 * y@pre) * (c == 0) * (x3 == x3@pre) * (x2 == x2@pre) * (x1 == x1@pre) * (y == y@pre)
Loop Condition: unknown()
Updated Loop Conditions: ['unknown()']
Global Unchanged Variables ['x3', 'x2', 'x1', 'y']
Non Inductive Variables []
[{'z': '36 * y@pre', 'c': '0', 'x3': 'x3@pre', 'x2': 'x2@pre', 'x1': 'x1@pre', 'y': 'y@pre'}]
['0 <= y@pre && y@pre <= 127']

                
        /* >>> LOOP INVARIANT TO FILL <<< */
        
                /*@
          loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (x3 == \at(x3, Pre));
          loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (x2 == \at(x2, Pre));
          loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (x1 == \at(x1, Pre));
          loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (y == \at(y, Pre));
                */
                while (unknown()) {

    if ( c < 36 )
    {
    z  = z + 1;
    c  = c + 1;
    }
  }
                

                
        /* >>> LOOP INVARIANT TO FILL <<< */
        
                /*@
          loop invariant  (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (((z == 36 * \at(y, Pre))&&(c == 0)&&(x3 == \at(x3, Pre))&&(x2 == \at(x2, Pre))&&(x1 == \at(x1, Pre))&&(y == \at(y, Pre))) || (PLACE_HOLDER_c)) ;
          loop invariant  (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (((z == 36 * \at(y, Pre))&&(c == 0)&&(x3 == \at(x3, Pre))&&(x2 == \at(x2, Pre))&&(x1 == \at(x1, Pre))&&(y == \at(y, Pre))) || (PLACE_HOLDER_z)) ;
          loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (x3 == \at(x3, Pre));
          loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (x2 == \at(x2, Pre));
          loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (x1 == \at(x1, Pre));
          loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (y == \at(y, Pre));
                */
                while (unknown()) {

    if ( c < 36 )
    {
    z  = z + 1;
    c  = c + 1;
    }
  }
                
int unknown();
/*@ requires 0 <= y && y <= 127; */
void foo(int y,int x1,int x2,int x3) {
  int c = 0;
  int z = 36 * y;
  

  
                
        /* >>> LOOP INVARIANT TO FILL <<< */
        
                /*@
          loop invariant  (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (((z == 36 * \at(y, Pre))&&(c == 0)&&(x3 == \at(x3, Pre))&&(x2 == \at(x2, Pre))&&(x1 == \at(x1, Pre))&&(y == \at(y, Pre))) || (PLACE_HOLDER_c)) ;
          loop invariant  (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (((z == 36 * \at(y, Pre))&&(c == 0)&&(x3 == \at(x3, Pre))&&(x2 == \at(x2, Pre))&&(x1 == \at(x1, Pre))&&(y == \at(y, Pre))) || (PLACE_HOLDER_z)) ;
          loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (x3 == \at(x3, Pre));
          loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (x2 == \at(x2, Pre));
          loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (x1 == \at(x1, Pre));
          loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (y == \at(y, Pre));
                */
                while (unknown()) {

    if ( c < 36 )
    {
    z  = z + 1;
    c  = c + 1;
    }
  }
                
    /*@ assert  ( c < 36 ) ==> ( z >= 0 ) ; */
      
  
}
To analyze the given C program and generate appropriate loop invariants, let's break down the task according to the specified format:

### a. Purpose and Structure of the Loop:
- **Objective:** The loop performs operations on `z` and `c`. Specifically, it increments `z` and `c` while `c < 36`. The intended outcome is to adjust the values of `z` and `c` based on an unknown condition for a number of iterations.
- **Structure:**
  - **Loop Condition:** `while (unknown())` - The loop continues as long as the unknown condition is true.
  - **Operations:** Inside the loop, if `c < 36`, both `z` and `c` are incremented by 1.
  - **Relevant Variables:** `z` (initially set to `36 * y`), `c` (initially `0`), `y`, `x1`, `x2`, `x3`. The loop specifically modifies `z` and `c`.

### b. Discussion of the Loop Invariant:
The loop invariants should capture the relationship between `z`, `c`, and other involved variables through the loop execution. Given that `z` and `c` are modified, the invariant should maintain a valid relationship that holds true before, during, and after the loop execution.

### c. Establishment:
The invariant must be true before the loop starts. Initially, `c = 0` and `z = 36 * y` are established by the pre-condition. The placeholders in the invariant need to account for the changes when `c < 36`.

### d. Preservation:
If the invariant holds at the start of a loop iteration and `unknown()` is true, the operations inside the loop should preserve the invariant. The loop increments `z` and `c` by 1 when `c < 36`, which needs to be captured in the invariant.

### e. Termination Analysis of the Loop:
When the loop terminates, the invariant should imply the post-condition. If `c < 36` is true at the end, the post-condition `z >= 0` should hold. The invariant ensures that changes in `z` and `c` maintain the relationship needed to satisfy the post-condition.

### f. Correctness of the Post-condition:
The post-condition is `c < 36 ==> z >= 0`. The loop invariant must ensure that `z` is correctly adjusted in relation to its initial value and the changes applied due to `c` increments.

### g. Implication of the Pre-condition:
The pre-condition guarantees that `y` is within [0, 127] and initializes `z` and `c`. This is sufficient to establish the loop invariant before the loop begins execution.

### Filled Loop Invariant:
Below is the C loop program with the placeholders filled in:

```c
int unknown();
/*@ requires 0 <= y && y <= 127; */
void foo(int y,int x1,int x2,int x3) {
  int c = 0;
  int z = 36 * y;
  
        /* >>> LOOP INVARIANT TO FILL <<< */
        
                /*@
          loop invariant  (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (((z == 36 * \at(y, Pre))&&(c == 0)&&(x3 == \at(x3, Pre))&&(x2 == \at(x2, Pre))&&(x1 == \at(x1, Pre))&&(y == \at(y, Pre))) || (z == 36 * \at(y, Pre) + c));
          loop invariant  (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (((z == 36 * \at(y, Pre))&&(c == 0)&&(x3 == \at(x3, Pre))&&(x2 == \at(x2, Pre))&&(x1 == \at(x1, Pre))&&(y == \at(y, Pre))) || (c <= 36));
          loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (x3 == \at(x3, Pre));
          loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (x2 == \at(x2, Pre));
          loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (x1 == \at(x1, Pre));
          loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (y == \at(y, Pre));
                */
                while (unknown()) {

    if ( c < 36 )
    {
    z  = z + 1;
    c  = c + 1;
    }
  }
                
    /*@ assert  ( c < 36 ) ==> ( z >= 0 ) ; */
}
```

The placeholders have been filled to maintain the relationship between `z`, `c`, and the initial conditions, ensuring the post-condition is satisfied correctly.

int unknown();
/*@ requires 0 <= y && y <= 127; */
void foo(int y,int x1,int x2,int x3) {
  int c = 0;
  int z = 36 * y;
  
                /*@
          loop invariant  (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (((z == 36 * \at(y, Pre))&&(c == 0)&&(x3 == \at(x3, Pre))&&(x2 == \at(x2, Pre))&&(x1 == \at(x1, Pre))&&(y == \at(y, Pre))) || (z == 36 * \at(y, Pre) + c));
          loop invariant  (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (((z == 36 * \at(y, Pre))&&(c == 0)&&(x3 == \at(x3, Pre))&&(x2 == \at(x2, Pre))&&(x1 == \at(x1, Pre))&&(y == \at(y, Pre))) || (c <= 36));
          loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (x3 == \at(x3, Pre));
          loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (x2 == \at(x2, Pre));
          loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (x1 == \at(x1, Pre));
          loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (y == \at(y, Pre));
                */
                while (unknown()) {

    if ( c < 36 )
    {
    z  = z + 1;
    c  = c + 1;
    }
  }
                
    /*@ assert  ( c < 36 ) ==> ( z >= 0 ) ; */
}


int unknown();
/*@ requires 0 <= y && y <= 127; */
void foo(int y,int x1,int x2,int x3) {
  int c = 0;
  int z = 36 * y;
  
                /*@
          loop invariant  (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (((z == 36 * \at(y, Pre))&&(c == 0)&&(x3 == \at(x3, Pre))&&(x2 == \at(x2, Pre))&&(x1 == \at(x1, Pre))&&(y == \at(y, Pre))) || (z == 36 * \at(y, Pre) + c));
          loop invariant  (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (((z == 36 * \at(y, Pre))&&(c == 0)&&(x3 == \at(x3, Pre))&&(x2 == \at(x2, Pre))&&(x1 == \at(x1, Pre))&&(y == \at(y, Pre))) || (c <= 36));
          loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (x3 == \at(x3, Pre));
          loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (x2 == \at(x2, Pre));
          loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (x1 == \at(x1, Pre));
          loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (y == \at(y, Pre));
                */
                while (unknown()) {

    if ( c < 36 )
    {
    z  = z + 1;
    c  = c + 1;
    }
  }
                
    /*@ assert  ( c < 36 ) ==> ( z >= 0 ) ; */
}

/*@
          loop invariant  (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (((z == 36 * \at(y, Pre))&&(c == 0)&&(x3 == \at(x3, Pre))&&(x2 == \at(x2, Pre))&&(x1 == \at(x1, Pre))&&(y == \at(y, Pre))) || (z == 36 * \at(y, Pre) + c));
          loop invariant  (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (((z == 36 * \at(y, Pre))&&(c == 0)&&(x3 == \at(x3, Pre))&&(x2 == \at(x2, Pre))&&(x1 == \at(x1, Pre))&&(y == \at(y, Pre))) || (c <= 36));
          loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (x3 == \at(x3, Pre));
          loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (x2 == \at(x2, Pre));
          loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (x1 == \at(x1, Pre));
          loop invariant (0 <= \at(y, Pre) && \at(y, Pre) <= 127) ==> (y == \at(y, Pre));
                */
                while (unknown()) {

    if ( c < 36 )
    {
    z  = z + 1;
    c  = c + 1;
    }
  }
转换后
/*@ Inv
    ((0 <= y@pre && y@pre <= 127) => (((z == 36 * y@pre)&&(c == 0)&&(x3 == x3@pre)&&(x2 == x2@pre)&&(x1 == x1@pre)&&(y == y@pre)) || (z == 36 * y@pre + c))) &&
((0 <= y@pre && y@pre <= 127) => (((z == 36 * y@pre)&&(c == 0)&&(x3 == x3@pre)&&(x2 == x2@pre)&&(x1 == x1@pre)&&(y == y@pre)) || (c <= 36))) &&
((0 <= y@pre && y@pre <= 127) => (x3 == x3@pre)) &&
((0 <= y@pre && y@pre <= 127) => (x2 == x2@pre)) &&
((0 <= y@pre && y@pre <= 127) => (x1 == x1@pre)) &&
((0 <= y@pre && y@pre <= 127) => (y == y@pre))
    */
    
                while (unknown()) {

    if ( c < 36 )
    {
    z  = z + 1;
    c  = c + 1;
    }
  }
File found: ../sac_c_parser/test/../ip_postcond/goal/75_goal.v. Deleting the file.
File found: ../sac_c_parser/test/../ip_postcond/goal/75_proof_auto.v. Deleting the file.
File found: ../sac_c_parser/test/../ip_postcond/goal/75_proof_manual.v. Deleting the file.
LoopEntry_0:
0 <= y@pre && y@pre <= 127 && (z == 36 * y@pre) * (c == 0) * (x3 == x3@pre) * (x2 == x2@pre) * (x1 == x1@pre) * (y == y@pre)

Successfully generated loop/75.json
syntax Correct
Validate:
[True, True, True, True, True, True]

Verify:
[False]

Goal Assertion (file output/75.c, line 25)
Error found in file: output/75.c at line: 25
Error line content: /*@ assert  ( c < 36 ) ==> ( z >= 0 ) ; */

syntax Correct
Validate:
[True, True, True, True, True, True]

Verify:
[False]

Goal Assertion (file output/75.c, line 25)
Error found in file: output/75.c at line: 25
Error line content: /*@ assert  ( c < 36 ) ==> ( z >= 0 ) ; */

RESULT PASS_1
0
0
0
RESULT PASS_3
0
0
0
已移动文件: 75.c -> finish
-----------------------------------------

文件 75.c 处理完成. 总耗时: 138.90724277496338
错误的文件名:
  - 9.c
  - 65.c
  - 11.c
  - 70.c
  - 94.c
  - 17.c
  - 40.c
  - 88.c
  - 4.c
  - 8.c
  - 84.c
  - 83.c
  - 14.c
  - 10.c
  - 126.c
  - 124.c
  - 90.c
  - 86.c
  - 129.c
  - 85.c
  - 75.c
========================================
错误的文件名:
  - 9.c
  - 65.c
  - 70.c
  - 94.c
  - 88.c
  - 4.c
  - 8.c
  - 84.c
  - 83.c
  - 14.c
  - 10.c
  - 90.c
  - 86.c
  - 85.c
  - 75.c
========================================
-----------------------------------------
finshed_files:['9.c', '65.c', '11.c', '70.c', '94.c', '33.c', '17.c', '105.c', '101.c', '40.c', '88.c', '4.c', '8.c', '84.c', '83.c', '14.c', '119.c', '10.c', '89.c', '126.c', '96.c', '57.c', '68.c', '71.c', '124.c', '90.c', '86.c', '129.c', '85.c', '75.c']
