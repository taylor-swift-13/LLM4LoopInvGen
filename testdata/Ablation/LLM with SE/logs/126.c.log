file:126.c
TRY TIME: 0
[(132, 196, 0)]
[(132, 196, 0)]
[(132, 196, 0)]
[(132, 196, 0)]
Loop 0 : Outer
Sorted indices: [0]
File not found: ../sac_c_parser/test/../ip_postcond/goal/126_goal.v. No file to delete.
File not found: ../sac_c_parser/test/../ip_postcond/goal/126_proof_auto.v. No file to delete.
File not found: ../sac_c_parser/test/../ip_postcond/goal/126_proof_manual.v. No file to delete.
LoopEntry_0:
(j == y@pre) * (i == x@pre) * (z3 == z3@pre) * (z2 == z2@pre) * (z1 == z1@pre) * (y == y@pre) * (x == x@pre)

Successfully generated loop/126.json
INNER_FLAG: False
Variable Maps: [{'j': 'y@pre', 'i': 'x@pre', 'z3': 'z3@pre', 'z2': 'z2@pre', 'z1': 'z1@pre', 'y': 'y@pre', 'x': 'x@pre'}]
Path conditions: [None]
Pre condition: (j == y@pre) * (i == x@pre) * (z3 == z3@pre) * (z2 == z2@pre) * (z1 == z1@pre) * (y == y@pre) * (x == x@pre)
Loop Condition: x != 0
Updated Loop Conditions: ['x@pre != 0']
Global Unchanged Variables ['j', 'i', 'z3', 'z2', 'z1']
Non Inductive Variables []
[{'j': 'y@pre', 'i': 'x@pre', 'z3': 'z3@pre', 'z2': 'z2@pre', 'z1': 'z1@pre', 'y': 'y@pre', 'x': 'x@pre'}]
[None]

                
        /* >>> LOOP INVARIANT TO FILL <<< */
        
                /*@
          loop invariant j == \at(y, Pre);
          loop invariant i == \at(x, Pre);
          loop invariant z3 == \at(z3, Pre);
          loop invariant z2 == \at(z2, Pre);
          loop invariant z1 == \at(z1, Pre);
                */
                while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
                

                
        /* >>> LOOP INVARIANT TO FILL <<< */
        
                /*@
          loop invariant (\at(x, Pre) != 0) ==> (((j == \at(y, Pre))&&(i == \at(x, Pre))&&(z3 == \at(z3, Pre))&&(z2 == \at(z2, Pre))&&(z1 == \at(z1, Pre))&&(y == \at(y, Pre))&&(x == \at(x, Pre))) || (PLACE_HOLDER_x));
          loop invariant (\at(x, Pre) != 0) ==> (((j == \at(y, Pre))&&(i == \at(x, Pre))&&(z3 == \at(z3, Pre))&&(z2 == \at(z2, Pre))&&(z1 == \at(z1, Pre))&&(y == \at(y, Pre))&&(x == \at(x, Pre))) || (PLACE_HOLDER_y));
          loop invariant (!(\at(x, Pre) != 0)) ==> ((j == \at(y, Pre))&&(i == \at(x, Pre))&&(z3 == \at(z3, Pre))&&(z2 == \at(z2, Pre))&&(z1 == \at(z1, Pre))&&(y == \at(y, Pre))&&(x == \at(x, Pre)));
          loop invariant j == \at(y, Pre);
          loop invariant i == \at(x, Pre);
          loop invariant z3 == \at(z3, Pre);
          loop invariant z2 == \at(z2, Pre);
          loop invariant z1 == \at(z1, Pre);
                */
                while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
                
void foo(int x, int y,int z1,int z2,int z3) {

    int i = x;
    int j = y;
    
    
    
                
        /* >>> LOOP INVARIANT TO FILL <<< */
        
                /*@
          loop invariant (\at(x, Pre) != 0) ==> (((j == \at(y, Pre))&&(i == \at(x, Pre))&&(z3 == \at(z3, Pre))&&(z2 == \at(z2, Pre))&&(z1 == \at(z1, Pre))&&(y == \at(y, Pre))&&(x == \at(x, Pre))) || (PLACE_HOLDER_x));
          loop invariant (\at(x, Pre) != 0) ==> (((j == \at(y, Pre))&&(i == \at(x, Pre))&&(z3 == \at(z3, Pre))&&(z2 == \at(z2, Pre))&&(z1 == \at(z1, Pre))&&(y == \at(y, Pre))&&(x == \at(x, Pre))) || (PLACE_HOLDER_y));
          loop invariant (!(\at(x, Pre) != 0)) ==> ((j == \at(y, Pre))&&(i == \at(x, Pre))&&(z3 == \at(z3, Pre))&&(z2 == \at(z2, Pre))&&(z1 == \at(z1, Pre))&&(y == \at(y, Pre))&&(x == \at(x, Pre)));
          loop invariant j == \at(y, Pre);
          loop invariant i == \at(x, Pre);
          loop invariant z3 == \at(z3, Pre);
          loop invariant z2 == \at(z2, Pre);
          loop invariant z1 == \at(z1, Pre);
                */
                while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
                
  
    /*@ assert (i == j) ==> (y == 0); */
  
  }
## Analysis

### a. Purpose and Structure of the Loop

**Objective**: The loop's objective is to decrement `x` and `y` until `x` reaches zero. At this point, the assertion checks if `i == j` implies `y == 0`.

**Structure**:
- **Loop Condition**: `x != 0`
- **Operations within Loop**: 
  - `x = x - 1;`
  - `y = y - 1;`
- **Relevant Variables**: `x`, `y`, `i`, `j`, `z1`, `z2`, `z3`

### b. Discussion of the Loop Invariant

- The proposed invariants aim to capture the relationship between the variables throughout the loop's execution. They reflect how `x` and `y` change in each iteration while other variables remain constant.
- **Loop Invariants**:
  - If `x` is not zero at the start, the transformation of `x` and `y` is tracked.
  - If `x` is zero, all variables retain their initial values.
  - `j`, `i`, `z3`, `z2`, and `z1` remain constant throughout the loop.

### c. Establishment

- Before the loop starts, all invariants hold because all variables are initially equal to their values as specified in the pre-condition.

### d. Preservation

- If the invariants hold at the start of an iteration:
  - Decrementing `x` and `y` by 1 preserves the relationship if `x` was initially non-zero.
  - All other variables remain unchanged, thus preserving their invariants.

### e. Termination Analysis of the Loop

- **Termination Condition**: The loop terminates when `x == 0`.
- At termination, since `x` reaches zero, the invariant ensures `y` has been decremented the same number of times as `x`, maintaining the relationship between the initial and current values.

### f. Correctness of the Post-condition

- Once the loop finishes, if `i == j`, the post-condition `y == 0` should hold. This is ensured by the invariant since `x` and `y` are decremented synchronously, starting from their initial values `x == i` and `y == j`.

### g. Implication of the Pre-condition

- The pre-condition directly sets the stage for the loop invariants by asserting that `i`, `j`, `x`, `y`, `z1`, `z2`, and `z3` are initialized to their initial values, thus establishing the invariants before the loop.

## Completed C Loop Program with Invariant Annotations

```c
void foo(int x, int y, int z1, int z2, int z3) {
    int i = x;
    int j = y;
    
    /* >>> LOOP INVARIANT TO FILL <<< */
    /*@
      loop invariant (\at(x, Pre) != 0) ==> (((j == \at(y, Pre))&&(i == \at(x, Pre))&&(z3 == \at(z3, Pre))&&(z2 == \at(z2, Pre))&&(z1 == \at(z1, Pre))&&(y == \at(y, Pre))&&(x == \at(x, Pre))) || ((x + y) == (\at(x, Pre) + \at(y, Pre))));
      loop invariant (\at(x, Pre) != 0) ==> (((j == \at(y, Pre))&&(i == \at(x, Pre))&&(z3 == \at(z3, Pre))&&(z2 == \at(z2, Pre))&&(z1 == \at(z1, Pre))&&(y == \at(y, Pre))&&(x == \at(x, Pre))) || (y == (j - (i - x))));
      loop invariant (!(\at(x, Pre) != 0)) ==> ((j == \at(y, Pre))&&(i == \at(x, Pre))&&(z3 == \at(z3, Pre))&&(z2 == \at(z2, Pre))&&(z1 == \at(z1, Pre))&&(y == \at(y, Pre))&&(x == \at(x, Pre)));
      loop invariant j == \at(y, Pre);
      loop invariant i == \at(x, Pre);
      loop invariant z3 == \at(z3, Pre);
      loop invariant z2 == \at(z2, Pre);
      loop invariant z1 == \at(z1, Pre);
    */
    while (x != 0) {
        x = x - 1;
        y = y - 1;
    }

    /*@ assert (i == j) ==> (y == 0); */
}
```

void foo(int x, int y, int z1, int z2, int z3) {
    int i = x;
    int j = y;
    
    /* >>> LOOP INVARIANT TO FILL <<< */
    /*@
      loop invariant (\at(x, Pre) != 0) ==> (((j == \at(y, Pre))&&(i == \at(x, Pre))&&(z3 == \at(z3, Pre))&&(z2 == \at(z2, Pre))&&(z1 == \at(z1, Pre))&&(y == \at(y, Pre))&&(x == \at(x, Pre))) || ((x + y) == (\at(x, Pre) + \at(y, Pre))));
      loop invariant (\at(x, Pre) != 0) ==> (((j == \at(y, Pre))&&(i == \at(x, Pre))&&(z3 == \at(z3, Pre))&&(z2 == \at(z2, Pre))&&(z1 == \at(z1, Pre))&&(y == \at(y, Pre))&&(x == \at(x, Pre))) || (y == (j - (i - x))));
      loop invariant (!(\at(x, Pre) != 0)) ==> ((j == \at(y, Pre))&&(i == \at(x, Pre))&&(z3 == \at(z3, Pre))&&(z2 == \at(z2, Pre))&&(z1 == \at(z1, Pre))&&(y == \at(y, Pre))&&(x == \at(x, Pre)));
      loop invariant j == \at(y, Pre);
      loop invariant i == \at(x, Pre);
      loop invariant z3 == \at(z3, Pre);
      loop invariant z2 == \at(z2, Pre);
      loop invariant z1 == \at(z1, Pre);
    */
    while (x != 0) {
        x = x - 1;
        y = y - 1;
    }

    /*@ assert (i == j) ==> (y == 0); */
}


void foo(int x, int y, int z1, int z2, int z3) {
    int i = x;
    int j = y;
    
    /* >>> LOOP INVARIANT TO FILL <<< */
    /*@
      loop invariant (\at(x, Pre) != 0) ==> (((j == \at(y, Pre))&&(i == \at(x, Pre))&&(z3 == \at(z3, Pre))&&(z2 == \at(z2, Pre))&&(z1 == \at(z1, Pre))&&(y == \at(y, Pre))&&(x == \at(x, Pre))) || ((x + y) == (\at(x, Pre) + \at(y, Pre))));
      loop invariant (\at(x, Pre) != 0) ==> (((j == \at(y, Pre))&&(i == \at(x, Pre))&&(z3 == \at(z3, Pre))&&(z2 == \at(z2, Pre))&&(z1 == \at(z1, Pre))&&(y == \at(y, Pre))&&(x == \at(x, Pre))) || (y == (j - (i - x))));
      loop invariant (!(\at(x, Pre) != 0)) ==> ((j == \at(y, Pre))&&(i == \at(x, Pre))&&(z3 == \at(z3, Pre))&&(z2 == \at(z2, Pre))&&(z1 == \at(z1, Pre))&&(y == \at(y, Pre))&&(x == \at(x, Pre)));
      loop invariant j == \at(y, Pre);
      loop invariant i == \at(x, Pre);
      loop invariant z3 == \at(z3, Pre);
      loop invariant z2 == \at(z2, Pre);
      loop invariant z1 == \at(z1, Pre);
    */
    while (x != 0) {
        x = x - 1;
        y = y - 1;
    }

    /*@ assert (i == j) ==> (y == 0); */
}

/*@
      loop invariant (\at(x, Pre) != 0) ==> (((j == \at(y, Pre))&&(i == \at(x, Pre))&&(z3 == \at(z3, Pre))&&(z2 == \at(z2, Pre))&&(z1 == \at(z1, Pre))&&(y == \at(y, Pre))&&(x == \at(x, Pre))) || ((x + y) == (\at(x, Pre) + \at(y, Pre))));
      loop invariant (\at(x, Pre) != 0) ==> (((j == \at(y, Pre))&&(i == \at(x, Pre))&&(z3 == \at(z3, Pre))&&(z2 == \at(z2, Pre))&&(z1 == \at(z1, Pre))&&(y == \at(y, Pre))&&(x == \at(x, Pre))) || (y == (j - (i - x))));
      loop invariant (!(\at(x, Pre) != 0)) ==> ((j == \at(y, Pre))&&(i == \at(x, Pre))&&(z3 == \at(z3, Pre))&&(z2 == \at(z2, Pre))&&(z1 == \at(z1, Pre))&&(y == \at(y, Pre))&&(x == \at(x, Pre)));
      loop invariant j == \at(y, Pre);
      loop invariant i == \at(x, Pre);
      loop invariant z3 == \at(z3, Pre);
      loop invariant z2 == \at(z2, Pre);
      loop invariant z1 == \at(z1, Pre);
    */
    while (x != 0) {
        x = x - 1;
        y = y - 1;
    }
转换后
/*@ Inv
    ((x@pre != 0) => (((j == y@pre)&&(i == x@pre)&&(z3 == z3@pre)&&(z2 == z2@pre)&&(z1 == z1@pre)&&(y == y@pre)&&(x == x@pre)) || ((x + y) == (x@pre + y@pre)))) &&
((x@pre != 0) => (((j == y@pre)&&(i == x@pre)&&(z3 == z3@pre)&&(z2 == z2@pre)&&(z1 == z1@pre)&&(y == y@pre)&&(x == x@pre)) || (y == (j - (i - x))))) &&
((!(x@pre != 0)) => ((j == y@pre)&&(i == x@pre)&&(z3 == z3@pre)&&(z2 == z2@pre)&&(z1 == z1@pre)&&(y == y@pre)&&(x == x@pre))) &&
(j == y@pre) &&
(i == x@pre) &&
(z3 == z3@pre) &&
(z2 == z2@pre) &&
(z1 == z1@pre)
    */
    
    while (x != 0) {
        x = x - 1;
        y = y - 1;
    }
File found: ../sac_c_parser/test/../ip_postcond/goal/126_goal.v. Deleting the file.
File found: ../sac_c_parser/test/../ip_postcond/goal/126_proof_auto.v. Deleting the file.
File found: ../sac_c_parser/test/../ip_postcond/goal/126_proof_manual.v. Deleting the file.
LoopEntry_0:
(j == y@pre) * (i == x@pre) * (z3 == z3@pre) * (z2 == z2@pre) * (z1 == z1@pre) * (y == y@pre) * (x == x@pre)

Successfully generated loop/126.json
syntax Correct
Validate:
[False, True, True, True, True, True, True, True]

Goal Preservation of Invariant (file output/126.c, line 8)
Error found in file: output/126.c at line: 8
Error line content: loop invariant (\at(x, Pre) != 0) ==> (((j == \at(y, Pre))&&(i == \at(x, Pre))&&(z3 == \at(z3, Pre))&&(z2 == \at(z2, Pre))&&(z1 == \at(z1, Pre))&&(y == \at(y, Pre))&&(x == \at(x, Pre))) || ((x + y) == (\at(x, Pre) + \at(y, Pre))));

Verify:
[True]

syntax Correct
Validate:
[False, True, True, True, True, True, True, True]

Goal Preservation of Invariant (file output/126.c, line 8)
Error found in file: output/126.c at line: 8
Error line content: loop invariant (\at(x, Pre) != 0) ==> (((j == \at(y, Pre))&&(i == \at(x, Pre))&&(z3 == \at(z3, Pre))&&(z2 == \at(z2, Pre))&&(z1 == \at(z1, Pre))&&(y == \at(y, Pre))&&(x == \at(x, Pre))) || ((x + y) == (\at(x, Pre) + \at(y, Pre))));

Verify:
[True]

RESULT PASS_1
1
0
0
RESULT PASS_3
1
0
0
TRY TIME: 1
[(132, 196, 0)]
[(132, 196, 0)]
[(132, 196, 0)]
[(132, 196, 0)]
Loop 0 : Outer
Sorted indices: [0]
File found: ../sac_c_parser/test/../ip_postcond/goal/126_goal.v. Deleting the file.
File found: ../sac_c_parser/test/../ip_postcond/goal/126_proof_auto.v. Deleting the file.
File found: ../sac_c_parser/test/../ip_postcond/goal/126_proof_manual.v. Deleting the file.
LoopEntry_0:
(j == y@pre) * (i == x@pre) * (z3 == z3@pre) * (z2 == z2@pre) * (z1 == z1@pre) * (y == y@pre) * (x == x@pre)

Successfully generated loop/126.json
INNER_FLAG: False
Variable Maps: [{'j': 'y@pre', 'i': 'x@pre', 'z3': 'z3@pre', 'z2': 'z2@pre', 'z1': 'z1@pre', 'y': 'y@pre', 'x': 'x@pre'}]
Path conditions: [None]
Pre condition: (j == y@pre) * (i == x@pre) * (z3 == z3@pre) * (z2 == z2@pre) * (z1 == z1@pre) * (y == y@pre) * (x == x@pre)
Loop Condition: x != 0
Updated Loop Conditions: ['x@pre != 0']
Global Unchanged Variables ['j', 'i', 'z3', 'z2', 'z1']
Non Inductive Variables []
[{'j': 'y@pre', 'i': 'x@pre', 'z3': 'z3@pre', 'z2': 'z2@pre', 'z1': 'z1@pre', 'y': 'y@pre', 'x': 'x@pre'}]
[None]

                
        /* >>> LOOP INVARIANT TO FILL <<< */
        
                /*@
          loop invariant j == \at(y, Pre);
          loop invariant i == \at(x, Pre);
          loop invariant z3 == \at(z3, Pre);
          loop invariant z2 == \at(z2, Pre);
          loop invariant z1 == \at(z1, Pre);
                */
                while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
                

                
        /* >>> LOOP INVARIANT TO FILL <<< */
        
                /*@
          loop invariant (\at(x, Pre) != 0) ==> (((j == \at(y, Pre))&&(i == \at(x, Pre))&&(z3 == \at(z3, Pre))&&(z2 == \at(z2, Pre))&&(z1 == \at(z1, Pre))&&(y == \at(y, Pre))&&(x == \at(x, Pre))) || (PLACE_HOLDER_x));
          loop invariant (\at(x, Pre) != 0) ==> (((j == \at(y, Pre))&&(i == \at(x, Pre))&&(z3 == \at(z3, Pre))&&(z2 == \at(z2, Pre))&&(z1 == \at(z1, Pre))&&(y == \at(y, Pre))&&(x == \at(x, Pre))) || (PLACE_HOLDER_y));
          loop invariant (!(\at(x, Pre) != 0)) ==> ((j == \at(y, Pre))&&(i == \at(x, Pre))&&(z3 == \at(z3, Pre))&&(z2 == \at(z2, Pre))&&(z1 == \at(z1, Pre))&&(y == \at(y, Pre))&&(x == \at(x, Pre)));
          loop invariant j == \at(y, Pre);
          loop invariant i == \at(x, Pre);
          loop invariant z3 == \at(z3, Pre);
          loop invariant z2 == \at(z2, Pre);
          loop invariant z1 == \at(z1, Pre);
                */
                while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
                
void foo(int x, int y,int z1,int z2,int z3) {

    int i = x;
    int j = y;
    
    
    
                
        /* >>> LOOP INVARIANT TO FILL <<< */
        
                /*@
          loop invariant (\at(x, Pre) != 0) ==> (((j == \at(y, Pre))&&(i == \at(x, Pre))&&(z3 == \at(z3, Pre))&&(z2 == \at(z2, Pre))&&(z1 == \at(z1, Pre))&&(y == \at(y, Pre))&&(x == \at(x, Pre))) || (PLACE_HOLDER_x));
          loop invariant (\at(x, Pre) != 0) ==> (((j == \at(y, Pre))&&(i == \at(x, Pre))&&(z3 == \at(z3, Pre))&&(z2 == \at(z2, Pre))&&(z1 == \at(z1, Pre))&&(y == \at(y, Pre))&&(x == \at(x, Pre))) || (PLACE_HOLDER_y));
          loop invariant (!(\at(x, Pre) != 0)) ==> ((j == \at(y, Pre))&&(i == \at(x, Pre))&&(z3 == \at(z3, Pre))&&(z2 == \at(z2, Pre))&&(z1 == \at(z1, Pre))&&(y == \at(y, Pre))&&(x == \at(x, Pre)));
          loop invariant j == \at(y, Pre);
          loop invariant i == \at(x, Pre);
          loop invariant z3 == \at(z3, Pre);
          loop invariant z2 == \at(z2, Pre);
          loop invariant z1 == \at(z1, Pre);
                */
                while (x != 0) {
  
      x  = x - 1;
      y  = y - 1;
  
    }
                
  
    /*@ assert (i == j) ==> (y == 0); */
  
  }
To analyze the given C loop and generate the necessary loop invariants in ACSL annotations, we need to identify the loop's purpose, structure, relevant variables, and then fill in the placeholders in the invariants.

### Analysis

#### a. Purpose and Structure of the Loop

- **Objective**: The loop aims to decrement both `x` and `y` until `x` becomes zero. The loop's intended outcome is to stop when `x` is zero. 
- **Structure**:
  - **Loop Condition**: `x != 0`
  - **Operations**: In each iteration, `x` is decremented by 1, and `y` is decremented by 1.
  - **Relevant Variables**: `x`, `y`, `i`, `j`, `z1`, `z2`, `z3`.

#### b. Discussion of the Loop Invariant

The loop invariant must capture the relationship between `x`, `y`, and other variables such that it helps in proving the post-condition. We should ensure that the loop invariants maintain the relationships established by the pre-condition and are necessary to prove the post-condition.

#### c. Establishment

Before the loop starts, from the pre-condition `(j == \at(y, Pre)) * (i == \at(x, Pre)) * ...`, it is clear that all variables are equal to their initial values. This satisfies the establishment of each loop invariant.

#### d. Preservation

The invariants must hold before and after each iteration:
- `x` and `y` are decremented by 1 in each iteration, so `x == \at(x, Pre) - k` and `y == \at(y, Pre) - k` for some `k`.
- The other variables (`i`, `j`, `z1`, `z2`, `z3`) remain unchanged.

#### e. Termination Analysis of the Loop

The loop terminates when `x == 0`. At this point, since `y` is decremented by 1 per iteration, `y` should be `\at(y, Pre) - (\at(x, Pre) - 0)`. The invariant holds since it captures the decremented values of `x` and `y`.

#### f. Correctness of the Post-condition

The post-condition `assert (i == j) ==> (y == 0);` is satisfied because:
- If `i == j`, then initially `x == y`. As the loop decrements both by the same amount, when `x` reaches 0, `y` also reaches 0.

#### g. Implication of the Pre-condition

The pre-condition ensures the initial equality of all variables with their pre-values. This directly establishes the loop invariants at the start.

### Filled C Loop Program

```c
void foo(int x, int y, int z1, int z2, int z3) {
    int i = x;
    int j = y;
    
    /* >>> LOOP INVARIANT TO FILL <<< */
    
    /*@
      loop invariant (\at(x, Pre) != 0) ==> (((j == \at(y, Pre))&&(i == \at(x, Pre))&&(z3 == \at(z3, Pre))&&(z2 == \at(z2, Pre))&&(z1 == \at(z1, Pre))&&(y == \at(y, Pre))&&(x == \at(x, Pre))) || (x == \at(x, Pre) - (\at(x, Pre) - x)));
      loop invariant (\at(x, Pre) != 0) ==> (((j == \at(y, Pre))&&(i == \at(x, Pre))&&(z3 == \at(z3, Pre))&&(z2 == \at(z2, Pre))&&(z1 == \at(z1, Pre))&&(y == \at(y, Pre))&&(x == \at(x, Pre))) || (y == \at(y, Pre) - (\at(x, Pre) - x)));
      loop invariant (!(\at(x, Pre) != 0)) ==> ((j == \at(y, Pre))&&(i == \at(x, Pre))&&(z3 == \at(z3, Pre))&&(z2 == \at(z2, Pre))&&(z1 == \at(z1, Pre))&&(y == \at(y, Pre))&&(x == \at(x, Pre)));
      loop invariant j == \at(y, Pre);
      loop invariant i == \at(x, Pre);
      loop invariant z3 == \at(z3, Pre);
      loop invariant z2 == \at(z2, Pre);
      loop invariant z1 == \at(z1, Pre);
    */
    while (x != 0) {
        x = x - 1;
        y = y - 1;
    }
    
    /*@ assert (i == j) ==> (y == 0); */
}
```

void foo(int x, int y, int z1, int z2, int z3) {
    int i = x;
    int j = y;
    
    /* >>> LOOP INVARIANT TO FILL <<< */
    
    /*@
      loop invariant (\at(x, Pre) != 0) ==> (((j == \at(y, Pre))&&(i == \at(x, Pre))&&(z3 == \at(z3, Pre))&&(z2 == \at(z2, Pre))&&(z1 == \at(z1, Pre))&&(y == \at(y, Pre))&&(x == \at(x, Pre))) || (x == \at(x, Pre) - (\at(x, Pre) - x)));
      loop invariant (\at(x, Pre) != 0) ==> (((j == \at(y, Pre))&&(i == \at(x, Pre))&&(z3 == \at(z3, Pre))&&(z2 == \at(z2, Pre))&&(z1 == \at(z1, Pre))&&(y == \at(y, Pre))&&(x == \at(x, Pre))) || (y == \at(y, Pre) - (\at(x, Pre) - x)));
      loop invariant (!(\at(x, Pre) != 0)) ==> ((j == \at(y, Pre))&&(i == \at(x, Pre))&&(z3 == \at(z3, Pre))&&(z2 == \at(z2, Pre))&&(z1 == \at(z1, Pre))&&(y == \at(y, Pre))&&(x == \at(x, Pre)));
      loop invariant j == \at(y, Pre);
      loop invariant i == \at(x, Pre);
      loop invariant z3 == \at(z3, Pre);
      loop invariant z2 == \at(z2, Pre);
      loop invariant z1 == \at(z1, Pre);
    */
    while (x != 0) {
        x = x - 1;
        y = y - 1;
    }
    
    /*@ assert (i == j) ==> (y == 0); */
}


void foo(int x, int y, int z1, int z2, int z3) {
    int i = x;
    int j = y;
    
    /* >>> LOOP INVARIANT TO FILL <<< */
    
    /*@
      loop invariant (\at(x, Pre) != 0) ==> (((j == \at(y, Pre))&&(i == \at(x, Pre))&&(z3 == \at(z3, Pre))&&(z2 == \at(z2, Pre))&&(z1 == \at(z1, Pre))&&(y == \at(y, Pre))&&(x == \at(x, Pre))) || (x == \at(x, Pre) - (\at(x, Pre) - x)));
      loop invariant (\at(x, Pre) != 0) ==> (((j == \at(y, Pre))&&(i == \at(x, Pre))&&(z3 == \at(z3, Pre))&&(z2 == \at(z2, Pre))&&(z1 == \at(z1, Pre))&&(y == \at(y, Pre))&&(x == \at(x, Pre))) || (y == \at(y, Pre) - (\at(x, Pre) - x)));
      loop invariant (!(\at(x, Pre) != 0)) ==> ((j == \at(y, Pre))&&(i == \at(x, Pre))&&(z3 == \at(z3, Pre))&&(z2 == \at(z2, Pre))&&(z1 == \at(z1, Pre))&&(y == \at(y, Pre))&&(x == \at(x, Pre)));
      loop invariant j == \at(y, Pre);
      loop invariant i == \at(x, Pre);
      loop invariant z3 == \at(z3, Pre);
      loop invariant z2 == \at(z2, Pre);
      loop invariant z1 == \at(z1, Pre);
    */
    while (x != 0) {
        x = x - 1;
        y = y - 1;
    }
    
    /*@ assert (i == j) ==> (y == 0); */
}

/*@
      loop invariant (\at(x, Pre) != 0) ==> (((j == \at(y, Pre))&&(i == \at(x, Pre))&&(z3 == \at(z3, Pre))&&(z2 == \at(z2, Pre))&&(z1 == \at(z1, Pre))&&(y == \at(y, Pre))&&(x == \at(x, Pre))) || (x == \at(x, Pre) - (\at(x, Pre) - x)));
      loop invariant (\at(x, Pre) != 0) ==> (((j == \at(y, Pre))&&(i == \at(x, Pre))&&(z3 == \at(z3, Pre))&&(z2 == \at(z2, Pre))&&(z1 == \at(z1, Pre))&&(y == \at(y, Pre))&&(x == \at(x, Pre))) || (y == \at(y, Pre) - (\at(x, Pre) - x)));
      loop invariant (!(\at(x, Pre) != 0)) ==> ((j == \at(y, Pre))&&(i == \at(x, Pre))&&(z3 == \at(z3, Pre))&&(z2 == \at(z2, Pre))&&(z1 == \at(z1, Pre))&&(y == \at(y, Pre))&&(x == \at(x, Pre)));
      loop invariant j == \at(y, Pre);
      loop invariant i == \at(x, Pre);
      loop invariant z3 == \at(z3, Pre);
      loop invariant z2 == \at(z2, Pre);
      loop invariant z1 == \at(z1, Pre);
    */
    while (x != 0) {
        x = x - 1;
        y = y - 1;
    }
转换后
/*@ Inv
    ((x@pre != 0) => (((j == y@pre)&&(i == x@pre)&&(z3 == z3@pre)&&(z2 == z2@pre)&&(z1 == z1@pre)&&(y == y@pre)&&(x == x@pre)) || (x == x@pre - (x@pre - x)))) &&
((x@pre != 0) => (((j == y@pre)&&(i == x@pre)&&(z3 == z3@pre)&&(z2 == z2@pre)&&(z1 == z1@pre)&&(y == y@pre)&&(x == x@pre)) || (y == y@pre - (x@pre - x)))) &&
((!(x@pre != 0)) => ((j == y@pre)&&(i == x@pre)&&(z3 == z3@pre)&&(z2 == z2@pre)&&(z1 == z1@pre)&&(y == y@pre)&&(x == x@pre))) &&
(j == y@pre) &&
(i == x@pre) &&
(z3 == z3@pre) &&
(z2 == z2@pre) &&
(z1 == z1@pre)
    */
    
    while (x != 0) {
        x = x - 1;
        y = y - 1;
    }
File found: ../sac_c_parser/test/../ip_postcond/goal/126_goal.v. Deleting the file.
File found: ../sac_c_parser/test/../ip_postcond/goal/126_proof_auto.v. Deleting the file.
File found: ../sac_c_parser/test/../ip_postcond/goal/126_proof_manual.v. Deleting the file.
LoopEntry_0:
(j == y@pre) * (i == x@pre) * (z3 == z3@pre) * (z2 == z2@pre) * (z1 == z1@pre) * (y == y@pre) * (x == x@pre)

Successfully generated loop/126.json
syntax Correct
Validate:
[True, True, True, True, True, True, True, True]

Verify:
[True]

CORRECT INVARIANT
syntax Correct
Validate:
[True, True, True, True, True, True, True, True]

Verify:
[True]

已移动文件: 126.c -> finish
-----------------------------------------

文件 126.c 处理完成. 总耗时: 86.34193849563599
错误的文件名:
  - 9.c
  - 65.c
  - 11.c
  - 70.c
  - 94.c
  - 17.c
  - 40.c
  - 88.c
  - 4.c
  - 8.c
  - 84.c
  - 83.c
  - 14.c
  - 10.c
  - 126.c
========================================
错误的文件名:
  - 9.c
  - 65.c
  - 70.c
  - 94.c
  - 88.c
  - 4.c
  - 8.c
  - 84.c
  - 83.c
  - 14.c
  - 10.c
========================================
-----------------------------------------
finshed_files:['9.c', '65.c', '11.c', '70.c', '94.c', '33.c', '17.c', '105.c', '101.c', '40.c', '88.c', '4.c', '8.c', '84.c', '83.c', '14.c', '119.c', '10.c', '89.c', '126.c']
