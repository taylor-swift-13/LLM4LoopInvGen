file:031.c
TRY TIME: 0
[(189, 464, 0), (234, 460, 1), (346, 386, 2)]
[(189, 464, 0), (234, 460, 1), (346, 386, 2)]
[(189, 464, 0), (234, 460, 1), (346, 386, 2)]
[(189, 464, 0), (234, 460, 1), (346, 386, 2)]
Loop 2 : Inner
Loop 1 : Inner
Loop 0 : Outer
Sorted indices: [2, 1, 0]
File not found: ../sac_c_parser/test/../ip_postcond/goal/031_goal.v. No file to delete.
File not found: ../sac_c_parser/test/../ip_postcond/goal/031_proof_auto.v. No file to delete.
File not found: ../sac_c_parser/test/../ip_postcond/goal/031_proof_manual.v. No file to delete.
LoopEntry_0:
m@pre + 1 < n@pre && (m == m@pre) * (n == n@pre) * (k == k@pre) * (j == j@pre) * (i == 0)
LoopEntry_1:
0 < n@pre && m@pre + 1 < n@pre && (m == m@pre) * (n == n@pre) * (k == k@pre) * (j == 0) * (i == 0)
LoopEntry_2:
0 >= 0 && retval_38 != 0 && retval_38 <= INT_MAX && retval_38 > INT_MIN && 0 < m@pre && 0 < n@pre && m@pre + 1 < n@pre && (j == 0 + 1) * (m == m@pre) * (n == n@pre) * (k == 0) * (i == 0)

[(0, 'm@pre + 1 < n@pre && (m == m@pre) * (n == n@pre) * (k == k@pre) * (j == j@pre) * (i == 0)'), (1, '0 < n@pre && m@pre + 1 < n@pre && (m == m@pre) * (n == n@pre) * (k == k@pre) * (j == 0) * (i == 0)'), (2, '0 >= 0 && retval_38 != 0 && retval_38 <= INT_MAX && retval_38 > INT_MIN && 0 < m@pre && 0 < n@pre && m@pre + 1 < n@pre && (j == 0 + 1) * (m == m@pre) * (n == n@pre) * (k == 0) * (i == 0)')]
Successfully generated loop/031.json
INNER_FLAG: True
Variable Maps: [{'j': '0 + 1', 'm': 'm@pre', 'n': 'n@pre', 'k': '0', 'i': '0'}]
Path conditions: ['0 >= 0 && retval_38 != 0 && retval_38 <= INT_MAX && retval_38 > INT_MIN && 0 < m@pre && 0 < n@pre && m@pre + 1 < n@pre']
Pre condition: 0 >= 0 && retval_38 != 0 && retval_38 <= INT_MAX && retval_38 > INT_MIN && 0 < m@pre && 0 < n@pre && m@pre + 1 < n@pre && (j == 0 + 1) * (m == m@pre) * (n == n@pre) * (k == 0) * (i == 0)
Loop Condition: k < j
Updated Loop Conditions: ['0 < 0 + 1']
Global Unchanged Variables ['j', 'm', 'n', 'i']
Non Inductive Variables []
[{'j': '0 + 1', 'm': 'm@pre', 'n': 'n@pre', 'k': '0', 'i': '0'}]
['0 >= 0 && retval_38 != 0 && retval_38 <= INT_MAX && retval_38 > INT_MIN && 0 < m@pre && 0 < n@pre && m@pre + 1 < n@pre']

int unknown();

/*@ requires m + 1 < n; */
void foo(int i,int j,int k,int n,int m) {

  i = 0;
  for (i = 0; i < n; i += 4) {
    j = i;
    for (j = i; j < m;) {
        
      if (unknown()) {
        /*@ assert j >= 0;*/
        j++;
        k = 0;
        
                
        /* >>> LOOP INVARIANT TO FILL <<< */
        
                /*@
                */
                while (k < j) {
          k++;
        }
                
      } else {
        /*@ assert n + j + 5 > i;*/
        j += 2;
      }
    }
  }
}
SIMPLE
```c
int unknown();

/*@ requires m + 1 < n; */
void foo(int i,int j,int k,int n,int m) {

  i = 0;
  for (i = 0; i < n; i += 4) {
    j = i;
    for (j = i; j < m;) {
        
      if (unknown()) {
        /*@ assert j >= 0;*/
        j++;
        k = 0;
        
        /* >>> LOOP INVARIANT TO FILL <<< */
        
                /*@
                loop invariant j >= i;
                loop invariant j <= m;
                loop invariant k >= 0;
                loop invariant k <= j;
                */
                while (k < j) {
          k++;
        }
                
      } else {
        /*@ assert n + j + 5 > i;*/
        j += 2;
      }
    }
  }
}
```

int unknown();

/*@ requires m + 1 < n; */
void foo(int i,int j,int k,int n,int m) {

  i = 0;
  for (i = 0; i < n; i += 4) {
    j = i;
    for (j = i; j < m;) {
        
      if (unknown()) {
        /*@ assert j >= 0;*/
        j++;
        k = 0;
        
                /*@
                loop invariant j >= i;
                loop invariant j <= m;
                loop invariant k >= 0;
                loop invariant k <= j;
                */
                while (k < j) {
          k++;
        }
                
      } else {
        /*@ assert n + j + 5 > i;*/
        j += 2;
      }
    }
  }
}


int unknown();

/*@ requires m + 1 < n; */
void foo(int i,int j,int k,int n,int m) {

  i = 0;
  for (i = 0; i < n; i += 4) {
    j = i;
    for (j = i; j < m;) {
        
      if (unknown()) {
        /*@ assert j >= 0;*/
        j++;
        k = 0;
        
                /*@
                loop invariant j >= i;
                loop invariant j <= m;
                loop invariant k >= 0;
                loop invariant k <= j;
                */
                while (k < j) {
          k++;
        }
                
      } else {
        /*@ assert n + j + 5 > i;*/
        j += 2;
      }
    }
  }
}

INNER_FLAG: True
Variable Maps: [{'m': 'm@pre', 'n': 'n@pre', 'k': 'k@pre', 'j': '0', 'i': '0'}]
Path conditions: ['0 < n@pre && m@pre + 1 < n@pre']
Pre condition: 0 < n@pre && m@pre + 1 < n@pre && (m == m@pre) * (n == n@pre) * (k == k@pre) * (j == 0) * (i == 0)
Loop Condition: j < m
Updated Loop Conditions: ['0 < m@pre']
Global Unchanged Variables ['m', 'n', 'i']
Non Inductive Variables ['k']
[{'m': 'm@pre', 'n': 'n@pre', 'k': 'k@pre', 'j': '0', 'i': '0'}]
['0 < n@pre && m@pre + 1 < n@pre']

int unknown();

/*@ requires m + 1 < n; */
void foo(int i,int j,int k,int n,int m) {

  i = 0;
  for (i = 0; i < n; i += 4) {
    j = i;
    
                
        /* >>> LOOP INVARIANT TO FILL <<< */
        
                /*@
                */
                for (j = i; j < m;) {
        
      if (unknown()) {
        /*@ assert j >= 0;*/
        j++;
        k = 0;
        
                /*@
                loop invariant j >= i;
                loop invariant j <= m;
                loop invariant k >= 0;
                loop invariant k <= j;
                */
                while (k < j) {
          k++;
        }
                
      } else {
        /*@ assert n + j + 5 > i;*/
        j += 2;
      }
    }
                
  }
}

SIMPLE
```c
int unknown();

/*@ requires m + 1 < n; */
void foo(int i,int j,int k,int n,int m) {

  i = 0;
  for (i = 0; i < n; i += 4) {
    j = i;
    
                
        /* >>> LOOP INVARIANT TO FILL <<< */
        
                /*@
                loop invariant j >= i;
                loop invariant j <= m;
                loop invariant k >= 0;
                loop invariant k <= j;
                loop invariant j - i == (j - i) % 2;
                */
                for (j = i; j < m;) {
        
      if (unknown()) {
        /*@ assert j >= 0;*/
        j++;
        k = 0;
        
                /*@
                loop invariant j >= i;
                loop invariant j <= m;
                loop invariant k >= 0;
                loop invariant k <= j;
                */
                while (k < j) {
          k++;
        }
                
      } else {
        /*@ assert n + j + 5 > i;*/
        j += 2;
      }
    }
                
  }
}
```

int unknown();

/*@ requires m + 1 < n; */
void foo(int i,int j,int k,int n,int m) {

  i = 0;
  for (i = 0; i < n; i += 4) {
    j = i;
    
                
                /*@
                loop invariant j >= i;
                loop invariant j <= m;
                loop invariant k >= 0;
                loop invariant k <= j;
                loop invariant j - i == (j - i) % 2;
                */
                for (j = i; j < m;) {
        
      if (unknown()) {
        /*@ assert j >= 0;*/
        j++;
        k = 0;
        
                /*@
                loop invariant j >= i;
                loop invariant j <= m;
                loop invariant k >= 0;
                loop invariant k <= j;
                */
                while (k < j) {
          k++;
        }
                
      } else {
        /*@ assert n + j + 5 > i;*/
        j += 2;
      }
    }
                
  }
}


int unknown();

/*@ requires m + 1 < n; */
void foo(int i,int j,int k,int n,int m) {

  i = 0;
  for (i = 0; i < n; i += 4) {
    j = i;
    
                
                /*@
                loop invariant j >= i;
                loop invariant j <= m;
                loop invariant k >= 0;
                loop invariant k <= j;
                loop invariant j - i == (j - i) % 2;
                */
                for (j = i; j < m;) {
        
      if (unknown()) {
        /*@ assert j >= 0;*/
        j++;
        k = 0;
        
                /*@
                loop invariant j >= i;
                loop invariant j <= m;
                loop invariant k >= 0;
                loop invariant k <= j;
                */
                while (k < j) {
          k++;
        }
                
      } else {
        /*@ assert n + j + 5 > i;*/
        j += 2;
      }
    }
                
  }
}

INNER_FLAG: False
Variable Maps: [{'m': 'm@pre', 'n': 'n@pre', 'k': 'k@pre', 'j': 'j@pre', 'i': '0'}]
Path conditions: ['m@pre + 1 < n@pre']
Pre condition: m@pre + 1 < n@pre && (m == m@pre) * (n == n@pre) * (k == k@pre) * (j == j@pre) * (i == 0)
Loop Condition: i < n
Updated Loop Conditions: ['0 < n@pre']
Global Unchanged Variables ['m', 'n']
Non Inductive Variables ['j', 'k']
[{'m': 'm@pre', 'n': 'n@pre', 'k': 'k@pre', 'j': 'j@pre', 'i': '0'}]
['m@pre + 1 < n@pre']

                
        /* >>> LOOP INVARIANT TO FILL <<< */
        
                /*@
          loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> (m == \at(m, Pre));
          loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> (n == \at(n, Pre));
                */
                for (i = 0; i < n; i += 4) {
    j = i;
    
                
                /*@
                loop invariant j >= i;
                loop invariant j <= m;
                loop invariant k >= 0;
                loop invariant k <= j;
                loop invariant j - i == (j - i) % 2;
                */
                for (j = i; j < m;) {
        
      if (unknown()) {
        /*@ assert j >= 0;*/
        j++;
        k = 0;
        
                /*@
                loop invariant j >= i;
                loop invariant j <= m;
                loop invariant k >= 0;
                loop invariant k <= j;
                */
                while (k < j) {
          k++;
        }
                
      } else {
        /*@ assert n + j + 5 > i;*/
        j += 2;
      }
    }
                
  }
                

                
        /* >>> LOOP INVARIANT TO FILL <<< */
        
                /*@
          loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (PLACE_HOLDER_i))) ;
          loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (PLACE_HOLDER_j))) ;
          loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (PLACE_HOLDER_k))) ;
          loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((!(0 < \at(n, Pre))) ==> ((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)));
          loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> (m == \at(m, Pre));
          loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> (n == \at(n, Pre));
                */
                for (i = 0; i < n; i += 4) {
    j = i;
    
                
                /*@
                loop invariant j >= i;
                loop invariant j <= m;
                loop invariant k >= 0;
                loop invariant k <= j;
                loop invariant j - i == (j - i) % 2;
                */
                for (j = i; j < m;) {
        
      if (unknown()) {
        /*@ assert j >= 0;*/
        j++;
        k = 0;
        
                /*@
                loop invariant j >= i;
                loop invariant j <= m;
                loop invariant k >= 0;
                loop invariant k <= j;
                */
                while (k < j) {
          k++;
        }
                
      } else {
        /*@ assert n + j + 5 > i;*/
        j += 2;
      }
    }
                
  }
                

int unknown();

/*@ requires m + 1 < n; */
void foo(int i,int j,int k,int n,int m) {

  i = 0;
  
                
        /* >>> LOOP INVARIANT TO FILL <<< */
        
                /*@
          loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (PLACE_HOLDER_i))) ;
          loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (PLACE_HOLDER_j))) ;
          loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (PLACE_HOLDER_k))) ;
          loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((!(0 < \at(n, Pre))) ==> ((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)));
          loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> (m == \at(m, Pre));
          loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> (n == \at(n, Pre));
                */
                for (i = 0; i < n; i += 4) {
    j = i;
    
                
                /*@
                loop invariant j >= i;
                loop invariant j <= m;
                loop invariant k >= 0;
                loop invariant k <= j;
                loop invariant j - i == (j - i) % 2;
                */
                for (j = i; j < m;) {
        
      if (unknown()) {
        /*@ assert j >= 0;*/
        j++;
        k = 0;
        
                /*@
                loop invariant j >= i;
                loop invariant j <= m;
                loop invariant k >= 0;
                loop invariant k <= j;
                */
                while (k < j) {
          k++;
        }
                
      } else {
        /*@ assert n + j + 5 > i;*/
        j += 2;
      }
    }
                
  }
                
}

```c
/* >>> LOOP INVARIANT TO FILL <<< */

/*@ 
  loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (i % 4 == 0 && i < n)));
  loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (j < m)));
  loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (k < j)));
  loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((!(0 < \at(n, Pre))) ==> ((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)));
  loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> (m == \at(m, Pre));
  loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> (n == \at(n, Pre));
*/
```

/* >>> LOOP INVARIANT TO FILL <<< */

/*@ 
  loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (i % 4 == 0 && i < n)));
  loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (j < m)));
  loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (k < j)));
  loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((!(0 < \at(n, Pre))) ==> ((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)));
  loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> (m == \at(m, Pre));
  loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> (n == \at(n, Pre));
*/


/* >>> LOOP INVARIANT TO FILL <<< */

/*@ 
  loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (i % 4 == 0 && i < n)));
  loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (j < m)));
  loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (k < j)));
  loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((!(0 < \at(n, Pre))) ==> ((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)));
  loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> (m == \at(m, Pre));
  loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> (n == \at(n, Pre));
*/

syntax Error
[kernel] Parsing output/031.c (with preprocessing)
[kernel] output/031.c:10: 
  syntax error:
  Location: line 10, column 72
  8       loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((!(0 < \at(n, Pre))) ==> ((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)));
  9       loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> (m == \at(m, Pre));
  10      loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> (n == \at(n, Pre));
                                                                                ^
  11    */
[kernel] Frama-C aborted: invalid user input.

after repair

/* >>> LOOP INVARIANT TO FILL <<< */

/*@ 
  loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (i % 4 == 0 && i < n)));
  loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (j < m)));
  loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (k < j)));
  loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> (!(0 < \at(n, Pre)) ==> ((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)));
  loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> (m == \at(m, Pre));
  loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> (n == \at(n, Pre));
*/

syntax Error
[kernel] Parsing output/031.c (with preprocessing)
[kernel] output/031.c:10: 
  syntax error:
  Location: line 10, column 72
  8       loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> (!(0 < \at(n, Pre)) ==> ((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)));
  9       loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> (m == \at(m, Pre));
  10      loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> (n == \at(n, Pre));
                                                                                ^
  11    */
[kernel] Frama-C aborted: invalid user input.

syntax Error
[kernel] Parsing output/031.c (with preprocessing)
[kernel] output/031.c:10: 
  syntax error:
  Location: line 10, column 72
  8       loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> (!(0 < \at(n, Pre)) ==> ((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)));
  9       loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> (m == \at(m, Pre));
  10      loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> (n == \at(n, Pre));
                                                                                ^
  11    */
[kernel] Frama-C aborted: invalid user input.


/* >>> LOOP INVARIANT TO FILL <<< */

/*@ 
  loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (i % 4 == 0 && i < n)));
  loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (j < m)));
  loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (k < j)));
  loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> (!(0 < \at(n, Pre)) ==> ((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)));
  loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> (m == \at(m, Pre));
  loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> (n == \at(n, Pre));
*/
转换后

/* >>> LOOP INVARIANT TO FILL <<< */

/*@ Inv
    ((m@pre + 1 < n@pre) => ((0 < n@pre) => (((m == m@pre)&&(n == n@pre)&&(k == k@pre)&&(j == j@pre)&&(i == 0)) || (i % 4 == 0 && i < n)))) &&
((m@pre + 1 < n@pre) => ((0 < n@pre) => (((m == m@pre)&&(n == n@pre)&&(k == k@pre)&&(j == j@pre)&&(i == 0)) || (j < m)))) &&
((m@pre + 1 < n@pre) => ((0 < n@pre) => (((m == m@pre)&&(n == n@pre)&&(k == k@pre)&&(j == j@pre)&&(i == 0)) || (k < j)))) &&
((m@pre + 1 < n@pre) => (!(0 < n@pre) => ((m == m@pre)&&(n == n@pre)&&(k == k@pre)&&(j == j@pre)&&(i == 0)))) &&
((m@pre + 1 < n@pre) => (m == m@pre)) &&
((m@pre + 1 < n@pre) => (n == n@pre))
    */
syntax Error
[kernel] Parsing output/031.c (with preprocessing)
[kernel] output/031.c:10: 
  syntax error:
  Location: line 10, column 72
  8       loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> (!(0 < \at(n, Pre)) ==> ((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)));
  9       loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> (m == \at(m, Pre));
  10      loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> (n == \at(n, Pre));
                                                                                ^
  11    */
[kernel] Frama-C aborted: invalid user input.

after repair

/* >>> LOOP INVARIANT TO FILL <<< */

/*@ 
  loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (i % 4 == 0 && i < \at(n, Pre))));
  loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (j < \at(m, Pre)));
  loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (k < j)));
  loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((!(0 < \at(n, Pre))) ==> ((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)));
  loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> (m == \at(m, Pre));
  loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> (n == \at(n, Pre));
*/
   
syntax Error
[kernel] Parsing output/031.c (with preprocessing)
[kernel:annot-error] output/031.c:6: Warning: unexpected token ';'
[kernel] User Error: warning annot-error treated as fatal error.
[kernel] Frama-C aborted: invalid user input.

syntax Error
[kernel] Parsing output/031.c (with preprocessing)
[kernel:annot-error] output/031.c:6: Warning: unexpected token ';'
[kernel] User Error: warning annot-error treated as fatal error.
[kernel] Frama-C aborted: invalid user input.


/* >>> LOOP INVARIANT TO FILL <<< */

/*@ 
  loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (i % 4 == 0 && i < \at(n, Pre))));
  loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (j < \at(m, Pre)));
  loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (k < j)));
  loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((!(0 < \at(n, Pre))) ==> ((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)));
  loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> (m == \at(m, Pre));
  loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> (n == \at(n, Pre));
*/
  
转换后

/* >>> LOOP INVARIANT TO FILL <<< */

/*@ Inv
    ((m@pre + 1 < n@pre) => ((0 < n@pre) => (((m == m@pre)&&(n == n@pre)&&(k == k@pre)&&(j == j@pre)&&(i == 0)) || (i % 4 == 0 && i < n@pre)))) &&
((m@pre + 1 < n@pre) => ((0 < n@pre) => (((m == m@pre)&&(n == n@pre)&&(k == k@pre)&&(j == j@pre)&&(i == 0)) || (j < m@pre))) &&
((m@pre + 1 < n@pre) => ((0 < n@pre) => (((m == m@pre)&&(n == n@pre)&&(k == k@pre)&&(j == j@pre)&&(i == 0)) || (k < j)))) &&
((m@pre + 1 < n@pre) => ((!(0 < n@pre)) => ((m == m@pre)&&(n == n@pre)&&(k == k@pre)&&(j == j@pre)&&(i == 0)))) &&
((m@pre + 1 < n@pre) => (m == m@pre)) &&
((m@pre + 1 < n@pre) => (n == n@pre))
    */
  
syntax Error
[kernel] Parsing output/031.c (with preprocessing)
[kernel:annot-error] output/031.c:6: Warning: unexpected token ';'
[kernel] User Error: warning annot-error treated as fatal error.
[kernel] Frama-C aborted: invalid user input.

after repair

/* >>> LOOP INVARIANT TO FILL <<< */

/*@ 
    ((\at(m, Pre) + 1 < \at(n, Pre)) => ((0 < \at(n, Pre)) => (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (i % 4 == 0 && i < \at(n, Pre)))) &&
    ((\at(m, Pre) + 1 < \at(n, Pre)) => ((0 < \at(n, Pre)) => (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (j < \at(m, Pre)))) &&
    ((\at(m, Pre) + 1 < \at(n, Pre)) => ((0 < \at(n, Pre)) => (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (k < j)))) &&
    ((\at(m, Pre) + 1 < \at(n, Pre)) => ((!(0 < \at(n, Pre))) => ((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)))) &&
    ((\at(m, Pre) + 1 < \at(n, Pre)) => (m == \at(m, Pre))) &&
    ((\at(m, Pre) + 1 < \at(n, Pre)) => (n == \at(n, Pre)))
*/
   
syntax Error
[kernel] Parsing output/031.c (with preprocessing)
[kernel:annot-error] output/031.c:5: Warning: unexpected token '('
[kernel] User Error: warning annot-error treated as fatal error.
[kernel] Frama-C aborted: invalid user input.

syntax Error
[kernel] Parsing output/031.c (with preprocessing)
[kernel:annot-error] output/031.c:5: Warning: unexpected token '('
[kernel] User Error: warning annot-error treated as fatal error.
[kernel] Frama-C aborted: invalid user input.


/* >>> LOOP INVARIANT TO FILL <<< */

/*@ 
    ((\at(m, Pre) + 1 < \at(n, Pre)) => ((0 < \at(n, Pre)) => (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (i % 4 == 0 && i < \at(n, Pre)))) &&
    ((\at(m, Pre) + 1 < \at(n, Pre)) => ((0 < \at(n, Pre)) => (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (j < \at(m, Pre)))) &&
    ((\at(m, Pre) + 1 < \at(n, Pre)) => ((0 < \at(n, Pre)) => (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (k < j)))) &&
    ((\at(m, Pre) + 1 < \at(n, Pre)) => ((!(0 < \at(n, Pre))) => ((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)))) &&
    ((\at(m, Pre) + 1 < \at(n, Pre)) => (m == \at(m, Pre))) &&
    ((\at(m, Pre) + 1 < \at(n, Pre)) => (n == \at(n, Pre)))
*/
  
转换后

/* >>> LOOP INVARIANT TO FILL <<< */

/*@ Inv
    (((m@pre + 1 < n@pre) => ((0 < n@pre) => (((m == m@pre)&&(n == n@pre)&&(k == k@pre)&&(j == j@pre)&&(i == 0)) || (i % 4 == 0 && i < n@pre))) &&
    ((m@pre + 1 < n@pre) => ((0 < n@pre) => (((m == m@pre)&&(n == n@pre)&&(k == k@pre)&&(j == j@pre)&&(i == 0)) || (j < m@pre))) &&
    ((m@pre + 1 < n@pre) => ((0 < n@pre) => (((m == m@pre)&&(n == n@pre)&&(k == k@pre)&&(j == j@pre)&&(i == 0)) || (k < j)))) &&
    ((m@pre + 1 < n@pre) => ((!(0 < n@pre)) => ((m == m@pre)&&(n == n@pre)&&(k == k@pre)&&(j == j@pre)&&(i == 0)))) &&
    ((m@pre + 1 < n@pre) => (m == m@pre)) &&
    ((m@pre + 1 < n@pre) => (n == n@pre)))
    */
  
syntax Error
[kernel] Parsing output/031.c (with preprocessing)
[kernel:annot-error] output/031.c:5: Warning: unexpected token '('
[kernel] User Error: warning annot-error treated as fatal error.
[kernel] Frama-C aborted: invalid user input.

syntax Error
[kernel] Parsing output/031.c (with preprocessing)
[kernel:annot-error] output/031.c:5: Warning: unexpected token '('
[kernel] User Error: warning annot-error treated as fatal error.
[kernel] Frama-C aborted: invalid user input.

RESULT PASS_1
0
0
0
RESULT PASS_3
0
0
0
RESULT PASS_5
0
0
0
TRY TIME: 1
[(189, 464, 0), (234, 460, 1), (346, 386, 2)]
[(189, 464, 0), (234, 460, 1), (346, 386, 2)]
[(189, 464, 0), (234, 460, 1), (346, 386, 2)]
[(189, 464, 0), (234, 460, 1), (346, 386, 2)]
Loop 2 : Inner
Loop 1 : Inner
Loop 0 : Outer
Sorted indices: [2, 1, 0]
File found: ../sac_c_parser/test/../ip_postcond/goal/031_goal.v. Deleting the file.
File found: ../sac_c_parser/test/../ip_postcond/goal/031_proof_auto.v. Deleting the file.
File found: ../sac_c_parser/test/../ip_postcond/goal/031_proof_manual.v. Deleting the file.
LoopEntry_0:
m@pre + 1 < n@pre && (m == m@pre) * (n == n@pre) * (k == k@pre) * (j == j@pre) * (i == 0)
LoopEntry_1:
0 < n@pre && m@pre + 1 < n@pre && (m == m@pre) * (n == n@pre) * (k == k@pre) * (j == 0) * (i == 0)
LoopEntry_2:
0 >= 0 && retval_38 != 0 && retval_38 <= INT_MAX && retval_38 > INT_MIN && 0 < m@pre && 0 < n@pre && m@pre + 1 < n@pre && (j == 0 + 1) * (m == m@pre) * (n == n@pre) * (k == 0) * (i == 0)

[(0, 'm@pre + 1 < n@pre && (m == m@pre) * (n == n@pre) * (k == k@pre) * (j == j@pre) * (i == 0)'), (1, '0 < n@pre && m@pre + 1 < n@pre && (m == m@pre) * (n == n@pre) * (k == k@pre) * (j == 0) * (i == 0)'), (2, '0 >= 0 && retval_38 != 0 && retval_38 <= INT_MAX && retval_38 > INT_MIN && 0 < m@pre && 0 < n@pre && m@pre + 1 < n@pre && (j == 0 + 1) * (m == m@pre) * (n == n@pre) * (k == 0) * (i == 0)')]
Successfully generated loop/031.json
INNER_FLAG: True
Variable Maps: [{'j': '0 + 1', 'm': 'm@pre', 'n': 'n@pre', 'k': '0', 'i': '0'}]
Path conditions: ['0 >= 0 && retval_38 != 0 && retval_38 <= INT_MAX && retval_38 > INT_MIN && 0 < m@pre && 0 < n@pre && m@pre + 1 < n@pre']
Pre condition: 0 >= 0 && retval_38 != 0 && retval_38 <= INT_MAX && retval_38 > INT_MIN && 0 < m@pre && 0 < n@pre && m@pre + 1 < n@pre && (j == 0 + 1) * (m == m@pre) * (n == n@pre) * (k == 0) * (i == 0)
Loop Condition: k < j
Updated Loop Conditions: ['0 < 0 + 1']
Global Unchanged Variables ['j', 'm', 'n', 'i']
Non Inductive Variables []
[{'j': '0 + 1', 'm': 'm@pre', 'n': 'n@pre', 'k': '0', 'i': '0'}]
['0 >= 0 && retval_38 != 0 && retval_38 <= INT_MAX && retval_38 > INT_MIN && 0 < m@pre && 0 < n@pre && m@pre + 1 < n@pre']

int unknown();

/*@ requires m + 1 < n; */
void foo(int i,int j,int k,int n,int m) {

  i = 0;
  for (i = 0; i < n; i += 4) {
    j = i;
    for (j = i; j < m;) {
        
      if (unknown()) {
        /*@ assert j >= 0;*/
        j++;
        k = 0;
        
                
        /* >>> LOOP INVARIANT TO FILL <<< */
        
                /*@
                */
                while (k < j) {
          k++;
        }
                
      } else {
        /*@ assert n + j + 5 > i;*/
        j += 2;
      }
    }
  }
}
SIMPLE
```c
int unknown();

/*@ requires m + 1 < n; */
void foo(int i,int j,int k,int n,int m) {

  i = 0;
  for (i = 0; i < n; i += 4) {
    j = i;
    for (j = i; j < m;) {
        
      if (unknown()) {
        /*@ assert j >= 0;*/
        j++;
        k = 0;
        
                
        /* >>> LOOP INVARIANT TO FILL <<< */
        
                /*@
                loop invariant k >= 0;
                loop invariant k <= j;
                loop invariant j >= i;
                loop invariant j < m;
                */
                while (k < j) {
          k++;
        }
                
      } else {
        /*@ assert n + j + 5 > i;*/
        j += 2;
      }
    }
  }
}
```

int unknown();

/*@ requires m + 1 < n; */
void foo(int i,int j,int k,int n,int m) {

  i = 0;
  for (i = 0; i < n; i += 4) {
    j = i;
    for (j = i; j < m;) {
        
      if (unknown()) {
        /*@ assert j >= 0;*/
        j++;
        k = 0;
        
                
                /*@
                loop invariant k >= 0;
                loop invariant k <= j;
                loop invariant j >= i;
                loop invariant j < m;
                */
                while (k < j) {
          k++;
        }
                
      } else {
        /*@ assert n + j + 5 > i;*/
        j += 2;
      }
    }
  }
}


int unknown();

/*@ requires m + 1 < n; */
void foo(int i,int j,int k,int n,int m) {

  i = 0;
  for (i = 0; i < n; i += 4) {
    j = i;
    for (j = i; j < m;) {
        
      if (unknown()) {
        /*@ assert j >= 0;*/
        j++;
        k = 0;
        
                
                /*@
                loop invariant k >= 0;
                loop invariant k <= j;
                loop invariant j >= i;
                loop invariant j < m;
                */
                while (k < j) {
          k++;
        }
                
      } else {
        /*@ assert n + j + 5 > i;*/
        j += 2;
      }
    }
  }
}

INNER_FLAG: True
Variable Maps: [{'m': 'm@pre', 'n': 'n@pre', 'k': 'k@pre', 'j': '0', 'i': '0'}]
Path conditions: ['0 < n@pre && m@pre + 1 < n@pre']
Pre condition: 0 < n@pre && m@pre + 1 < n@pre && (m == m@pre) * (n == n@pre) * (k == k@pre) * (j == 0) * (i == 0)
Loop Condition: j < m
Updated Loop Conditions: ['0 < m@pre']
Global Unchanged Variables ['m', 'n', 'i']
Non Inductive Variables ['k']
[{'m': 'm@pre', 'n': 'n@pre', 'k': 'k@pre', 'j': '0', 'i': '0'}]
['0 < n@pre && m@pre + 1 < n@pre']

int unknown();

/*@ requires m + 1 < n; */
void foo(int i,int j,int k,int n,int m) {

  i = 0;
  for (i = 0; i < n; i += 4) {
    j = i;
    
                
        /* >>> LOOP INVARIANT TO FILL <<< */
        
                /*@
                */
                for (j = i; j < m;) {
        
      if (unknown()) {
        /*@ assert j >= 0;*/
        j++;
        k = 0;
        
                
                /*@
                loop invariant k >= 0;
                loop invariant k <= j;
                loop invariant j >= i;
                loop invariant j < m;
                */
                while (k < j) {
          k++;
        }
                
      } else {
        /*@ assert n + j + 5 > i;*/
        j += 2;
      }
    }
                
  }
}

SIMPLE
```c
int unknown();

/*@ requires m + 1 < n; */
void foo(int i,int j,int k,int n,int m) {

  i = 0;
  for (i = 0; i < n; i += 4) {
    j = i;
    
                
        /* >>> LOOP INVARIANT TO FILL <<< */
        
                /*@
                loop invariant j >= i;
                loop invariant j < m;
                loop invariant k >= 0;
                loop invariant k <= j;
                */
                for (j = i; j < m;) {
        
      if (unknown()) {
        /*@ assert j >= 0;*/
        j++;
        k = 0;
        
                
                /*@
                loop invariant k >= 0;
                loop invariant k <= j;
                loop invariant j >= i;
                loop invariant j < m;
                */
                while (k < j) {
          k++;
        }
                
      } else {
        /*@ assert n + j + 5 > i;*/
        j += 2;
      }
    }
                
  }
}
```

int unknown();

/*@ requires m + 1 < n; */
void foo(int i,int j,int k,int n,int m) {

  i = 0;
  for (i = 0; i < n; i += 4) {
    j = i;
    
                
                /*@
                loop invariant j >= i;
                loop invariant j < m;
                loop invariant k >= 0;
                loop invariant k <= j;
                */
                for (j = i; j < m;) {
        
      if (unknown()) {
        /*@ assert j >= 0;*/
        j++;
        k = 0;
        
                
                /*@
                loop invariant k >= 0;
                loop invariant k <= j;
                loop invariant j >= i;
                loop invariant j < m;
                */
                while (k < j) {
          k++;
        }
                
      } else {
        /*@ assert n + j + 5 > i;*/
        j += 2;
      }
    }
                
  }
}


int unknown();

/*@ requires m + 1 < n; */
void foo(int i,int j,int k,int n,int m) {

  i = 0;
  for (i = 0; i < n; i += 4) {
    j = i;
    
                
                /*@
                loop invariant j >= i;
                loop invariant j < m;
                loop invariant k >= 0;
                loop invariant k <= j;
                */
                for (j = i; j < m;) {
        
      if (unknown()) {
        /*@ assert j >= 0;*/
        j++;
        k = 0;
        
                
                /*@
                loop invariant k >= 0;
                loop invariant k <= j;
                loop invariant j >= i;
                loop invariant j < m;
                */
                while (k < j) {
          k++;
        }
                
      } else {
        /*@ assert n + j + 5 > i;*/
        j += 2;
      }
    }
                
  }
}

INNER_FLAG: False
Variable Maps: [{'m': 'm@pre', 'n': 'n@pre', 'k': 'k@pre', 'j': 'j@pre', 'i': '0'}]
Path conditions: ['m@pre + 1 < n@pre']
Pre condition: m@pre + 1 < n@pre && (m == m@pre) * (n == n@pre) * (k == k@pre) * (j == j@pre) * (i == 0)
Loop Condition: i < n
Updated Loop Conditions: ['0 < n@pre']
Global Unchanged Variables ['m', 'n']
Non Inductive Variables ['j', 'k']
[{'m': 'm@pre', 'n': 'n@pre', 'k': 'k@pre', 'j': 'j@pre', 'i': '0'}]
['m@pre + 1 < n@pre']

                
        /* >>> LOOP INVARIANT TO FILL <<< */
        
                /*@
          loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> (m == \at(m, Pre));
          loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> (n == \at(n, Pre));
                */
                for (i = 0; i < n; i += 4) {
    j = i;
    
                
                /*@
                loop invariant j >= i;
                loop invariant j < m;
                loop invariant k >= 0;
                loop invariant k <= j;
                */
                for (j = i; j < m;) {
        
      if (unknown()) {
        /*@ assert j >= 0;*/
        j++;
        k = 0;
        
                
                /*@
                loop invariant k >= 0;
                loop invariant k <= j;
                loop invariant j >= i;
                loop invariant j < m;
                */
                while (k < j) {
          k++;
        }
                
      } else {
        /*@ assert n + j + 5 > i;*/
        j += 2;
      }
    }
                
  }
                

                
        /* >>> LOOP INVARIANT TO FILL <<< */
        
                /*@
          loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (PLACE_HOLDER_i))) ;
          loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (PLACE_HOLDER_j))) ;
          loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (PLACE_HOLDER_k))) ;
          loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((!(0 < \at(n, Pre))) ==> ((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)));
          loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> (m == \at(m, Pre));
          loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> (n == \at(n, Pre));
                */
                for (i = 0; i < n; i += 4) {
    j = i;
    
                
                /*@
                loop invariant j >= i;
                loop invariant j < m;
                loop invariant k >= 0;
                loop invariant k <= j;
                */
                for (j = i; j < m;) {
        
      if (unknown()) {
        /*@ assert j >= 0;*/
        j++;
        k = 0;
        
                
                /*@
                loop invariant k >= 0;
                loop invariant k <= j;
                loop invariant j >= i;
                loop invariant j < m;
                */
                while (k < j) {
          k++;
        }
                
      } else {
        /*@ assert n + j + 5 > i;*/
        j += 2;
      }
    }
                
  }
                

int unknown();

/*@ requires m + 1 < n; */
void foo(int i,int j,int k,int n,int m) {

  i = 0;
  
                
        /* >>> LOOP INVARIANT TO FILL <<< */
        
                /*@
          loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (PLACE_HOLDER_i))) ;
          loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (PLACE_HOLDER_j))) ;
          loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (PLACE_HOLDER_k))) ;
          loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((!(0 < \at(n, Pre))) ==> ((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)));
          loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> (m == \at(m, Pre));
          loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> (n == \at(n, Pre));
                */
                for (i = 0; i < n; i += 4) {
    j = i;
    
                
                /*@
                loop invariant j >= i;
                loop invariant j < m;
                loop invariant k >= 0;
                loop invariant k <= j;
                */
                for (j = i; j < m;) {
        
      if (unknown()) {
        /*@ assert j >= 0;*/
        j++;
        k = 0;
        
                
                /*@
                loop invariant k >= 0;
                loop invariant k <= j;
                loop invariant j >= i;
                loop invariant j < m;
                */
                while (k < j) {
          k++;
        }
                
      } else {
        /*@ assert n + j + 5 > i;*/
        j += 2;
      }
    }
                
  }
                
}

```c
/* >>> LOOP INVARIANT TO FILL <<< */

/*@
          loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (0 <= i < n)));
          loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (j < m)));
          loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (k <= j)));
          loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((!(0 < \at(n, Pre))) ==> ((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)));
          loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> (m == \at(m, Pre));
          loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> (n == \at(n, Pre));
                */
```

/* >>> LOOP INVARIANT TO FILL <<< */

/*@
          loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (0 <= i < n)));
          loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (j < m)));
          loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (k <= j)));
          loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((!(0 < \at(n, Pre))) ==> ((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)));
          loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> (m == \at(m, Pre));
          loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> (n == \at(n, Pre));
                */


/* >>> LOOP INVARIANT TO FILL <<< */

/*@
          loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (0 <= i < n)));
          loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (j < m)));
          loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (k <= j)));
          loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((!(0 < \at(n, Pre))) ==> ((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)));
          loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> (m == \at(m, Pre));
          loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> (n == \at(n, Pre));
                */

syntax Error
[kernel] Parsing output/031.c (with preprocessing)
[kernel] output/031.c:11: 
  syntax error:
  Location: line 11, column 0
  9               loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> (m == \at(m, Pre));
  10              loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> (n == \at(n, Pre));
  11                    */
        ^
[kernel] Frama-C aborted: invalid user input.

after repair

/* >>> LOOP INVARIANT TO FILL <<< */

/*@
          loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (0 <= i && i < n)));
          loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (j < m)));
          loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (k <= j)));
          loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((!(0 < \at(n, Pre))) ==> ((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)));
          loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> (m == \at(m, Pre));
          loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> (n == \at(n, Pre));
*/

syntax Error
[kernel] Parsing output/031.c (with preprocessing)
[kernel] output/031.c:10: 
  syntax error:
  Location: line 10, column 80
  8               loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((!(0 < \at(n, Pre))) ==> ((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)));
  9               loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> (m == \at(m, Pre));
  10              loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> (n == \at(n, Pre));
                                                                                        ^
  11    */
[kernel] Frama-C aborted: invalid user input.

syntax Error
[kernel] Parsing output/031.c (with preprocessing)
[kernel] output/031.c:10: 
  syntax error:
  Location: line 10, column 80
  8               loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((!(0 < \at(n, Pre))) ==> ((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)));
  9               loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> (m == \at(m, Pre));
  10              loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> (n == \at(n, Pre));
                                                                                        ^
  11    */
[kernel] Frama-C aborted: invalid user input.


/* >>> LOOP INVARIANT TO FILL <<< */

/*@
          loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (0 <= i && i < n)));
          loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (j < m)));
          loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (k <= j)));
          loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((!(0 < \at(n, Pre))) ==> ((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)));
          loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> (m == \at(m, Pre));
          loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> (n == \at(n, Pre));
*/
转换后

/* >>> LOOP INVARIANT TO FILL <<< */

/*@ Inv
    ((m@pre + 1 < n@pre) => ((0 < n@pre) => (((m == m@pre)&&(n == n@pre)&&(k == k@pre)&&(j == j@pre)&&(i == 0)) || (0 <= i && i < n)))) &&
((m@pre + 1 < n@pre) => ((0 < n@pre) => (((m == m@pre)&&(n == n@pre)&&(k == k@pre)&&(j == j@pre)&&(i == 0)) || (j < m)))) &&
((m@pre + 1 < n@pre) => ((0 < n@pre) => (((m == m@pre)&&(n == n@pre)&&(k == k@pre)&&(j == j@pre)&&(i == 0)) || (k <= j)))) &&
((m@pre + 1 < n@pre) => ((!(0 < n@pre)) => ((m == m@pre)&&(n == n@pre)&&(k == k@pre)&&(j == j@pre)&&(i == 0)))) &&
((m@pre + 1 < n@pre) => (m == m@pre)) &&
((m@pre + 1 < n@pre) => (n == n@pre))
    */
syntax Error
[kernel] Parsing output/031.c (with preprocessing)
[kernel] output/031.c:10: 
  syntax error:
  Location: line 10, column 80
  8               loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((!(0 < \at(n, Pre))) ==> ((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)));
  9               loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> (m == \at(m, Pre));
  10              loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> (n == \at(n, Pre));
                                                                                        ^
  11    */
[kernel] Frama-C aborted: invalid user input.

after repair

    
/* >>> LOOP INVARIANT TO FILL <<< */

/*@ 
    loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (0 <= i && i < \at(n, Pre))));
    loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (j < \at(m, Pre)));
    loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (k <= j)));
    loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((!(0 < \at(n, Pre))) ==> ((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)));
    loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> (\at(m, Pre) == \at(m, Pre));
    loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> (\at(n, Pre) == \at(n, Pre));
    */
    
syntax Error
[kernel] Parsing output/031.c (with preprocessing)
[kernel:annot-error] output/031.c:7: Warning: unexpected token ';'
[kernel] User Error: warning annot-error treated as fatal error.
[kernel] Frama-C aborted: invalid user input.

syntax Error
[kernel] Parsing output/031.c (with preprocessing)
[kernel:annot-error] output/031.c:7: Warning: unexpected token ';'
[kernel] User Error: warning annot-error treated as fatal error.
[kernel] Frama-C aborted: invalid user input.


    
/* >>> LOOP INVARIANT TO FILL <<< */

/*@ 
    loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (0 <= i && i < \at(n, Pre))));
    loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (j < \at(m, Pre)));
    loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (k <= j)));
    loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((!(0 < \at(n, Pre))) ==> ((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)));
    loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> (\at(m, Pre) == \at(m, Pre));
    loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> (\at(n, Pre) == \at(n, Pre));
    */
   
转换后

    
/* >>> LOOP INVARIANT TO FILL <<< */

/*@ Inv
    ((m@pre + 1 < n@pre) => ((0 < n@pre) => (((m == m@pre)&&(n == n@pre)&&(k == k@pre)&&(j == j@pre)&&(i == 0)) || (0 <= i && i < n@pre)))) &&
((m@pre + 1 < n@pre) => ((0 < n@pre) => (((m == m@pre)&&(n == n@pre)&&(k == k@pre)&&(j == j@pre)&&(i == 0)) || (j < m@pre))) &&
((m@pre + 1 < n@pre) => ((0 < n@pre) => (((m == m@pre)&&(n == n@pre)&&(k == k@pre)&&(j == j@pre)&&(i == 0)) || (k <= j)))) &&
((m@pre + 1 < n@pre) => ((!(0 < n@pre)) => ((m == m@pre)&&(n == n@pre)&&(k == k@pre)&&(j == j@pre)&&(i == 0)))) &&
((m@pre + 1 < n@pre) => (m@pre == m@pre)) &&
((m@pre + 1 < n@pre) => (n@pre == n@pre))
    */
   
syntax Error
[kernel] Parsing output/031.c (with preprocessing)
[kernel:annot-error] output/031.c:7: Warning: unexpected token ';'
[kernel] User Error: warning annot-error treated as fatal error.
[kernel] Frama-C aborted: invalid user input.

after repair

/* >>> LOOP INVARIANT TO FILL <<< */

/*@ Inv
    ((\at(m, Pre) + 1 < \at(n, Pre)) => ((0 < \at(n, Pre)) => (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (0 <= i && i < \at(n, Pre)))) &&
((\at(m, Pre) + 1 < \at(n, Pre)) => ((0 < \at(n, Pre)) => (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (j < \at(m, Pre)))) &&
((\at(m, Pre) + 1 < \at(n, Pre)) => ((0 < \at(n, Pre)) => (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (k <= j)))) &&
((\at(m, Pre) + 1 < \at(n, Pre)) => ((!(0 < \at(n, Pre))) => ((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)))) &&
((\at(m, Pre) + 1 < \at(n, Pre)) => (m == \at(m, Pre))) &&
((\at(m, Pre) + 1 < \at(n, Pre)) => (n == \at(n, Pre)))
    */
   
syntax Error
[kernel] Parsing output/031.c (with preprocessing)
[kernel:annot-error] output/031.c:5: Warning: unexpected token '('
[kernel] User Error: warning annot-error treated as fatal error.
[kernel] Frama-C aborted: invalid user input.

syntax Error
[kernel] Parsing output/031.c (with preprocessing)
[kernel:annot-error] output/031.c:5: Warning: unexpected token '('
[kernel] User Error: warning annot-error treated as fatal error.
[kernel] Frama-C aborted: invalid user input.


/* >>> LOOP INVARIANT TO FILL <<< */

/*@ Inv
    ((\at(m, Pre) + 1 < \at(n, Pre)) => ((0 < \at(n, Pre)) => (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (0 <= i && i < \at(n, Pre)))) &&
((\at(m, Pre) + 1 < \at(n, Pre)) => ((0 < \at(n, Pre)) => (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (j < \at(m, Pre)))) &&
((\at(m, Pre) + 1 < \at(n, Pre)) => ((0 < \at(n, Pre)) => (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (k <= j)))) &&
((\at(m, Pre) + 1 < \at(n, Pre)) => ((!(0 < \at(n, Pre))) => ((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)))) &&
((\at(m, Pre) + 1 < \at(n, Pre)) => (m == \at(m, Pre))) &&
((\at(m, Pre) + 1 < \at(n, Pre)) => (n == \at(n, Pre)))
    */
  
转换后

/* >>> LOOP INVARIANT TO FILL <<< */

/*@ Inv
    (Inv
    ((m@pre + 1 < n@pre) => ((0 < n@pre) => (((m == m@pre)&&(n == n@pre)&&(k == k@pre)&&(j == j@pre)&&(i == 0)) || (0 <= i && i < n@pre))) &&
((m@pre + 1 < n@pre) => ((0 < n@pre) => (((m == m@pre)&&(n == n@pre)&&(k == k@pre)&&(j == j@pre)&&(i == 0)) || (j < m@pre))) &&
((m@pre + 1 < n@pre) => ((0 < n@pre) => (((m == m@pre)&&(n == n@pre)&&(k == k@pre)&&(j == j@pre)&&(i == 0)) || (k <= j)))) &&
((m@pre + 1 < n@pre) => ((!(0 < n@pre)) => ((m == m@pre)&&(n == n@pre)&&(k == k@pre)&&(j == j@pre)&&(i == 0)))) &&
((m@pre + 1 < n@pre) => (m == m@pre)) &&
((m@pre + 1 < n@pre) => (n == n@pre)))
    */
  
syntax Error
[kernel] Parsing output/031.c (with preprocessing)
[kernel:annot-error] output/031.c:5: Warning: unexpected token '('
[kernel] User Error: warning annot-error treated as fatal error.
[kernel] Frama-C aborted: invalid user input.

syntax Error
[kernel] Parsing output/031.c (with preprocessing)
[kernel:annot-error] output/031.c:5: Warning: unexpected token '('
[kernel] User Error: warning annot-error treated as fatal error.
[kernel] Frama-C aborted: invalid user input.

RESULT PASS_1
0
0
0
RESULT PASS_3
0
0
0
RESULT PASS_5
0
0
0
TRY TIME: 2
[(189, 464, 0), (234, 460, 1), (346, 386, 2)]
[(189, 464, 0), (234, 460, 1), (346, 386, 2)]
[(189, 464, 0), (234, 460, 1), (346, 386, 2)]
[(189, 464, 0), (234, 460, 1), (346, 386, 2)]
Loop 2 : Inner
Loop 1 : Inner
Loop 0 : Outer
Sorted indices: [2, 1, 0]
File found: ../sac_c_parser/test/../ip_postcond/goal/031_goal.v. Deleting the file.
File found: ../sac_c_parser/test/../ip_postcond/goal/031_proof_auto.v. Deleting the file.
File found: ../sac_c_parser/test/../ip_postcond/goal/031_proof_manual.v. Deleting the file.
LoopEntry_0:
m@pre + 1 < n@pre && (m == m@pre) * (n == n@pre) * (k == k@pre) * (j == j@pre) * (i == 0)
LoopEntry_1:
0 < n@pre && m@pre + 1 < n@pre && (m == m@pre) * (n == n@pre) * (k == k@pre) * (j == 0) * (i == 0)
LoopEntry_2:
0 >= 0 && retval_38 != 0 && retval_38 <= INT_MAX && retval_38 > INT_MIN && 0 < m@pre && 0 < n@pre && m@pre + 1 < n@pre && (j == 0 + 1) * (m == m@pre) * (n == n@pre) * (k == 0) * (i == 0)

[(0, 'm@pre + 1 < n@pre && (m == m@pre) * (n == n@pre) * (k == k@pre) * (j == j@pre) * (i == 0)'), (1, '0 < n@pre && m@pre + 1 < n@pre && (m == m@pre) * (n == n@pre) * (k == k@pre) * (j == 0) * (i == 0)'), (2, '0 >= 0 && retval_38 != 0 && retval_38 <= INT_MAX && retval_38 > INT_MIN && 0 < m@pre && 0 < n@pre && m@pre + 1 < n@pre && (j == 0 + 1) * (m == m@pre) * (n == n@pre) * (k == 0) * (i == 0)')]
Successfully generated loop/031.json
INNER_FLAG: True
Variable Maps: [{'j': '0 + 1', 'm': 'm@pre', 'n': 'n@pre', 'k': '0', 'i': '0'}]
Path conditions: ['0 >= 0 && retval_38 != 0 && retval_38 <= INT_MAX && retval_38 > INT_MIN && 0 < m@pre && 0 < n@pre && m@pre + 1 < n@pre']
Pre condition: 0 >= 0 && retval_38 != 0 && retval_38 <= INT_MAX && retval_38 > INT_MIN && 0 < m@pre && 0 < n@pre && m@pre + 1 < n@pre && (j == 0 + 1) * (m == m@pre) * (n == n@pre) * (k == 0) * (i == 0)
Loop Condition: k < j
Updated Loop Conditions: ['0 < 0 + 1']
Global Unchanged Variables ['j', 'm', 'n', 'i']
Non Inductive Variables []
[{'j': '0 + 1', 'm': 'm@pre', 'n': 'n@pre', 'k': '0', 'i': '0'}]
['0 >= 0 && retval_38 != 0 && retval_38 <= INT_MAX && retval_38 > INT_MIN && 0 < m@pre && 0 < n@pre && m@pre + 1 < n@pre']

int unknown();

/*@ requires m + 1 < n; */
void foo(int i,int j,int k,int n,int m) {

  i = 0;
  for (i = 0; i < n; i += 4) {
    j = i;
    for (j = i; j < m;) {
        
      if (unknown()) {
        /*@ assert j >= 0;*/
        j++;
        k = 0;
        
                
        /* >>> LOOP INVARIANT TO FILL <<< */
        
                /*@
                */
                while (k < j) {
          k++;
        }
                
      } else {
        /*@ assert n + j + 5 > i;*/
        j += 2;
      }
    }
  }
}
SIMPLE
```c
int unknown();

/*@ requires m + 1 < n; */
void foo(int i,int j,int k,int n,int m) {

  i = 0;
  for (i = 0; i < n; i += 4) {
    j = i;
    for (j = i; j < m;) {
        
      if (unknown()) {
        /*@ assert j >= 0;*/
        j++;
        k = 0;
        
        /* >>> LOOP INVARIANT TO FILL <<< */
        
                /*@
                loop invariant 0 <= k <= j;
                loop invariant j <= m;
                loop invariant j >= i;
                */
                while (k < j) {
          k++;
        }
                
      } else {
        /*@ assert n + j + 5 > i;*/
        j += 2;
      }
    }
  }
}
```

int unknown();

/*@ requires m + 1 < n; */
void foo(int i,int j,int k,int n,int m) {

  i = 0;
  for (i = 0; i < n; i += 4) {
    j = i;
    for (j = i; j < m;) {
        
      if (unknown()) {
        /*@ assert j >= 0;*/
        j++;
        k = 0;
        
                /*@
                loop invariant 0 <= k <= j;
                loop invariant j <= m;
                loop invariant j >= i;
                */
                while (k < j) {
          k++;
        }
                
      } else {
        /*@ assert n + j + 5 > i;*/
        j += 2;
      }
    }
  }
}


int unknown();

/*@ requires m + 1 < n; */
void foo(int i,int j,int k,int n,int m) {

  i = 0;
  for (i = 0; i < n; i += 4) {
    j = i;
    for (j = i; j < m;) {
        
      if (unknown()) {
        /*@ assert j >= 0;*/
        j++;
        k = 0;
        
                /*@
                loop invariant 0 <= k <= j;
                loop invariant j <= m;
                loop invariant j >= i;
                */
                while (k < j) {
          k++;
        }
                
      } else {
        /*@ assert n + j + 5 > i;*/
        j += 2;
      }
    }
  }
}

INNER_FLAG: True
Variable Maps: [{'m': 'm@pre', 'n': 'n@pre', 'k': 'k@pre', 'j': '0', 'i': '0'}]
Path conditions: ['0 < n@pre && m@pre + 1 < n@pre']
Pre condition: 0 < n@pre && m@pre + 1 < n@pre && (m == m@pre) * (n == n@pre) * (k == k@pre) * (j == 0) * (i == 0)
Loop Condition: j < m
Updated Loop Conditions: ['0 < m@pre']
Global Unchanged Variables ['m', 'n', 'i']
Non Inductive Variables ['k']
[{'m': 'm@pre', 'n': 'n@pre', 'k': 'k@pre', 'j': '0', 'i': '0'}]
['0 < n@pre && m@pre + 1 < n@pre']

int unknown();

/*@ requires m + 1 < n; */
void foo(int i,int j,int k,int n,int m) {

  i = 0;
  for (i = 0; i < n; i += 4) {
    j = i;
    
                
        /* >>> LOOP INVARIANT TO FILL <<< */
        
                /*@
                */
                for (j = i; j < m;) {
        
      if (unknown()) {
        /*@ assert j >= 0;*/
        j++;
        k = 0;
        
                /*@
                loop invariant 0 <= k <= j;
                loop invariant j <= m;
                loop invariant j >= i;
                */
                while (k < j) {
          k++;
        }
                
      } else {
        /*@ assert n + j + 5 > i;*/
        j += 2;
      }
    }
                
  }
}

SIMPLE
```c
int unknown();

/*@ requires m + 1 < n; */
void foo(int i,int j,int k,int n,int m) {

  i = 0;
  for (i = 0; i < n; i += 4) {
    j = i;
    
                
        /* >>> LOOP INVARIANT TO FILL <<< */
        
                /*@
                loop invariant i <= j < m;
                loop invariant j >= i;
                loop invariant j < m;
                */
                for (j = i; j < m;) {
        
      if (unknown()) {
        /*@ assert j >= 0;*/
        j++;
        k = 0;
        
                /*@
                loop invariant 0 <= k <= j;
                loop invariant j <= m;
                loop invariant j >= i;
                */
                while (k < j) {
          k++;
        }
                
      } else {
        /*@ assert n + j + 5 > i;*/
        j += 2;
      }
    }
                
  }
}
```

int unknown();

/*@ requires m + 1 < n; */
void foo(int i,int j,int k,int n,int m) {

  i = 0;
  for (i = 0; i < n; i += 4) {
    j = i;
    
                
                /*@
                loop invariant i <= j < m;
                loop invariant j >= i;
                loop invariant j < m;
                */
                for (j = i; j < m;) {
        
      if (unknown()) {
        /*@ assert j >= 0;*/
        j++;
        k = 0;
        
                /*@
                loop invariant 0 <= k <= j;
                loop invariant j <= m;
                loop invariant j >= i;
                */
                while (k < j) {
          k++;
        }
                
      } else {
        /*@ assert n + j + 5 > i;*/
        j += 2;
      }
    }
                
  }
}


int unknown();

/*@ requires m + 1 < n; */
void foo(int i,int j,int k,int n,int m) {

  i = 0;
  for (i = 0; i < n; i += 4) {
    j = i;
    
                
                /*@
                loop invariant i <= j < m;
                loop invariant j >= i;
                loop invariant j < m;
                */
                for (j = i; j < m;) {
        
      if (unknown()) {
        /*@ assert j >= 0;*/
        j++;
        k = 0;
        
                /*@
                loop invariant 0 <= k <= j;
                loop invariant j <= m;
                loop invariant j >= i;
                */
                while (k < j) {
          k++;
        }
                
      } else {
        /*@ assert n + j + 5 > i;*/
        j += 2;
      }
    }
                
  }
}

INNER_FLAG: False
Variable Maps: [{'m': 'm@pre', 'n': 'n@pre', 'k': 'k@pre', 'j': 'j@pre', 'i': '0'}]
Path conditions: ['m@pre + 1 < n@pre']
Pre condition: m@pre + 1 < n@pre && (m == m@pre) * (n == n@pre) * (k == k@pre) * (j == j@pre) * (i == 0)
Loop Condition: i < n
Updated Loop Conditions: ['0 < n@pre']
Global Unchanged Variables ['m', 'n']
Non Inductive Variables ['j', 'k']
[{'m': 'm@pre', 'n': 'n@pre', 'k': 'k@pre', 'j': 'j@pre', 'i': '0'}]
['m@pre + 1 < n@pre']

                
        /* >>> LOOP INVARIANT TO FILL <<< */
        
                /*@
          loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> (m == \at(m, Pre));
          loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> (n == \at(n, Pre));
                */
                for (i = 0; i < n; i += 4) {
    j = i;
    
                
                /*@
                loop invariant i <= j < m;
                loop invariant j >= i;
                loop invariant j < m;
                */
                for (j = i; j < m;) {
        
      if (unknown()) {
        /*@ assert j >= 0;*/
        j++;
        k = 0;
        
                /*@
                loop invariant 0 <= k <= j;
                loop invariant j <= m;
                loop invariant j >= i;
                */
                while (k < j) {
          k++;
        }
                
      } else {
        /*@ assert n + j + 5 > i;*/
        j += 2;
      }
    }
                
  }
                

                
        /* >>> LOOP INVARIANT TO FILL <<< */
        
                /*@
          loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (PLACE_HOLDER_i))) ;
          loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (PLACE_HOLDER_j))) ;
          loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (PLACE_HOLDER_k))) ;
          loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((!(0 < \at(n, Pre))) ==> ((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)));
          loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> (m == \at(m, Pre));
          loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> (n == \at(n, Pre));
                */
                for (i = 0; i < n; i += 4) {
    j = i;
    
                
                /*@
                loop invariant i <= j < m;
                loop invariant j >= i;
                loop invariant j < m;
                */
                for (j = i; j < m;) {
        
      if (unknown()) {
        /*@ assert j >= 0;*/
        j++;
        k = 0;
        
                /*@
                loop invariant 0 <= k <= j;
                loop invariant j <= m;
                loop invariant j >= i;
                */
                while (k < j) {
          k++;
        }
                
      } else {
        /*@ assert n + j + 5 > i;*/
        j += 2;
      }
    }
                
  }
                

int unknown();

/*@ requires m + 1 < n; */
void foo(int i,int j,int k,int n,int m) {

  i = 0;
  
                
        /* >>> LOOP INVARIANT TO FILL <<< */
        
                /*@
          loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (PLACE_HOLDER_i))) ;
          loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (PLACE_HOLDER_j))) ;
          loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (PLACE_HOLDER_k))) ;
          loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((!(0 < \at(n, Pre))) ==> ((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)));
          loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> (m == \at(m, Pre));
          loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> (n == \at(n, Pre));
                */
                for (i = 0; i < n; i += 4) {
    j = i;
    
                
                /*@
                loop invariant i <= j < m;
                loop invariant j >= i;
                loop invariant j < m;
                */
                for (j = i; j < m;) {
        
      if (unknown()) {
        /*@ assert j >= 0;*/
        j++;
        k = 0;
        
                /*@
                loop invariant 0 <= k <= j;
                loop invariant j <= m;
                loop invariant j >= i;
                */
                while (k < j) {
          k++;
        }
                
      } else {
        /*@ assert n + j + 5 > i;*/
        j += 2;
      }
    }
                
  }
                
}

```c
/* >>> LOOP INVARIANT TO FILL <<< */

/*@
          loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (i % 4 == 0 && i < n))) ;
          loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (j < m))) ;
          loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (j >= i))) ;
          loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((!(0 < \at(n, Pre))) ==> ((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)));
          loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> (m == \at(m, Pre));
          loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> (n == \at(n, Pre));
                */
                for (i = 0; i < n; i += 4) {
    j = i;
    
                
                /*@
                loop invariant i <= j < m;
                loop invariant j >= i;
                loop invariant j < m;
                */
                for (j = i; j < m;) {
        
      if (unknown()) {
        /*@ assert j >= 0;*/
        j++;
        k = 0;
        
                /*@
                loop invariant 0 <= k <= j;
                loop invariant j <= m;
                loop invariant j >= i;
                */
                while (k < j) {
          k++;
        }
                
      } else {
        /*@ assert n + j + 5 > i;*/
        j += 2;
      }
    }
                
  }
                
}
```

/* >>> LOOP INVARIANT TO FILL <<< */

/*@
          loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (i % 4 == 0 && i < n))) ;
          loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (j < m))) ;
          loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (j >= i))) ;
          loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((!(0 < \at(n, Pre))) ==> ((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)));
          loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> (m == \at(m, Pre));
          loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> (n == \at(n, Pre));
                */
                for (i = 0; i < n; i += 4) {
    j = i;
    
                
                /*@
                loop invariant i <= j < m;
                loop invariant j >= i;
                loop invariant j < m;
                */
                for (j = i; j < m;) {
        
      if (unknown()) {
        /*@ assert j >= 0;*/
        j++;
        k = 0;
        
                /*@
                loop invariant 0 <= k <= j;
                loop invariant j <= m;
                loop invariant j >= i;
                */
                while (k < j) {
          k++;
        }
                
      } else {
        /*@ assert n + j + 5 > i;*/
        j += 2;
      }
    }
                
  }
                
}


/* >>> LOOP INVARIANT TO FILL <<< */

/*@
          loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (i % 4 == 0 && i < n))) ;
          loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (j < m))) ;
          loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (j >= i))) ;
          loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((!(0 < \at(n, Pre))) ==> ((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)));
          loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> (m == \at(m, Pre));
          loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> (n == \at(n, Pre));
                */
                for (i = 0; i < n; i += 4) {
    j = i;
    
                
                /*@
                loop invariant i <= j < m;
                loop invariant j >= i;
                loop invariant j < m;
                */
                for (j = i; j < m;) {
        
      if (unknown()) {
        /*@ assert j >= 0;*/
        j++;
        k = 0;
        
                /*@
                loop invariant 0 <= k <= j;
                loop invariant j <= m;
                loop invariant j >= i;
                */
                while (k < j) {
          k++;
        }
                
      } else {
        /*@ assert n + j + 5 > i;*/
        j += 2;
      }
    }
                
  }
                
}

syntax Error
[kernel] Parsing output/031.c (with preprocessing)
[kernel] output/031.c:11: 
  syntax error:
  Location: line 11, column 0
  9               loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> (m == \at(m, Pre));
  10              loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> (n == \at(n, Pre));
  11                    */
        ^
  12                    for (i = 0; i < n; i += 4) {
  13        j = i;
[kernel] Frama-C aborted: invalid user input.

after repair

/* >>> LOOP INVARIANT TO FILL <<< */

/*@
          loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (i % 4 == 0 && i < n))) ;
          loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (j < m))) ;
          loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (j >= i))) ;
          loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((!(0 < \at(n, Pre))) ==> ((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)));
          loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> (m == \at(m, Pre));
          loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> (n == \at(n, Pre));
                */
                for (i = 0; i < n; i += 4) {
    j = i;
    
                
                /*@
                loop invariant i <= j < m;
                loop invariant j >= i;
                loop invariant j < m;
                */
                for (j = i; j < m;) {
        
      if (unknown()) {
        /*@ assert j >= 0;*/
        j++;
        k = 0;
        
                /*@
                loop invariant 0 <= k <= j;
                loop invariant j <= m;
                loop invariant j >= i;
                */
                while (k < j) {
          k++;
        }
                
      } else {
        /*@ assert n + j + 5 > i;*/
        j += 2;
      }
    }
                
  }
                
}

syntax Error
[kernel] Parsing output/031.c (with preprocessing)
[kernel] output/031.c:11: 
  syntax error:
  Location: line 11, column 0
  9               loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> (m == \at(m, Pre));
  10              loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> (n == \at(n, Pre));
  11                    */
        ^
  12                    for (i = 0; i < n; i += 4) {
  13        j = i;
[kernel] Frama-C aborted: invalid user input.

syntax Error
[kernel] Parsing output/031.c (with preprocessing)
[kernel] output/031.c:11: 
  syntax error:
  Location: line 11, column 0
  9               loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> (m == \at(m, Pre));
  10              loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> (n == \at(n, Pre));
  11                    */
        ^
  12                    for (i = 0; i < n; i += 4) {
  13        j = i;
[kernel] Frama-C aborted: invalid user input.

/*@
          loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (i % 4 == 0 && i < n))) ;
          loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (j < m))) ;
          loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (j >= i))) ;
          loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((!(0 < \at(n, Pre))) ==> ((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)));
          loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> (m == \at(m, Pre));
          loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> (n == \at(n, Pre));
                */
                for (i = 0; i < n; i += 4) {
    j = i;
    
                
                /*@
                loop invariant i <= j < m;
                loop invariant j >= i;
                loop invariant j < m;
                */
                for (j = i; j < m;) {
        
      if (unknown()) {
        /*@ assert j >= 0;*/
        j++;
        k = 0;
        
                /*@
                loop invariant 0 <= k <= j;
                loop invariant j <= m;
                loop invariant j >= i;
                */
                while (k < j) {
          k++;
        }
                
      } else {
        /*@ assert n + j + 5 > i;*/
        j += 2;
      }
    }
                
  }
转换后
/*@ Inv
    ((m@pre + 1 < n@pre) => ((0 < n@pre) => (((m == m@pre)&&(n == n@pre)&&(k == k@pre)&&(j == j@pre)&&(i == 0)) || (i % 4 == 0 && i < n))) ) &&
((m@pre + 1 < n@pre) => ((0 < n@pre) => (((m == m@pre)&&(n == n@pre)&&(k == k@pre)&&(j == j@pre)&&(i == 0)) || (j < m))) ) &&
((m@pre + 1 < n@pre) => ((0 < n@pre) => (((m == m@pre)&&(n == n@pre)&&(k == k@pre)&&(j == j@pre)&&(i == 0)) || (j >= i))) ) &&
((m@pre + 1 < n@pre) => ((!(0 < n@pre)) => ((m == m@pre)&&(n == n@pre)&&(k == k@pre)&&(j == j@pre)&&(i == 0)))) &&
((m@pre + 1 < n@pre) => (m == m@pre)) &&
((m@pre + 1 < n@pre) => (n == n@pre))
    */
                for (i = 0; i < n; i += 4) {
    j = i;
    
                
                /*@ Inv
    (i <= j && j < m) &&
(j >= i) &&
(j < m)
    */
                for (j = i; j < m;) {
        
      if (unknown()) {
        /*@ Inv
    (assert j >= 0)
    */
        j++;
        k = 0;
        
                /*@ Inv
    (0 <= k && k <= j) &&
(j <= m) &&
(j >= i)
    */
                while (k < j) {
          k++;
        }
                
      } else {
        /*@ Inv
    (assert n + j + 5 > i)
    */
        j += 2;
      }
    }
                
  }
syntax Error
[kernel] Parsing output/031.c (with preprocessing)
[kernel] output/031.c:11: 
  syntax error:
  Location: line 11, column 0
  9               loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> (m == \at(m, Pre));
  10              loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> (n == \at(n, Pre));
  11                    */
        ^
  12                    for (i = 0; i < n; i += 4) {
  13        j = i;
[kernel] Frama-C aborted: invalid user input.

after repair

    /*@ 
    loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (i % 4 == 0 && i < \at(n, Pre)))) ;
    loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (j < \at(m))) ;
    loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (j >= i))) ;
    loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((!(0 < \at(n, Pre))) ==> ((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)));
    loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> (m == \at(m, Pre));
    loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> (n == \at(n, Pre));
    */
                for (i = 0; i < n; i += 4) {
    j = i;
                
                /*@
                loop invariant (i <= j && j < m) &&
                (j >= i) &&
                (j < m)
                */
                for (j = i; j < m;) {
        
      if (unknown()) {
        /*@ assert j >= 0; */
        j++;
        k = 0;
        
                /*@
                loop invariant (0 <= k && k <= j) &&
                (j <= m) &&
                (j >= i)
                */
                while (k < j) {
          k++;
        }
                
      } else {
        /*@ assert n + j + 5 > i; */
        j += 2;
      }
    }
                
  }
    
syntax Error
[kernel] Parsing output/031.c (with preprocessing)
[kernel:annot-error] output/031.c:4: Warning: unexpected token ')'
[kernel] User Error: warning annot-error treated as fatal error.
[kernel] Frama-C aborted: invalid user input.

syntax Error
[kernel] Parsing output/031.c (with preprocessing)
[kernel:annot-error] output/031.c:4: Warning: unexpected token ')'
[kernel] User Error: warning annot-error treated as fatal error.
[kernel] Frama-C aborted: invalid user input.

/*@ 
    loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (i % 4 == 0 && i < \at(n, Pre)))) ;
    loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (j < \at(m))) ;
    loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (j >= i))) ;
    loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((!(0 < \at(n, Pre))) ==> ((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)));
    loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> (m == \at(m, Pre));
    loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> (n == \at(n, Pre));
    */
                for (i = 0; i < n; i += 4) {
    j = i;
                
                /*@
                loop invariant (i <= j && j < m) &&
                (j >= i) &&
                (j < m)
                */
                for (j = i; j < m;) {
        
      if (unknown()) {
        /*@ assert j >= 0; */
        j++;
        k = 0;
        
                /*@
                loop invariant (0 <= k && k <= j) &&
                (j <= m) &&
                (j >= i)
                */
                while (k < j) {
          k++;
        }
                
      } else {
        /*@ assert n + j + 5 > i; */
        j += 2;
      }
    }
                
  }
转换后
/*@ Inv
    ((m@pre + 1 < n@pre) => ((0 < n@pre) => (((m == m@pre)&&(n == n@pre)&&(k == k@pre)&&(j == j@pre)&&(i == 0)) || (i % 4 == 0 && i < n@pre))) ) &&
((m@pre + 1 < n@pre) => ((0 < n@pre) => (((m == m@pre)&&(n == n@pre)&&(k == k@pre)&&(j == j@pre)&&(i == 0)) || (j < \at(m))) ) &&
((m@pre + 1 < n@pre) => ((0 < n@pre) => (((m == m@pre)&&(n == n@pre)&&(k == k@pre)&&(j == j@pre)&&(i == 0)) || (j >= i))) ) &&
((m@pre + 1 < n@pre) => ((!(0 < n@pre)) => ((m == m@pre)&&(n == n@pre)&&(k == k@pre)&&(j == j@pre)&&(i == 0)))) &&
((m@pre + 1 < n@pre) => (m == m@pre)) &&
((m@pre + 1 < n@pre) => (n == n@pre))
    */
                for (i = 0; i < n; i += 4) {
    j = i;
                
                /*@ Inv
    ((i <= j && j < m) &&
                (j >= i) &&
                (j < m))
    */
                for (j = i; j < m;) {
        
      if (unknown()) {
        /*@ Inv
    (assert j >= 0)
    */
        j++;
        k = 0;
        
                /*@ Inv
    ((0 <= k && k <= j) &&
                (j <= m) &&
                (j >= i))
    */
                while (k < j) {
          k++;
        }
                
      } else {
        /*@ Inv
    (assert n + j + 5 > i)
    */
        j += 2;
      }
    }
                
  }
syntax Error
[kernel] Parsing output/031.c (with preprocessing)
[kernel:annot-error] output/031.c:4: Warning: unexpected token ')'
[kernel] User Error: warning annot-error treated as fatal error.
[kernel] Frama-C aborted: invalid user input.

after repair

    /*@ loop invariant
    ((m@pre + 1 < n@pre) => ((0 < n@pre) => (((m == m@pre)&&(n == n@pre)&&(k == k@pre)&&(j == j@pre)&&(i == 0)) || (i % 4 == 0 && i < n@pre)))) &&
    ((m@pre + 1 < n@pre) => ((0 < n@pre) => (((m == m@pre)&&(n == n@pre)&&(k == k@pre)&&(j == j@pre)&&(i == 0)) || (j < \at(m)))) &&
    ((m@pre + 1 < n@pre) => ((0 < n@pre) => (((m == m@pre)&&(n == n@pre)&&(k == k@pre)&&(j == j@pre)&&(i == 0)) || (j >= i)))) &&
    ((m@pre + 1 < n@pre) => ((!(0 < n@pre)) => ((m == m@pre)&&(n == n@pre)&&(k == k@pre)&&(j == j@pre)&&(i == 0)))) &&
    ((m@pre + 1 < n@pre) => (m == m@pre)) &&
    ((m@pre + 1 < n@pre) => (n == n@pre))
    */
                for (i = 0; i < n; i += 4) {
    j = i;
                
                /*@ loop invariant
    ((i <= j && j < m) &&
                (j >= i) &&
                (j < m))
    */
                for (j = i; j < m;) {
        
      if (unknown()) {
        /*@ assert j >= 0;*/
        j++;
        k = 0;
        
                /*@ loop invariant
    ((0 <= k && k <= j) &&
                (j <= m) &&
                (j >= i))
    */
                while (k < j) {
          k++;
        }
                
      } else {
        /*@ assert n + j + 5 > i;*/
        j += 2;
      }
    }
                
  }
    
syntax Error
[kernel] Parsing output/031.c (with preprocessing)
[kernel:annot-error] output/031.c:3: Warning: unexpected token 'pre'
[kernel] User Error: warning annot-error treated as fatal error.
[kernel] Frama-C aborted: invalid user input.

syntax Error
[kernel] Parsing output/031.c (with preprocessing)
[kernel:annot-error] output/031.c:3: Warning: unexpected token 'pre'
[kernel] User Error: warning annot-error treated as fatal error.
[kernel] Frama-C aborted: invalid user input.

 n@pre))
    */
                for (i = 0; i < n; i += 4) {
    j = i;
                
                /*@ loop invariant
    ((i <= j && j < m) &&
                (j >= i) &&
                (j < m))
    */
                for (j = i; j < m;) {
        
      if (unknown()) {
        /*@ assert j >= 0;*/
        j++;
        k = 0;
        
                /*@ loop invariant
    ((0 <= k && k <= j) &&
                (j <= m) &&
                (j >= i))
    */
                while (k < j) {
          k++;
        }
                
      } else {
        /*@ assert n + j + 5 > i;*/
        j += 2;
      }
    }
                
  }
转换后
 n@pre))
    */
                for (i = 0; i < n; i += 4) {
    j = i;
                
                /*@ Inv
    (((i <= j && j < m) &&
                (j >= i) &&
                (j < m)))
    */
                for (j = i; j < m;) {
        
      if (unknown()) {
        /*@ Inv
    (assert j >= 0)
    */
        j++;
        k = 0;
        
                /*@ Inv
    (((0 <= k && k <= j) &&
                (j <= m) &&
                (j >= i)))
    */
                while (k < j) {
          k++;
        }
                
      } else {
        /*@ Inv
    (assert n + j + 5 > i)
    */
        j += 2;
      }
    }
                
  }
syntax Error
[kernel] Parsing output/031.c (with preprocessing)
[kernel:annot-error] output/031.c:3: Warning: unexpected token 'pre'
[kernel] User Error: warning annot-error treated as fatal error.
[kernel] Frama-C aborted: invalid user input.

syntax Error
[kernel] Parsing output/031.c (with preprocessing)
[kernel:annot-error] output/031.c:3: Warning: unexpected token 'pre'
[kernel] User Error: warning annot-error treated as fatal error.
[kernel] Frama-C aborted: invalid user input.

RESULT PASS_1
0
0
0
RESULT PASS_3
0
0
0
RESULT PASS_5
0
0
0
TRY TIME: 3
[(189, 464, 0), (234, 460, 1), (346, 386, 2)]
[(189, 464, 0), (234, 460, 1), (346, 386, 2)]
[(189, 464, 0), (234, 460, 1), (346, 386, 2)]
[(189, 464, 0), (234, 460, 1), (346, 386, 2)]
Loop 2 : Inner
Loop 1 : Inner
Loop 0 : Outer
Sorted indices: [2, 1, 0]
File found: ../sac_c_parser/test/../ip_postcond/goal/031_goal.v. Deleting the file.
File found: ../sac_c_parser/test/../ip_postcond/goal/031_proof_auto.v. Deleting the file.
File found: ../sac_c_parser/test/../ip_postcond/goal/031_proof_manual.v. Deleting the file.
LoopEntry_0:
m@pre + 1 < n@pre && (m == m@pre) * (n == n@pre) * (k == k@pre) * (j == j@pre) * (i == 0)
LoopEntry_1:
0 < n@pre && m@pre + 1 < n@pre && (m == m@pre) * (n == n@pre) * (k == k@pre) * (j == 0) * (i == 0)
LoopEntry_2:
0 >= 0 && retval_38 != 0 && retval_38 <= INT_MAX && retval_38 > INT_MIN && 0 < m@pre && 0 < n@pre && m@pre + 1 < n@pre && (j == 0 + 1) * (m == m@pre) * (n == n@pre) * (k == 0) * (i == 0)

[(0, 'm@pre + 1 < n@pre && (m == m@pre) * (n == n@pre) * (k == k@pre) * (j == j@pre) * (i == 0)'), (1, '0 < n@pre && m@pre + 1 < n@pre && (m == m@pre) * (n == n@pre) * (k == k@pre) * (j == 0) * (i == 0)'), (2, '0 >= 0 && retval_38 != 0 && retval_38 <= INT_MAX && retval_38 > INT_MIN && 0 < m@pre && 0 < n@pre && m@pre + 1 < n@pre && (j == 0 + 1) * (m == m@pre) * (n == n@pre) * (k == 0) * (i == 0)')]
Successfully generated loop/031.json
INNER_FLAG: True
Variable Maps: [{'j': '0 + 1', 'm': 'm@pre', 'n': 'n@pre', 'k': '0', 'i': '0'}]
Path conditions: ['0 >= 0 && retval_38 != 0 && retval_38 <= INT_MAX && retval_38 > INT_MIN && 0 < m@pre && 0 < n@pre && m@pre + 1 < n@pre']
Pre condition: 0 >= 0 && retval_38 != 0 && retval_38 <= INT_MAX && retval_38 > INT_MIN && 0 < m@pre && 0 < n@pre && m@pre + 1 < n@pre && (j == 0 + 1) * (m == m@pre) * (n == n@pre) * (k == 0) * (i == 0)
Loop Condition: k < j
Updated Loop Conditions: ['0 < 0 + 1']
Global Unchanged Variables ['j', 'm', 'n', 'i']
Non Inductive Variables []
[{'j': '0 + 1', 'm': 'm@pre', 'n': 'n@pre', 'k': '0', 'i': '0'}]
['0 >= 0 && retval_38 != 0 && retval_38 <= INT_MAX && retval_38 > INT_MIN && 0 < m@pre && 0 < n@pre && m@pre + 1 < n@pre']

int unknown();

/*@ requires m + 1 < n; */
void foo(int i,int j,int k,int n,int m) {

  i = 0;
  for (i = 0; i < n; i += 4) {
    j = i;
    for (j = i; j < m;) {
        
      if (unknown()) {
        /*@ assert j >= 0;*/
        j++;
        k = 0;
        
                
        /* >>> LOOP INVARIANT TO FILL <<< */
        
                /*@
                */
                while (k < j) {
          k++;
        }
                
      } else {
        /*@ assert n + j + 5 > i;*/
        j += 2;
      }
    }
  }
}
SIMPLE
```c
int unknown();

/*@ requires m + 1 < n; */
void foo(int i,int j,int k,int n,int m) {

  i = 0;
  for (i = 0; i < n; i += 4) {
    j = i;
    for (j = i; j < m;) {
        
      if (unknown()) {
        /*@ assert j >= 0;*/
        j++;
        k = 0;
        
                
        /* >>> LOOP INVARIANT TO FILL <<< */
        
                /*@
                loop invariant 0 <= k <= j;
                loop invariant j >= i;
                loop invariant j < m;
                */
                while (k < j) {
          k++;
        }
                
      } else {
        /*@ assert n + j + 5 > i;*/
        j += 2;
      }
    }
  }
}
```

int unknown();

/*@ requires m + 1 < n; */
void foo(int i,int j,int k,int n,int m) {

  i = 0;
  for (i = 0; i < n; i += 4) {
    j = i;
    for (j = i; j < m;) {
        
      if (unknown()) {
        /*@ assert j >= 0;*/
        j++;
        k = 0;
        
                
                /*@
                loop invariant 0 <= k <= j;
                loop invariant j >= i;
                loop invariant j < m;
                */
                while (k < j) {
          k++;
        }
                
      } else {
        /*@ assert n + j + 5 > i;*/
        j += 2;
      }
    }
  }
}


int unknown();

/*@ requires m + 1 < n; */
void foo(int i,int j,int k,int n,int m) {

  i = 0;
  for (i = 0; i < n; i += 4) {
    j = i;
    for (j = i; j < m;) {
        
      if (unknown()) {
        /*@ assert j >= 0;*/
        j++;
        k = 0;
        
                
                /*@
                loop invariant 0 <= k <= j;
                loop invariant j >= i;
                loop invariant j < m;
                */
                while (k < j) {
          k++;
        }
                
      } else {
        /*@ assert n + j + 5 > i;*/
        j += 2;
      }
    }
  }
}

INNER_FLAG: True
Variable Maps: [{'m': 'm@pre', 'n': 'n@pre', 'k': 'k@pre', 'j': '0', 'i': '0'}]
Path conditions: ['0 < n@pre && m@pre + 1 < n@pre']
Pre condition: 0 < n@pre && m@pre + 1 < n@pre && (m == m@pre) * (n == n@pre) * (k == k@pre) * (j == 0) * (i == 0)
Loop Condition: j < m
Updated Loop Conditions: ['0 < m@pre']
Global Unchanged Variables ['m', 'n', 'i']
Non Inductive Variables ['k']
[{'m': 'm@pre', 'n': 'n@pre', 'k': 'k@pre', 'j': '0', 'i': '0'}]
['0 < n@pre && m@pre + 1 < n@pre']

int unknown();

/*@ requires m + 1 < n; */
void foo(int i,int j,int k,int n,int m) {

  i = 0;
  for (i = 0; i < n; i += 4) {
    j = i;
    
                
        /* >>> LOOP INVARIANT TO FILL <<< */
        
                /*@
                */
                for (j = i; j < m;) {
        
      if (unknown()) {
        /*@ assert j >= 0;*/
        j++;
        k = 0;
        
                
                /*@
                loop invariant 0 <= k <= j;
                loop invariant j >= i;
                loop invariant j < m;
                */
                while (k < j) {
          k++;
        }
                
      } else {
        /*@ assert n + j + 5 > i;*/
        j += 2;
      }
    }
                
  }
}

SIMPLE
```c
int unknown();

/*@ requires m + 1 < n; */
void foo(int i,int j,int k,int n,int m) {

  i = 0;
  for (i = 0; i < n; i += 4) {
    j = i;
    
                
        /* >>> LOOP INVARIANT TO FILL <<< */
        
                /*@
                loop invariant i <= j < m;
                loop invariant j >= i;
                loop invariant j < m;
                */
                for (j = i; j < m;) {
        
      if (unknown()) {
        /*@ assert j >= 0;*/
        j++;
        k = 0;
        
                
                /*@
                loop invariant 0 <= k <= j;
                loop invariant j >= i;
                loop invariant j < m;
                */
                while (k < j) {
          k++;
        }
                
      } else {
        /*@ assert n + j + 5 > i;*/
        j += 2;
      }
    }
                
  }
}
```

int unknown();

/*@ requires m + 1 < n; */
void foo(int i,int j,int k,int n,int m) {

  i = 0;
  for (i = 0; i < n; i += 4) {
    j = i;
    
                
                /*@
                loop invariant i <= j < m;
                loop invariant j >= i;
                loop invariant j < m;
                */
                for (j = i; j < m;) {
        
      if (unknown()) {
        /*@ assert j >= 0;*/
        j++;
        k = 0;
        
                
                /*@
                loop invariant 0 <= k <= j;
                loop invariant j >= i;
                loop invariant j < m;
                */
                while (k < j) {
          k++;
        }
                
      } else {
        /*@ assert n + j + 5 > i;*/
        j += 2;
      }
    }
                
  }
}


int unknown();

/*@ requires m + 1 < n; */
void foo(int i,int j,int k,int n,int m) {

  i = 0;
  for (i = 0; i < n; i += 4) {
    j = i;
    
                
                /*@
                loop invariant i <= j < m;
                loop invariant j >= i;
                loop invariant j < m;
                */
                for (j = i; j < m;) {
        
      if (unknown()) {
        /*@ assert j >= 0;*/
        j++;
        k = 0;
        
                
                /*@
                loop invariant 0 <= k <= j;
                loop invariant j >= i;
                loop invariant j < m;
                */
                while (k < j) {
          k++;
        }
                
      } else {
        /*@ assert n + j + 5 > i;*/
        j += 2;
      }
    }
                
  }
}

INNER_FLAG: False
Variable Maps: [{'m': 'm@pre', 'n': 'n@pre', 'k': 'k@pre', 'j': 'j@pre', 'i': '0'}]
Path conditions: ['m@pre + 1 < n@pre']
Pre condition: m@pre + 1 < n@pre && (m == m@pre) * (n == n@pre) * (k == k@pre) * (j == j@pre) * (i == 0)
Loop Condition: i < n
Updated Loop Conditions: ['0 < n@pre']
Global Unchanged Variables ['m', 'n']
Non Inductive Variables ['j', 'k']
[{'m': 'm@pre', 'n': 'n@pre', 'k': 'k@pre', 'j': 'j@pre', 'i': '0'}]
['m@pre + 1 < n@pre']

                
        /* >>> LOOP INVARIANT TO FILL <<< */
        
                /*@
          loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> (m == \at(m, Pre));
          loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> (n == \at(n, Pre));
                */
                for (i = 0; i < n; i += 4) {
    j = i;
    
                
                /*@
                loop invariant i <= j < m;
                loop invariant j >= i;
                loop invariant j < m;
                */
                for (j = i; j < m;) {
        
      if (unknown()) {
        /*@ assert j >= 0;*/
        j++;
        k = 0;
        
                
                /*@
                loop invariant 0 <= k <= j;
                loop invariant j >= i;
                loop invariant j < m;
                */
                while (k < j) {
          k++;
        }
                
      } else {
        /*@ assert n + j + 5 > i;*/
        j += 2;
      }
    }
                
  }
                

                
        /* >>> LOOP INVARIANT TO FILL <<< */
        
                /*@
          loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (PLACE_HOLDER_i))) ;
          loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (PLACE_HOLDER_j))) ;
          loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (PLACE_HOLDER_k))) ;
          loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((!(0 < \at(n, Pre))) ==> ((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)));
          loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> (m == \at(m, Pre));
          loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> (n == \at(n, Pre));
                */
                for (i = 0; i < n; i += 4) {
    j = i;
    
                
                /*@
                loop invariant i <= j < m;
                loop invariant j >= i;
                loop invariant j < m;
                */
                for (j = i; j < m;) {
        
      if (unknown()) {
        /*@ assert j >= 0;*/
        j++;
        k = 0;
        
                
                /*@
                loop invariant 0 <= k <= j;
                loop invariant j >= i;
                loop invariant j < m;
                */
                while (k < j) {
          k++;
        }
                
      } else {
        /*@ assert n + j + 5 > i;*/
        j += 2;
      }
    }
                
  }
                

int unknown();

/*@ requires m + 1 < n; */
void foo(int i,int j,int k,int n,int m) {

  i = 0;
  
                
        /* >>> LOOP INVARIANT TO FILL <<< */
        
                /*@
          loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (PLACE_HOLDER_i))) ;
          loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (PLACE_HOLDER_j))) ;
          loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (PLACE_HOLDER_k))) ;
          loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((!(0 < \at(n, Pre))) ==> ((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)));
          loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> (m == \at(m, Pre));
          loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> (n == \at(n, Pre));
                */
                for (i = 0; i < n; i += 4) {
    j = i;
    
                
                /*@
                loop invariant i <= j < m;
                loop invariant j >= i;
                loop invariant j < m;
                */
                for (j = i; j < m;) {
        
      if (unknown()) {
        /*@ assert j >= 0;*/
        j++;
        k = 0;
        
                
                /*@
                loop invariant 0 <= k <= j;
                loop invariant j >= i;
                loop invariant j < m;
                */
                while (k < j) {
          k++;
        }
                
      } else {
        /*@ assert n + j + 5 > i;*/
        j += 2;
      }
    }
                
  }
                
}

```c
/* >>> LOOP INVARIANT TO FILL <<< */

/*@
          loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (i % 4 == 0 && i < n))) ;
          loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (j < m))) ;
          loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (j >= i && j < m))) ;
          loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((!(0 < \at(n, Pre))) ==> ((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)));
          loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> (m == \at(m, Pre));
          loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> (n == \at(n, Pre));
                */
                for (i = 0; i < n; i += 4) {
    j = i;
    
                
                /*@
                loop invariant i <= j < m;
                loop invariant j >= i;
                loop invariant j < m;
                */
                for (j = i; j < m;) {
        
      if (unknown()) {
        /*@ assert j >= 0;*/
        j++;
        k = 0;
        
                
                /*@
                loop invariant 0 <= k <= j;
                loop invariant j >= i;
                loop invariant j < m;
                */
                while (k < j) {
          k++;
        }
                
      } else {
        /*@ assert n + j + 5 > i;*/
        j += 2;
      }
    }
                
  }
                
}
```

/* >>> LOOP INVARIANT TO FILL <<< */

/*@
          loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (i % 4 == 0 && i < n))) ;
          loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (j < m))) ;
          loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (j >= i && j < m))) ;
          loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((!(0 < \at(n, Pre))) ==> ((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)));
          loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> (m == \at(m, Pre));
          loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> (n == \at(n, Pre));
                */
                for (i = 0; i < n; i += 4) {
    j = i;
    
                
                /*@
                loop invariant i <= j < m;
                loop invariant j >= i;
                loop invariant j < m;
                */
                for (j = i; j < m;) {
        
      if (unknown()) {
        /*@ assert j >= 0;*/
        j++;
        k = 0;
        
                
                /*@
                loop invariant 0 <= k <= j;
                loop invariant j >= i;
                loop invariant j < m;
                */
                while (k < j) {
          k++;
        }
                
      } else {
        /*@ assert n + j + 5 > i;*/
        j += 2;
      }
    }
                
  }
                
}


/* >>> LOOP INVARIANT TO FILL <<< */

/*@
          loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (i % 4 == 0 && i < n))) ;
          loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (j < m))) ;
          loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (j >= i && j < m))) ;
          loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((!(0 < \at(n, Pre))) ==> ((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)));
          loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> (m == \at(m, Pre));
          loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> (n == \at(n, Pre));
                */
                for (i = 0; i < n; i += 4) {
    j = i;
    
                
                /*@
                loop invariant i <= j < m;
                loop invariant j >= i;
                loop invariant j < m;
                */
                for (j = i; j < m;) {
        
      if (unknown()) {
        /*@ assert j >= 0;*/
        j++;
        k = 0;
        
                
                /*@
                loop invariant 0 <= k <= j;
                loop invariant j >= i;
                loop invariant j < m;
                */
                while (k < j) {
          k++;
        }
                
      } else {
        /*@ assert n + j + 5 > i;*/
        j += 2;
      }
    }
                
  }
                
}

syntax Error
[kernel] Parsing output/031.c (with preprocessing)
[kernel] output/031.c:11: 
  syntax error:
  Location: line 11, column 0
  9               loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> (m == \at(m, Pre));
  10              loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> (n == \at(n, Pre));
  11                    */
        ^
  12                    for (i = 0; i < n; i += 4) {
  13        j = i;
[kernel] Frama-C aborted: invalid user input.

after repair

/* >>> LOOP INVARIANT TO FILL <<< */

/*@
          loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (i % 4 == 0 && i < n))) ;
          loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (j < m))) ;
          loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (j >= i && j < m))) ;
          loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((!(0 < \at(n, Pre))) ==> ((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)));
          loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> (m == \at(m, Pre));
          loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> (n == \at(n, Pre));
*/
                for (i = 0; i < n; i += 4) {
    j = i;
    
                
                /*@
                loop invariant i <= j < m;
                loop invariant j >= i;
                loop invariant j < m;
                */
                for (j = i; j < m;) {
        
      if (unknown()) {
        /*@ assert j >= 0;*/
        j++;
        k = 0;
        
                
                /*@
                loop invariant 0 <= k <= j;
                loop invariant j >= i;
                loop invariant j < m;
                */
                while (k < j) {
          k++;
        }
                
      } else {
        /*@ assert n + j + 5 > i;*/
        j += 2;
      }
    }
                
  }
                
}

syntax Error
[kernel] Parsing output/031.c (with preprocessing)
[kernel] output/031.c:10: 
  syntax error:
  Location: line 10, column 80
  8               loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((!(0 < \at(n, Pre))) ==> ((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)));
  9               loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> (m == \at(m, Pre));
  10              loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> (n == \at(n, Pre));
                                                                                        ^
  11    */
  12                    for (i = 0; i < n; i += 4) {
[kernel] Frama-C aborted: invalid user input.

syntax Error
[kernel] Parsing output/031.c (with preprocessing)
[kernel] output/031.c:10: 
  syntax error:
  Location: line 10, column 80
  8               loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((!(0 < \at(n, Pre))) ==> ((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)));
  9               loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> (m == \at(m, Pre));
  10              loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> (n == \at(n, Pre));
                                                                                        ^
  11    */
  12                    for (i = 0; i < n; i += 4) {
[kernel] Frama-C aborted: invalid user input.

/*@
          loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (i % 4 == 0 && i < n))) ;
          loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (j < m))) ;
          loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (j >= i && j < m))) ;
          loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((!(0 < \at(n, Pre))) ==> ((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)));
          loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> (m == \at(m, Pre));
          loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> (n == \at(n, Pre));
*/
                for (i = 0; i < n; i += 4) {
    j = i;
    
                
                /*@
                loop invariant i <= j < m;
                loop invariant j >= i;
                loop invariant j < m;
                */
                for (j = i; j < m;) {
        
      if (unknown()) {
        /*@ assert j >= 0;*/
        j++;
        k = 0;
        
                
                /*@
                loop invariant 0 <= k <= j;
                loop invariant j >= i;
                loop invariant j < m;
                */
                while (k < j) {
          k++;
        }
                
      } else {
        /*@ assert n + j + 5 > i;*/
        j += 2;
      }
    }
                
  }
转换后
/*@ Inv
    ((m@pre + 1 < n@pre) => ((0 < n@pre) => (((m == m@pre)&&(n == n@pre)&&(k == k@pre)&&(j == j@pre)&&(i == 0)) || (i % 4 == 0 && i < n))) ) &&
((m@pre + 1 < n@pre) => ((0 < n@pre) => (((m == m@pre)&&(n == n@pre)&&(k == k@pre)&&(j == j@pre)&&(i == 0)) || (j < m))) ) &&
((m@pre + 1 < n@pre) => ((0 < n@pre) => (((m == m@pre)&&(n == n@pre)&&(k == k@pre)&&(j == j@pre)&&(i == 0)) || (j >= i && j < m))) ) &&
((m@pre + 1 < n@pre) => ((!(0 < n@pre)) => ((m == m@pre)&&(n == n@pre)&&(k == k@pre)&&(j == j@pre)&&(i == 0)))) &&
((m@pre + 1 < n@pre) => (m == m@pre)) &&
((m@pre + 1 < n@pre) => (n == n@pre))
    */
                for (i = 0; i < n; i += 4) {
    j = i;
    
                
                /*@ Inv
    (i <= j && j < m) &&
(j >= i) &&
(j < m)
    */
                for (j = i; j < m;) {
        
      if (unknown()) {
        /*@ Inv
    (assert j >= 0)
    */
        j++;
        k = 0;
        
                
                /*@ Inv
    (0 <= k && k <= j) &&
(j >= i) &&
(j < m)
    */
                while (k < j) {
          k++;
        }
                
      } else {
        /*@ Inv
    (assert n + j + 5 > i)
    */
        j += 2;
      }
    }
                
  }
syntax Error
[kernel] Parsing output/031.c (with preprocessing)
[kernel] output/031.c:10: 
  syntax error:
  Location: line 10, column 80
  8               loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((!(0 < \at(n, Pre))) ==> ((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)));
  9               loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> (m == \at(m, Pre));
  10              loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> (n == \at(n, Pre));
                                                                                        ^
  11    */
  12                    for (i = 0; i < n; i += 4) {
[kernel] Frama-C aborted: invalid user input.

after repair

/*@ Inv
    ((\at(m, Pre) + 1 < \at(n, Pre)) => ((0 < \at(n, Pre) => (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (i % 4 == 0 && i < \at(n, Pre))) ) &&
((\at(m, Pre) + 1 < \at(n, Pre)) => ((0 < \at(n, Pre) => (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (j < \at(m))) ) &&
((\at(m, Pre) + 1 < \at(n, Pre)) => ((0 < \at(n, Pre) => (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (j >= i && j < \at(m))) ) &&
((\at(m, Pre) + 1 < \at(n, Pre)) => ((!(0 < \at(n, Pre))) => ((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)))) &&
((\at(m, Pre) + 1 < \at(n, Pre)) => (m == \at(m, Pre))) &&
((\at(m, Pre) + 1 < \at(n, Pre)) => (n == \at(n, Pre)))
    */
                for (i = 0; i < n; i += 4) {
    j = i;
    
                
                /*@ Inv
    (i <= j && j < m) &&
(j >= i) &&
(j < m)
    */
                for (j = i; j < m;) {
        
      if (unknown()) {
        /*@ Inv
    (j >= 0)
    */
        j++;
        k = 0;
        
                
                /*@ Inv
    (0 <= k && k <= j) &&
(j >= i) &&
(j < m)
    */
                while (k < j) {
          k++;
        }
                
      } else {
        /*@ Inv
    (n + j + 5 > i)
    */
        j += 2;
      }
    }
                
  }

syntax Error
[kernel] Parsing output/031.c (with preprocessing)
[kernel:annot-error] output/031.c:3: Warning: unexpected token '('
[kernel] User Error: warning annot-error treated as fatal error.
[kernel] Frama-C aborted: invalid user input.

syntax Error
[kernel] Parsing output/031.c (with preprocessing)
[kernel:annot-error] output/031.c:3: Warning: unexpected token '('
[kernel] User Error: warning annot-error treated as fatal error.
[kernel] Frama-C aborted: invalid user input.

/*@ Inv
    ((\at(m, Pre) + 1 < \at(n, Pre)) => ((0 < \at(n, Pre) => (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (i % 4 == 0 && i < \at(n, Pre))) ) &&
((\at(m, Pre) + 1 < \at(n, Pre)) => ((0 < \at(n, Pre) => (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (j < \at(m))) ) &&
((\at(m, Pre) + 1 < \at(n, Pre)) => ((0 < \at(n, Pre) => (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (j >= i && j < \at(m))) ) &&
((\at(m, Pre) + 1 < \at(n, Pre)) => ((!(0 < \at(n, Pre))) => ((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)))) &&
((\at(m, Pre) + 1 < \at(n, Pre)) => (m == \at(m, Pre))) &&
((\at(m, Pre) + 1 < \at(n, Pre)) => (n == \at(n, Pre)))
    */
                for (i = 0; i < n; i += 4) {
    j = i;
    
                
                /*@ Inv
    (i <= j && j < m) &&
(j >= i) &&
(j < m)
    */
                for (j = i; j < m;) {
        
      if (unknown()) {
        /*@ Inv
    (j >= 0)
    */
        j++;
        k = 0;
        
                
                /*@ Inv
    (0 <= k && k <= j) &&
(j >= i) &&
(j < m)
    */
                while (k < j) {
          k++;
        }
                
      } else {
        /*@ Inv
    (n + j + 5 > i)
    */
        j += 2;
      }
    }
                
  }
转换后
/*@ Inv
    (Inv
    ((m@pre + 1 < n@pre) => ((0 < n@pre => (((m == m@pre)&&(n == n@pre)&&(k == k@pre)&&(j == j@pre)&&(i == 0)) || (i % 4 == 0 && i < n@pre)) ) &&
((m@pre + 1 < n@pre) => ((0 < n@pre => (((m == m@pre)&&(n == n@pre)&&(k == k@pre)&&(j == j@pre)&&(i == 0)) || (j < \at(m))) ) &&
((m@pre + 1 < n@pre) => ((0 < n@pre => (((m == m@pre)&&(n == n@pre)&&(k == k@pre)&&(j == j@pre)&&(i == 0)) || (j >= i && j < \at(m))) ) &&
((m@pre + 1 < n@pre) => ((!(0 < n@pre)) => ((m == m@pre)&&(n == n@pre)&&(k == k@pre)&&(j == j@pre)&&(i == 0)))) &&
((m@pre + 1 < n@pre) => (m == m@pre)) &&
((m@pre + 1 < n@pre) => (n == n@pre)))
    */
                for (i = 0; i < n; i += 4) {
    j = i;
    
                
                /*@ Inv
    (Inv
    (i <= j && j < m) &&
(j >= i) &&
(j < m))
    */
                for (j = i; j < m;) {
        
      if (unknown()) {
        /*@ Inv
    (Inv
    (j >= 0))
    */
        j++;
        k = 0;
        
                
                /*@ Inv
    (Inv
    (0 <= k && k <= j) &&
(j >= i) &&
(j < m))
    */
                while (k < j) {
          k++;
        }
                
      } else {
        /*@ Inv
    (Inv
    (n + j + 5 > i))
    */
        j += 2;
      }
    }
                
  }
syntax Error
[kernel] Parsing output/031.c (with preprocessing)
[kernel:annot-error] output/031.c:3: Warning: unexpected token '('
[kernel] User Error: warning annot-error treated as fatal error.
[kernel] Frama-C aborted: invalid user input.

after repair

    /*@ 
    ((m@pre + 1 < n@pre) => ((0 < n@pre) => (((m == m@pre) && (n == n@pre) && (k == k@pre) && (j == j@pre) && (i == 0)) || (i % 4 == 0 && i < n@pre)))) &&
    ((m@pre + 1 < n@pre) => ((0 < n@pre) => (((m == m@pre) && (n == n@pre) && (k == k@pre) && (j == j@pre) && (i == 0)) || (j < \at(m)))) &&
    ((m@pre + 1 < n@pre) => ((0 < n@pre) => (((m == m@pre) && (n == n@pre) && (k == k@pre) && (j == j@pre) && (i == 0)) || (j >= i && j < \at(m)))) &&
    ((m@pre + 1 < n@pre) => ((!(0 < n@pre)) => ((m == m@pre) && (n == n@pre) && (k == k@pre) && (j == j@pre) && (i == 0)))) &&
    ((m@pre + 1 < n@pre) => (m == m@pre)) &&
    ((m@pre + 1 < n@pre) => (n == n@pre))
    */
                for (i = 0; i < n; i += 4) {
    j = i;
    
                
                /*@ 
    (i <= j && j < m) &&
    (j >= i) &&
    (j < m)
    */
                for (j = i; j < m;) {
        
      if (unknown()) {
        /*@ 
    (j >= 0)
    */
        j++;
        k = 0;
        
                
                /*@ 
    (0 <= k && k <= j) &&
    (j >= i) &&
    (j < m)
    */
                while (k < j) {
          k++;
        }
                
      } else {
        /*@ 
    (n + j + 5 > i)
    */
        j += 2;
      }
    }
                
  }
    
syntax Error
[kernel] Parsing output/031.c (with preprocessing)
[kernel:annot-error] output/031.c:3: Warning: unexpected token '('
[kernel] User Error: warning annot-error treated as fatal error.
[kernel] Frama-C aborted: invalid user input.

syntax Error
[kernel] Parsing output/031.c (with preprocessing)
[kernel:annot-error] output/031.c:3: Warning: unexpected token '('
[kernel] User Error: warning annot-error treated as fatal error.
[kernel] Frama-C aborted: invalid user input.

 n@pre))
    */
                for (i = 0; i < n; i += 4) {
    j = i;
    
                
                /*@ 
    (i <= j && j < m) &&
    (j >= i) &&
    (j < m)
    */
                for (j = i; j < m;) {
        
      if (unknown()) {
        /*@ 
    (j >= 0)
    */
        j++;
        k = 0;
        
                
                /*@ 
    (0 <= k && k <= j) &&
    (j >= i) &&
    (j < m)
    */
                while (k < j) {
          k++;
        }
                
      } else {
        /*@ 
    (n + j + 5 > i)
    */
        j += 2;
      }
    }
                
  }
转换后
 n@pre))
    */
                for (i = 0; i < n; i += 4) {
    j = i;
    
                
                /*@ Inv
    ((i <= j && j < m) &&
    (j >= i) &&
    (j < m))
    */
                for (j = i; j < m;) {
        
      if (unknown()) {
        /*@ Inv
    ((j >= 0))
    */
        j++;
        k = 0;
        
                
                /*@ Inv
    ((0 <= k && k <= j) &&
    (j >= i) &&
    (j < m))
    */
                while (k < j) {
          k++;
        }
                
      } else {
        /*@ Inv
    ((n + j + 5 > i))
    */
        j += 2;
      }
    }
                
  }
syntax Error
[kernel] Parsing output/031.c (with preprocessing)
[kernel:annot-error] output/031.c:3: Warning: unexpected token '('
[kernel] User Error: warning annot-error treated as fatal error.
[kernel] Frama-C aborted: invalid user input.

syntax Error
[kernel] Parsing output/031.c (with preprocessing)
[kernel:annot-error] output/031.c:3: Warning: unexpected token '('
[kernel] User Error: warning annot-error treated as fatal error.
[kernel] Frama-C aborted: invalid user input.

RESULT PASS_1
0
0
0
RESULT PASS_3
0
0
0
RESULT PASS_5
0
0
0
TRY TIME: 4
[(189, 464, 0), (234, 460, 1), (346, 386, 2)]
[(189, 464, 0), (234, 460, 1), (346, 386, 2)]
[(189, 464, 0), (234, 460, 1), (346, 386, 2)]
[(189, 464, 0), (234, 460, 1), (346, 386, 2)]
Loop 2 : Inner
Loop 1 : Inner
Loop 0 : Outer
Sorted indices: [2, 1, 0]
File found: ../sac_c_parser/test/../ip_postcond/goal/031_goal.v. Deleting the file.
File found: ../sac_c_parser/test/../ip_postcond/goal/031_proof_auto.v. Deleting the file.
File found: ../sac_c_parser/test/../ip_postcond/goal/031_proof_manual.v. Deleting the file.
LoopEntry_0:
m@pre + 1 < n@pre && (m == m@pre) * (n == n@pre) * (k == k@pre) * (j == j@pre) * (i == 0)
LoopEntry_1:
0 < n@pre && m@pre + 1 < n@pre && (m == m@pre) * (n == n@pre) * (k == k@pre) * (j == 0) * (i == 0)
LoopEntry_2:
0 >= 0 && retval_38 != 0 && retval_38 <= INT_MAX && retval_38 > INT_MIN && 0 < m@pre && 0 < n@pre && m@pre + 1 < n@pre && (j == 0 + 1) * (m == m@pre) * (n == n@pre) * (k == 0) * (i == 0)

[(0, 'm@pre + 1 < n@pre && (m == m@pre) * (n == n@pre) * (k == k@pre) * (j == j@pre) * (i == 0)'), (1, '0 < n@pre && m@pre + 1 < n@pre && (m == m@pre) * (n == n@pre) * (k == k@pre) * (j == 0) * (i == 0)'), (2, '0 >= 0 && retval_38 != 0 && retval_38 <= INT_MAX && retval_38 > INT_MIN && 0 < m@pre && 0 < n@pre && m@pre + 1 < n@pre && (j == 0 + 1) * (m == m@pre) * (n == n@pre) * (k == 0) * (i == 0)')]
Successfully generated loop/031.json
INNER_FLAG: True
Variable Maps: [{'j': '0 + 1', 'm': 'm@pre', 'n': 'n@pre', 'k': '0', 'i': '0'}]
Path conditions: ['0 >= 0 && retval_38 != 0 && retval_38 <= INT_MAX && retval_38 > INT_MIN && 0 < m@pre && 0 < n@pre && m@pre + 1 < n@pre']
Pre condition: 0 >= 0 && retval_38 != 0 && retval_38 <= INT_MAX && retval_38 > INT_MIN && 0 < m@pre && 0 < n@pre && m@pre + 1 < n@pre && (j == 0 + 1) * (m == m@pre) * (n == n@pre) * (k == 0) * (i == 0)
Loop Condition: k < j
Updated Loop Conditions: ['0 < 0 + 1']
Global Unchanged Variables ['j', 'm', 'n', 'i']
Non Inductive Variables []
[{'j': '0 + 1', 'm': 'm@pre', 'n': 'n@pre', 'k': '0', 'i': '0'}]
['0 >= 0 && retval_38 != 0 && retval_38 <= INT_MAX && retval_38 > INT_MIN && 0 < m@pre && 0 < n@pre && m@pre + 1 < n@pre']

int unknown();

/*@ requires m + 1 < n; */
void foo(int i,int j,int k,int n,int m) {

  i = 0;
  for (i = 0; i < n; i += 4) {
    j = i;
    for (j = i; j < m;) {
        
      if (unknown()) {
        /*@ assert j >= 0;*/
        j++;
        k = 0;
        
                
        /* >>> LOOP INVARIANT TO FILL <<< */
        
                /*@
                */
                while (k < j) {
          k++;
        }
                
      } else {
        /*@ assert n + j + 5 > i;*/
        j += 2;
      }
    }
  }
}
SIMPLE
```c
int unknown();

/*@ requires m + 1 < n; */
void foo(int i,int j,int k,int n,int m) {

  i = 0;
  for (i = 0; i < n; i += 4) {
    j = i;
    for (j = i; j < m;) {
        
      if (unknown()) {
        /*@ assert j >= 0;*/
        j++;
        k = 0;
        
        /* >>> LOOP INVARIANT TO FILL <<< */
        
                /*@
                loop invariant j >= i;
                loop invariant j <= m;
                loop invariant k >= 0;
                loop invariant k <= j;
                */
                while (k < j) {
          k++;
        }
                
      } else {
        /*@ assert n + j + 5 > i;*/
        j += 2;
      }
    }
  }
}
```

int unknown();

/*@ requires m + 1 < n; */
void foo(int i,int j,int k,int n,int m) {

  i = 0;
  for (i = 0; i < n; i += 4) {
    j = i;
    for (j = i; j < m;) {
        
      if (unknown()) {
        /*@ assert j >= 0;*/
        j++;
        k = 0;
        
                /*@
                loop invariant j >= i;
                loop invariant j <= m;
                loop invariant k >= 0;
                loop invariant k <= j;
                */
                while (k < j) {
          k++;
        }
                
      } else {
        /*@ assert n + j + 5 > i;*/
        j += 2;
      }
    }
  }
}


int unknown();

/*@ requires m + 1 < n; */
void foo(int i,int j,int k,int n,int m) {

  i = 0;
  for (i = 0; i < n; i += 4) {
    j = i;
    for (j = i; j < m;) {
        
      if (unknown()) {
        /*@ assert j >= 0;*/
        j++;
        k = 0;
        
                /*@
                loop invariant j >= i;
                loop invariant j <= m;
                loop invariant k >= 0;
                loop invariant k <= j;
                */
                while (k < j) {
          k++;
        }
                
      } else {
        /*@ assert n + j + 5 > i;*/
        j += 2;
      }
    }
  }
}

INNER_FLAG: True
Variable Maps: [{'m': 'm@pre', 'n': 'n@pre', 'k': 'k@pre', 'j': '0', 'i': '0'}]
Path conditions: ['0 < n@pre && m@pre + 1 < n@pre']
Pre condition: 0 < n@pre && m@pre + 1 < n@pre && (m == m@pre) * (n == n@pre) * (k == k@pre) * (j == 0) * (i == 0)
Loop Condition: j < m
Updated Loop Conditions: ['0 < m@pre']
Global Unchanged Variables ['m', 'n', 'i']
Non Inductive Variables ['k']
[{'m': 'm@pre', 'n': 'n@pre', 'k': 'k@pre', 'j': '0', 'i': '0'}]
['0 < n@pre && m@pre + 1 < n@pre']

int unknown();

/*@ requires m + 1 < n; */
void foo(int i,int j,int k,int n,int m) {

  i = 0;
  for (i = 0; i < n; i += 4) {
    j = i;
    
                
        /* >>> LOOP INVARIANT TO FILL <<< */
        
                /*@
                */
                for (j = i; j < m;) {
        
      if (unknown()) {
        /*@ assert j >= 0;*/
        j++;
        k = 0;
        
                /*@
                loop invariant j >= i;
                loop invariant j <= m;
                loop invariant k >= 0;
                loop invariant k <= j;
                */
                while (k < j) {
          k++;
        }
                
      } else {
        /*@ assert n + j + 5 > i;*/
        j += 2;
      }
    }
                
  }
}

SIMPLE
```c
int unknown();

/*@ requires m + 1 < n; */
void foo(int i,int j,int k,int n,int m) {

  i = 0;
  for (i = 0; i < n; i += 4) {
    j = i;
    
                
        /* >>> LOOP INVARIANT TO FILL <<< */
        
                /*@
                loop invariant j >= i;
                loop invariant j <= m;
                loop invariant k >= 0;
                loop invariant k <= j;
                */
                for (j = i; j < m;) {
        
      if (unknown()) {
        /*@ assert j >= 0;*/
        j++;
        k = 0;
        
                /*@
                loop invariant j >= i;
                loop invariant j <= m;
                loop invariant k >= 0;
                loop invariant k <= j;
                */
                while (k < j) {
          k++;
        }
                
      } else {
        /*@ assert n + j + 5 > i;*/
        j += 2;
      }
    }
                
  }
}
```

int unknown();

/*@ requires m + 1 < n; */
void foo(int i,int j,int k,int n,int m) {

  i = 0;
  for (i = 0; i < n; i += 4) {
    j = i;
    
                
                /*@
                loop invariant j >= i;
                loop invariant j <= m;
                loop invariant k >= 0;
                loop invariant k <= j;
                */
                for (j = i; j < m;) {
        
      if (unknown()) {
        /*@ assert j >= 0;*/
        j++;
        k = 0;
        
                /*@
                loop invariant j >= i;
                loop invariant j <= m;
                loop invariant k >= 0;
                loop invariant k <= j;
                */
                while (k < j) {
          k++;
        }
                
      } else {
        /*@ assert n + j + 5 > i;*/
        j += 2;
      }
    }
                
  }
}


int unknown();

/*@ requires m + 1 < n; */
void foo(int i,int j,int k,int n,int m) {

  i = 0;
  for (i = 0; i < n; i += 4) {
    j = i;
    
                
                /*@
                loop invariant j >= i;
                loop invariant j <= m;
                loop invariant k >= 0;
                loop invariant k <= j;
                */
                for (j = i; j < m;) {
        
      if (unknown()) {
        /*@ assert j >= 0;*/
        j++;
        k = 0;
        
                /*@
                loop invariant j >= i;
                loop invariant j <= m;
                loop invariant k >= 0;
                loop invariant k <= j;
                */
                while (k < j) {
          k++;
        }
                
      } else {
        /*@ assert n + j + 5 > i;*/
        j += 2;
      }
    }
                
  }
}

INNER_FLAG: False
Variable Maps: [{'m': 'm@pre', 'n': 'n@pre', 'k': 'k@pre', 'j': 'j@pre', 'i': '0'}]
Path conditions: ['m@pre + 1 < n@pre']
Pre condition: m@pre + 1 < n@pre && (m == m@pre) * (n == n@pre) * (k == k@pre) * (j == j@pre) * (i == 0)
Loop Condition: i < n
Updated Loop Conditions: ['0 < n@pre']
Global Unchanged Variables ['m', 'n']
Non Inductive Variables ['j', 'k']
[{'m': 'm@pre', 'n': 'n@pre', 'k': 'k@pre', 'j': 'j@pre', 'i': '0'}]
['m@pre + 1 < n@pre']

                
        /* >>> LOOP INVARIANT TO FILL <<< */
        
                /*@
          loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> (m == \at(m, Pre));
          loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> (n == \at(n, Pre));
                */
                for (i = 0; i < n; i += 4) {
    j = i;
    
                
                /*@
                loop invariant j >= i;
                loop invariant j <= m;
                loop invariant k >= 0;
                loop invariant k <= j;
                */
                for (j = i; j < m;) {
        
      if (unknown()) {
        /*@ assert j >= 0;*/
        j++;
        k = 0;
        
                /*@
                loop invariant j >= i;
                loop invariant j <= m;
                loop invariant k >= 0;
                loop invariant k <= j;
                */
                while (k < j) {
          k++;
        }
                
      } else {
        /*@ assert n + j + 5 > i;*/
        j += 2;
      }
    }
                
  }
                

                
        /* >>> LOOP INVARIANT TO FILL <<< */
        
                /*@
          loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (PLACE_HOLDER_i))) ;
          loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (PLACE_HOLDER_j))) ;
          loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (PLACE_HOLDER_k))) ;
          loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((!(0 < \at(n, Pre))) ==> ((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)));
          loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> (m == \at(m, Pre));
          loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> (n == \at(n, Pre));
                */
                for (i = 0; i < n; i += 4) {
    j = i;
    
                
                /*@
                loop invariant j >= i;
                loop invariant j <= m;
                loop invariant k >= 0;
                loop invariant k <= j;
                */
                for (j = i; j < m;) {
        
      if (unknown()) {
        /*@ assert j >= 0;*/
        j++;
        k = 0;
        
                /*@
                loop invariant j >= i;
                loop invariant j <= m;
                loop invariant k >= 0;
                loop invariant k <= j;
                */
                while (k < j) {
          k++;
        }
                
      } else {
        /*@ assert n + j + 5 > i;*/
        j += 2;
      }
    }
                
  }
                

int unknown();

/*@ requires m + 1 < n; */
void foo(int i,int j,int k,int n,int m) {

  i = 0;
  
                
        /* >>> LOOP INVARIANT TO FILL <<< */
        
                /*@
          loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (PLACE_HOLDER_i))) ;
          loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (PLACE_HOLDER_j))) ;
          loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (PLACE_HOLDER_k))) ;
          loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((!(0 < \at(n, Pre))) ==> ((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)));
          loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> (m == \at(m, Pre));
          loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> (n == \at(n, Pre));
                */
                for (i = 0; i < n; i += 4) {
    j = i;
    
                
                /*@
                loop invariant j >= i;
                loop invariant j <= m;
                loop invariant k >= 0;
                loop invariant k <= j;
                */
                for (j = i; j < m;) {
        
      if (unknown()) {
        /*@ assert j >= 0;*/
        j++;
        k = 0;
        
                /*@
                loop invariant j >= i;
                loop invariant j <= m;
                loop invariant k >= 0;
                loop invariant k <= j;
                */
                while (k < j) {
          k++;
        }
                
      } else {
        /*@ assert n + j + 5 > i;*/
        j += 2;
      }
    }
                
  }
                
}

```c
/* >>> LOOP INVARIANT TO FILL <<< */

/*@
          loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (j < \at(n, Pre) && j >= 0))) ;
          loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (j < m))) ;
          loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (k <= \at(m, Pre))) ;
          loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((!(0 < \at(n, Pre))) ==> ((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)));
          loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> (m == \at(m, Pre));
          loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> (n == \at(n, Pre));
                */
```

/* >>> LOOP INVARIANT TO FILL <<< */

/*@
          loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (j < \at(n, Pre) && j >= 0))) ;
          loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (j < m))) ;
          loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (k <= \at(m, Pre))) ;
          loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((!(0 < \at(n, Pre))) ==> ((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)));
          loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> (m == \at(m, Pre));
          loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> (n == \at(n, Pre));
                */


/* >>> LOOP INVARIANT TO FILL <<< */

/*@
          loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (j < \at(n, Pre) && j >= 0))) ;
          loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (j < m))) ;
          loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (k <= \at(m, Pre))) ;
          loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((!(0 < \at(n, Pre))) ==> ((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)));
          loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> (m == \at(m, Pre));
          loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> (n == \at(n, Pre));
                */

syntax Error
[kernel] Parsing output/031.c (with preprocessing)
[kernel:annot-error] output/031.c:7: Warning: unexpected token ';'
[kernel] User Error: warning annot-error treated as fatal error.
[kernel] Frama-C aborted: invalid user input.

after repair

/* >>> LOOP INVARIANT TO FILL <<< */

/*@
          loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (j < \at(n, Pre) && j >= 0))) ;
          loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (j < m))) ;
          loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (k <= \at(m, Pre)))) ;
          loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((!(0 < \at(n, Pre))) ==> ((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)));
          loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> (m == \at(m, Pre));
          loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> (n == \at(n, Pre));
                */

syntax Error
[kernel] Parsing output/031.c (with preprocessing)
[kernel] output/031.c:11: 
  syntax error:
  Location: line 11, column 0
  9               loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> (m == \at(m, Pre));
  10              loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> (n == \at(n, Pre));
  11                    */
        ^
[kernel] Frama-C aborted: invalid user input.

syntax Error
[kernel] Parsing output/031.c (with preprocessing)
[kernel] output/031.c:11: 
  syntax error:
  Location: line 11, column 0
  9               loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> (m == \at(m, Pre));
  10              loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> (n == \at(n, Pre));
  11                    */
        ^
[kernel] Frama-C aborted: invalid user input.


/* >>> LOOP INVARIANT TO FILL <<< */

/*@
          loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (j < \at(n, Pre) && j >= 0))) ;
          loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (j < m))) ;
          loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (k <= \at(m, Pre)))) ;
          loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((!(0 < \at(n, Pre))) ==> ((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)));
          loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> (m == \at(m, Pre));
          loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> (n == \at(n, Pre));
                */
转换后

/* >>> LOOP INVARIANT TO FILL <<< */

/*@ Inv
    ((m@pre + 1 < n@pre) => ((0 < n@pre) => (((m == m@pre)&&(n == n@pre)&&(k == k@pre)&&(j == j@pre)&&(i == 0)) || (j < n@pre && j >= 0))) ) &&
((m@pre + 1 < n@pre) => ((0 < n@pre) => (((m == m@pre)&&(n == n@pre)&&(k == k@pre)&&(j == j@pre)&&(i == 0)) || (j < m))) ) &&
((m@pre + 1 < n@pre) => ((0 < n@pre) => (((m == m@pre)&&(n == n@pre)&&(k == k@pre)&&(j == j@pre)&&(i == 0)) || (k <= m@pre))) ) &&
((m@pre + 1 < n@pre) => ((!(0 < n@pre)) => ((m == m@pre)&&(n == n@pre)&&(k == k@pre)&&(j == j@pre)&&(i == 0)))) &&
((m@pre + 1 < n@pre) => (m == m@pre)) &&
((m@pre + 1 < n@pre) => (n == n@pre))
    */
syntax Error
[kernel] Parsing output/031.c (with preprocessing)
[kernel] output/031.c:11: 
  syntax error:
  Location: line 11, column 0
  9               loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> (m == \at(m, Pre));
  10              loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> (n == \at(n, Pre));
  11                    */
        ^
[kernel] Frama-C aborted: invalid user input.

after repair

    
/* >>> LOOP INVARIANT TO FILL <<< */

/*@ 
          loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (j < \at(n, Pre) && j >= 0))) ;
          loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (j < \at(m))) ;
          loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (k <= \at(m, Pre))) ;
          loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((!(0 < \at(n, Pre))) ==> ((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)));
          loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> (m == \at(m, Pre));
          loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> (n == \at(n, Pre));
                */

syntax Error
[kernel] Parsing output/031.c (with preprocessing)
[kernel:annot-error] output/031.c:7: Warning: unexpected token ')'
[kernel] User Error: warning annot-error treated as fatal error.
[kernel] Frama-C aborted: invalid user input.

syntax Error
[kernel] Parsing output/031.c (with preprocessing)
[kernel:annot-error] output/031.c:7: Warning: unexpected token ')'
[kernel] User Error: warning annot-error treated as fatal error.
[kernel] Frama-C aborted: invalid user input.


    
/* >>> LOOP INVARIANT TO FILL <<< */

/*@ 
          loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (j < \at(n, Pre) && j >= 0))) ;
          loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (j < \at(m))) ;
          loop invariant  (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((0 < \at(n, Pre)) ==> (((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)) || (k <= \at(m, Pre))) ;
          loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> ((!(0 < \at(n, Pre))) ==> ((m == \at(m, Pre))&&(n == \at(n, Pre))&&(k == \at(k, Pre))&&(j == \at(j, Pre))&&(i == 0)));
          loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> (m == \at(m, Pre));
          loop invariant (\at(m, Pre) + 1 < \at(n, Pre)) ==> (n == \at(n, Pre));
                */
转换后

    
/* >>> LOOP INVARIANT TO FILL <<< */

/*@ Inv
    ((m@pre + 1 < n@pre) => ((0 < n@pre) => (((m == m@pre)&&(n == n@pre)&&(k == k@pre)&&(j == j@pre)&&(i == 0)) || (j < n@pre && j >= 0))) ) &&
((m@pre + 1 < n@pre) => ((0 < n@pre) => (((m == m@pre)&&(n == n@pre)&&(k == k@pre)&&(j == j@pre)&&(i == 0)) || (j < \at(m))) ) &&
((m@pre + 1 < n@pre) => ((0 < n@pre) => (((m == m@pre)&&(n == n@pre)&&(k == k@pre)&&(j == j@pre)&&(i == 0)) || (k <= m@pre)) ) &&
((m@pre + 1 < n@pre) => ((!(0 < n@pre)) => ((m == m@pre)&&(n == n@pre)&&(k == k@pre)&&(j == j@pre)&&(i == 0)))) &&
((m@pre + 1 < n@pre) => (m == m@pre)) &&
((m@pre + 1 < n@pre) => (n == n@pre))
    */
syntax Error
[kernel] Parsing output/031.c (with preprocessing)
[kernel:annot-error] output/031.c:7: Warning: unexpected token ')'
[kernel] User Error: warning annot-error treated as fatal error.
[kernel] Frama-C aborted: invalid user input.

after repair

/* >>> LOOP INVARIANT TO FILL <<< */

/*@ Inv
    ((m@pre + 1 < n@pre) => ((0 < n@pre) => (((m == m@pre)&&(n == n@pre)&&(k == k@pre)&&(j == j@pre)&&(i == 0)) || (j < n@pre && j >= 0))) ) &&
    ((m@pre + 1 < n@pre) => ((0 < n@pre) => (((m == m@pre)&&(n == n@pre)&&(k == k@pre)&&(j == j@pre)&&(i == 0)) || (j < m@pre))) ) &&
    ((m@pre + 1 < n@pre) => ((0 < n@pre) => (((m == m@pre)&&(n == n@pre)&&(k == k@pre)&&(j == j@pre)&&(i == 0)) || (k <= m@pre))) ) &&
    ((m@pre + 1 < n@pre) => ((!(0 < n@pre)) => ((m == m@pre)&&(n == n@pre)&&(k == k@pre)&&(j == j@pre)&&(i == 0)))) &&
    ((m@pre + 1 < n@pre) => (m == m@pre)) &&
    ((m@pre + 1 < n@pre) => (n == n@pre))
    */
   
syntax Error
[kernel] Parsing output/031.c (with preprocessing)
[kernel:annot-error] output/031.c:5: Warning: unexpected token '('
[kernel] User Error: warning annot-error treated as fatal error.
[kernel] Frama-C aborted: invalid user input.

syntax Error
[kernel] Parsing output/031.c (with preprocessing)
[kernel:annot-error] output/031.c:5: Warning: unexpected token '('
[kernel] User Error: warning annot-error treated as fatal error.
[kernel] Frama-C aborted: invalid user input.


/* >>> LOOP INVARIANT TO FILL <<< */

/*@ Inv
    ((m@pre + 1 < n@pre) => ((0 < n@pre) => (((m == m@pre)&&(n == n@pre)&&(k == k@pre)&&(j == j@pre)&&(i == 0)) || (j < n@pre && j >= 0))) ) &&
    ((m@pre + 1 < n@pre) => ((0 < n@pre) => (((m == m@pre)&&(n == n@pre)&&(k == k@pre)&&(j == j@pre)&&(i == 0)) || (j < m@pre))) ) &&
    ((m@pre + 1 < n@pre) => ((0 < n@pre) => (((m == m@pre)&&(n == n@pre)&&(k == k@pre)&&(j == j@pre)&&(i == 0)) || (k <= m@pre))) ) &&
    ((m@pre + 1 < n@pre) => ((!(0 < n@pre)) => ((m == m@pre)&&(n == n@pre)&&(k == k@pre)&&(j == j@pre)&&(i == 0)))) &&
    ((m@pre + 1 < n@pre) => (m == m@pre)) &&
    ((m@pre + 1 < n@pre) => (n == n@pre))
    */
  
转换后

/* >>> LOOP INVARIANT TO FILL <<< */

/*@ Inv
    (Inv
    ((m@pre + 1 < n@pre) => ((0 < n@pre) => (((m == m@pre)&&(n == n@pre)&&(k == k@pre)&&(j == j@pre)&&(i == 0)) || (j < n@pre && j >= 0))) ) &&
    ((m@pre + 1 < n@pre) => ((0 < n@pre) => (((m == m@pre)&&(n == n@pre)&&(k == k@pre)&&(j == j@pre)&&(i == 0)) || (j < m@pre))) ) &&
    ((m@pre + 1 < n@pre) => ((0 < n@pre) => (((m == m@pre)&&(n == n@pre)&&(k == k@pre)&&(j == j@pre)&&(i == 0)) || (k <= m@pre))) ) &&
    ((m@pre + 1 < n@pre) => ((!(0 < n@pre)) => ((m == m@pre)&&(n == n@pre)&&(k == k@pre)&&(j == j@pre)&&(i == 0)))) &&
    ((m@pre + 1 < n@pre) => (m == m@pre)) &&
    ((m@pre + 1 < n@pre) => (n == n@pre)))
    */
  
syntax Error
[kernel] Parsing output/031.c (with preprocessing)
[kernel:annot-error] output/031.c:5: Warning: unexpected token '('
[kernel] User Error: warning annot-error treated as fatal error.
[kernel] Frama-C aborted: invalid user input.

syntax Error
[kernel] Parsing output/031.c (with preprocessing)
[kernel:annot-error] output/031.c:5: Warning: unexpected token '('
[kernel] User Error: warning annot-error treated as fatal error.
[kernel] Frama-C aborted: invalid user input.

RESULT PASS_1
0
0
0
RESULT PASS_3
0
0
0
RESULT PASS_5
0
0
0
已移动文件: 031.c -> finish
-----------------------------------------

文件 031.c 处理完成. 总耗时: 203.33771657943726
finshed_files:['032.c', '06.c', '031.c']
错误的文件名:
  - 06.c
  - 031.c
========================================
正确文件:['032.c']
错误文件：['06.c', '031.c']
------------------------------------------------------------
错误的文件名:
  - 06.c
  - 031.c
========================================
正确文件:['032.c']
错误文件：['06.c', '031.c']
------------------------------------------------------------
错误的文件名:
  - 06.c
  - 031.c
========================================
正确文件:['032.c']
错误文件：['06.c', '031.c']
-----------------------------------------
