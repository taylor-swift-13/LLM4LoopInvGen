file:123.c
Successfully generated loop/123.json
INNER_FLAG: False
Variable Maps: [{'sn': '0', 'i': '1', 'v3': 'v3@pre', 'v2': 'v2@pre', 'v1': 'v1@pre', 'size': 'size@pre'}]
Path conditions: [None]
Pre condition: (sn == 0) * (i == 1) * (v3 == v3@pre) * (v2 == v2@pre) * (v1 == v1@pre) * (size == size@pre)
Loop Condition: i <= size
Updated Loop Conditions: ['1 <= size@pre']
Global Unchanged Variables ['v3', 'v2', 'v1', 'size']
Non Inductive Variables []
[{'sn': '0', 'i': '1', 'v3': 'v3@pre', 'v2': 'v2@pre', 'v1': 'v1@pre', 'size': 'size@pre'}]
[None]

            
    /* >>> LOOP INVARIANT TO FILL <<< 
       >>> PRECONDITION OF THE LOOP : (sn == 0) * (i == 1) * (v3 == \at(v3, Pre)) * (v2 == \at(v2, Pre)) * (v1 == \at(v1, Pre)) * (size == \at(size, Pre)) <<< */
    
            /*@
          loop invariant v3 == \at(v3, Pre);
          loop invariant v2 == \at(v2, Pre);
          loop invariant v1 == \at(v1, Pre);
          loop invariant size == \at(size, Pre);
            */
            while (i <= size) {
  
      i  = (i + 1);
      sn  = (sn + 1);
      
    }
            

            
    /* >>> LOOP INVARIANT TO FILL <<< 
       >>> PRECONDITION OF THE LOOP : (sn == 0) * (i == 1) * (v3 == \at(v3, Pre)) * (v2 == \at(v2, Pre)) * (v1 == \at(v1, Pre)) * (size == \at(size, Pre)) <<< */
    
            /*@
          loop invariant (1 <= \at(size, Pre)) ==> (((sn == 0)&&(i == 1)&&(v3 == \at(v3, Pre))&&(v2 == \at(v2, Pre))&&(v1 == \at(v1, Pre))&&(size == \at(size, Pre))) || (PLACE_HOLDER_i));
          loop invariant (1 <= \at(size, Pre)) ==> (((sn == 0)&&(i == 1)&&(v3 == \at(v3, Pre))&&(v2 == \at(v2, Pre))&&(v1 == \at(v1, Pre))&&(size == \at(size, Pre))) || (PLACE_HOLDER_sn));
          loop invariant (!(1 <= \at(size, Pre))) ==> ((sn == 0)&&(i == 1)&&(v3 == \at(v3, Pre))&&(v2 == \at(v2, Pre))&&(v1 == \at(v1, Pre))&&(size == \at(size, Pre)));
          loop invariant v3 == \at(v3, Pre);
          loop invariant v2 == \at(v2, Pre);
          loop invariant v1 == \at(v1, Pre);
          loop invariant size == \at(size, Pre);
            */
            while (i <= size) {
  
      i  = (i + 1);
      sn  = (sn + 1);
      
    }
            
void foo(int size,int v1,int v2,int v3) {
 
    int i = 1;
    int sn = 0;
    
     
    
            
    /* >>> LOOP INVARIANT TO FILL <<< 
       >>> PRECONDITION OF THE LOOP : (sn == 0) * (i == 1) * (v3 == \at(v3, Pre)) * (v2 == \at(v2, Pre)) * (v1 == \at(v1, Pre)) * (size == \at(size, Pre)) <<< */
    
            /*@
          loop invariant (1 <= \at(size, Pre)) ==> (((sn == 0)&&(i == 1)&&(v3 == \at(v3, Pre))&&(v2 == \at(v2, Pre))&&(v1 == \at(v1, Pre))&&(size == \at(size, Pre))) || (PLACE_HOLDER_i));
          loop invariant (1 <= \at(size, Pre)) ==> (((sn == 0)&&(i == 1)&&(v3 == \at(v3, Pre))&&(v2 == \at(v2, Pre))&&(v1 == \at(v1, Pre))&&(size == \at(size, Pre))) || (PLACE_HOLDER_sn));
          loop invariant (!(1 <= \at(size, Pre))) ==> ((sn == 0)&&(i == 1)&&(v3 == \at(v3, Pre))&&(v2 == \at(v2, Pre))&&(v1 == \at(v1, Pre))&&(size == \at(size, Pre)));
          loop invariant v3 == \at(v3, Pre);
          loop invariant v2 == \at(v2, Pre);
          loop invariant v1 == \at(v1, Pre);
          loop invariant size == \at(size, Pre);
            */
            while (i <= size) {
  
      i  = (i + 1);
      sn  = (sn + 1);
      
    }
            
  
    /*@ assert (sn != 0) ==> (sn == size);*/
  
  }
<think>Let me analyze this C program with a loop and identify the appropriate loop invariants to fill in the placeholders.

First, let's understand what the program does:

1. The function `foo` takes 4 parameters: `size`, `v1`, `v2`, and `v3`.
2. It initializes `i = 1` and `sn = 0`.
3. There's a loop that runs as long as `i <= size`.
4. In each iteration, `i` is incremented by 1 and `sn` is incremented by 1.
5. After the loop, there's an assertion that if `sn != 0`, then `sn == size`.

Now, let me understand the structure of the invariants:

1. The first invariant seems to be about the variable `i`.
2. The second invariant seems to be about the variable `sn`.
3. The third invariant handles the case where `1 <= size` doesn't hold.
4. The last four invariants state that `v3`, `v2`, `v1`, and `size` remain unchanged.

For the placeholders, I need to fill in:
- `PLACE_HOLDER_i`: A condition about `i`.
- `PLACE_HOLDER_sn`: A condition about `sn`.

Let's think about what happens in the loop:
- `i` starts at 1 and increases by 1 in each iteration, so at any point, `i` will be between 1 and `size + 1` (because the loop terminates when `i > size`).
- `sn` starts at 0 and increases by 1 in each iteration, so `sn` will be equal to `i - 1` at all times.

Now, let's fill in the placeholders:

For `PLACE_HOLDER_i`, it should be a condition that's true throughout the loop execution. We know `i` is always at least 1 and at most `size + 1` (when the loop is about to terminate). So, `1 <= i <= size + 1` would be a valid invariant. But since this is the first iteration of the loop or subsequent iterations, we need to express it in a way that accounts for the progress through the loop. Since `i` increases by 1 in each iteration, and `i` starts at 1, we can say `1 <= i <= size + 1` for all iterations. Considering the structure of the invariant in the loop, I think the appropriate fill-in would be `(1 <= i) && (i <= size + 1)`.

For `PLACE_HOLDER_sn`, we know that `sn` starts at 0 and increases by 1 for each increment of `i`. So, `sn` is always equal to `i - 1`. This gives us `sn == i - 1`.

Let's double-check these invariants:

1. Establishment:
   - Before the loop, `i = 1` and `sn = 0`.
   - `1 <= 1 <= size + 1` holds (assuming `size` is at least 0), and `sn = 0 = 1 - 1 = i - 1` holds.

2. Preservation:
   - If at the start of an iteration, `1 <= i <= size + 1` and `sn = i - 1`, then at the end:
     - `i_new = i + 1`, so `1 <= i + 1 <= size + 2` (but since `i <= size` for the loop to continue, we have `i + 1 <= size + 1`, so `1 <= i_new <= size + 1`).
     - `sn_new = sn + 1 = (i - 1) + 1 = i = i_new - 1`.

3. Termination:
   - The loop terminates when `i > size`, which means `i = size + 1` (the first i value that's greater than size).
   - At this point, `sn = i - 1 = (size + 1) - 1 = size`.
   - If the loop never executes (i.e., if `size < 1` initially), then `i = 1` and `sn = 0`, which still satisfies the post-condition since `sn = 0` is not `sn != 0`.

4. Post-condition:
   - The post-condition asserts that if `sn != 0`, then `sn = size`.
   - We've established that at the end of the loop, `sn = size` if the loop executes at least once, which means `size >= 1`. If `size < 1`, then the loop doesn't execute, and `sn` remains 0.

Given all this, I think the correct invariants are:
- `PLACE_HOLDER_i`: `(1 <= i) && (i <= size + 1)`
- `PLACE_HOLDER_sn`: `sn == i - 1`

Actually, upon closer examination of the invariant structure in the loop, I see that the invariants are structured in a specific way. The invariants are conditional, based on whether `1 <= \at(size, Pre)` holds. The placeholder is part of a larger condition, which comes after the `||` operator. This means the invariant is saying that either the initial condition holds (i.e., we're before the loop or at the start of the first iteration) or the placeholder condition holds. I should adjust my fillings accordingly:

For `PLACE_HOLDER_i`, it should be something that's true after the first iteration of the loop, which is `(1 < i) && (i <= size + 1)`. But I see the structure is different. It's part of a larger condition, so I'll adjust it.

Actually, let me reconsider the structure of these invariants. The invariants are saying:
1. If `1 <= size`, then either the initial condition holds or the placeholder condition holds.
2. If `1 > size`, then the initial condition holds.

Given the structure of these invariants and the fact that the placeholders are part of a disjunction with the initial condition, the placeholders should represent the state of the program after some iterations of the loop.

For `PLACE_HOLDER_i`, it should be a condition that correctly describes `i` after some iterations. Given that `i` starts at 1 and increases by 1 in each iteration, an appropriate condition would be `(1 < i) && (i <= size + 1)`.

For `PLACE_HOLDER_sn`, it should be a condition that correctly describes `sn` after some iterations. Given that `sn` starts at 0 and increases by 1 in each iteration, an appropriate condition would be `(0 < sn) && (sn == i - 1)`.

But upon re-reading the invariants, it seems that the placeholders are not meant to be complete conditions but parts of a larger condition. The structure of the invariant is:
```
loop invariant (1 <= \at(size, Pre)) ==> (((sn == 0)&&(i == 1)&&(v3 == \at(v3, Pre))&&(v2 == \at(v2, Pre))&&(v1 == \at(v1, Pre))&&(size == \at(size, Pre))) || (PLACE_HOLDER_i));
```

So, `PLACE_HOLDER_i` should be a condition that's true after the first iteration and that can be OR'd with the initial condition to give a complete invariant.

Looking at the initial condition: `(sn == 0)&&(i == 1)&&(v3 == \at(v3, Pre))&&(v2 == \at(v2, Pre))&&(v1 == \at(v1, Pre))&&(size == \at(size, Pre))`.

After some iterations, `sn` and `i` will have changed, but the other variables remain the same. So, `PLACE_HOLDER_i` should be a condition that describes the state of `i` and `sn` after some iterations, while still keeping the other variables the same. So I think `PLACE_HOLDER_i` should be `((1 < i) && (i <= size + 1) && (sn == i - 1) && (v3 == \at(v3, Pre)) && (v2 == \at(v2, Pre)) && (v1 == \at(v1, Pre)) && (size == \at(size, Pre)))`.

But I'm not sure if we need to include the conditions about the other variables, as they are already covered in separate invariants.

Actually, I think I'm misunderstanding how the invariants are structured. Let me re-analyze based on the variable names in the placeholders:

- `PLACE_HOLDER_i` should be a condition about `i`.
- `PLACE_HOLDER_sn` should be a condition about `sn`.

Given the structure of the invariants, I think the placeholders are conditions that complement the initial condition to form a complete invariant. 

So, for `PLACE_HOLDER_i`, it should be a condition about `i` that's true after the first iteration, which is `(1 < i) && (i <= size + 1)`.

For `PLACE_HOLDER_sn`, it should be a condition about `sn` that's true after the first iteration, which is `(0 < sn) && (sn == i - 1)`.

Hmm, but this doesn't fit the structure as written. The way I'm reading this, it's saying "If size is at least 1, then either the initial condition holds or the placeholder condition holds." So the placeholders should be complete alternative states that can be true.

Oh, I think I understand the structure now. The invariants are saying that at any point in the loop, one of two states holds: either we're at the very beginning (the initial condition) or we're in some intermediate state (described by the placeholder).

Given this, `PLACE_HOLDER_i` should describe the state of `i` in all intermediate states, which is `(1 < i) && (i <= size + 1)`.
And `PLACE_HOLDER_sn` should describe the state of `sn` in all intermediate states, which is `(0 < sn) && (sn == i - 1)`.

Actually, let me simplify. The goal is to have a loop invariant that helps prove the post-condition.
Let's step back and think:
1. The post-condition is `(sn != 0) ==> (sn == size)`, which means if `sn` is not zero, then it's equal to `size`.
2. Let's make sure this holds:
   - If the loop never executes (i.e., `size < 1` initially), then `sn` remains 0, and the post-condition is trivially true.
   - If the loop executes at least once, then `sn` becomes non-zero. In fact, `sn` will be equal to the number of iterations, which is `size` when the loop completes.

So, the invariants should express that:
- If the loop has started executing (`i > 1`), then `sn` is equal to `i - 1`.
- If the loop has not yet started executing (`i = 1`), then `sn` is 0.

For simplicity, I'll use:
- `PLACE_HOLDER_i`: `(1 < i) && (i <= size + 1)`
- `PLACE_HOLDER_sn`: `(0 < sn) && (sn == i - 1)`

These conditions correctly describe the state of `i` and `sn` after some iterations of the loop, and they can be used in conjunction with the initial conditions to form complete invariants.

Ah, thinking again about the structure, for the "i" invariant we're saying: "If size is at least 1, then either the initial condition holds or the placeholder_i holds." So, the placeholder_i should be a condition that describes all possible states of the variables after some iterations, except for the initial state. Given this, I think the filling should be:

For `PLACE_HOLDER_i`: `(1 < i) && (i <= size + 1) && (sn == i - 1)`

But for the sn invariant, we're just saying "If size is at least 1, then either the initial condition holds or the placeholder_sn holds." So, placeholder_sn should similarly describe all non-initial states.

For `PLACE_HOLDER_sn`: `(sn > 0) && (sn == i - 1) && (1 < i) && (i <= size + 1)`

But if both invariants must hold true throughout the loop, then there's no point in having redundant conditions. So, maybe the intention is for placeholder_i to focus on the constraints for i, and placeholder_sn to focus on the constraints for sn. In that case:

For `PLACE_HOLDER_i`: `(1 < i) && (i <= size + 1)`
For `PLACE_HOLDER_sn`: `(sn > 0) && (sn == i - 1)`

I'm curious how the problem is structured, because the placeholders being parts of larger disjunctions seems a bit unusual. Let me re-read the problem statement and see if I missed something.

Ok, I am to fill in the placeholders PLACE_HOLDER_i and PLACE_HOLDER_sn with appropriate logical expressions to make the invariants meaningful and valid while preserving the overall structure.

Given that, I think my last interpretation is the most plausible:
For `PLACE_HOLDER_i`: `(1 < i) && (i <= size + 1)`
For `PLACE_HOLDER_sn`: `(sn > 0) && (sn == i - 1)`

These conditions capture the evolving state of `i` and `sn` respectively, and they can be OR'd with the initial condition to form complete invariants. Let's check once more:

For `PLACE_HOLDER_i`:
- Establishment: Before the loop, `i = 1`, so the condition `(1 < i)` doesn't hold, but the full invariant holds because the initial condition is true.
- Preservation: If `(1 < i) && (i <= size + 1)` holds at the start of an iteration, then after i = i + 1, we have `(1 < i + 1) && (i + 1 <= size + 1)` if `i <= size` (which is true for the loop to continue). This reduces to `(1 < i + 1) && (i + 1 <= size + 1)`, which holds.

For `PLACE_HOLDER_sn`:
- Establishment: Before the loop, `sn = 0`, so the condition `(sn > 0)` doesn't hold, but the full invariant holds because the initial condition is true.
- Preservation: If `(sn > 0) && (sn == i - 1)` holds at the start of an iteration, then after sn = sn + 1 and i = i + 1, we have `(sn + 1 > 0) && (sn + 1 == (i + 1) - 1)`, which simplifies to `(sn + 1 > 0) && (sn + 1 == i)`. This holds true.

I believe these invariants are correct, but I'm a bit concerned about the constraints on `i` and `sn`. For `i`, it's clear that `1 <= i <= size + 1` throughout the loop. For `sn`, it's clear that `0 <= sn <= size` throughout the loop. But the invariants I've proposed for the placeholders are explicitly for states after at least one iteration, so they use `1 < i` and `sn > 0`. I hope that's the correct approach for these particular placeholders.

I've reconsidered the invariants and think this is correct:
For `PLACE_HOLDER_i`: `(1 < i) && (i <= size + 1)`
For `PLACE_HOLDER_sn`: `(0 < sn) && (sn == i - 1)`</think>

# Loop Invariant Analysis for C Program

## a. Purpose and Structure of the Loop

The purpose of this loop is to count from 1 to `size`. It initializes two variables: `i` starting at 1 and `sn` starting at 0. In each iteration, both `i` and `sn` are incremented by 1. The loop continues as long as `i <= size`. 

The loop's structure:
- Loop condition: `i <= size`
- Initialization: `i = 1`, `sn = 0`
- Loop body: increment both `i` and `sn` by 1
- Variables: `i` (counter), `sn` (sum), and parameters `size`, `v1`, `v2`, `v3` (which remain unchanged)

## b. Discussion of the Loop Invariant

The proposed loop invariants:
1. A relationship defining the valid states of `i` throughout execution
2. A relationship defining the valid states of `sn` throughout execution
3. A condition for when the loop doesn't execute at all
4. Assertions that the input parameters remain unchanged

The key invariant relationships capture that `i` starts at 1 and increases to at most `size+1`, and that `sn` is always equal to `i-1`. These invariants are valid because they hold before the loop, are maintained by each iteration, and help establish the post-condition.

## c. Establishment

The invariants are established before the loop begins:
- Initially `i = 1`, so `1 <= i` holds
- Initially `sn = 0`, which equals `i-1`
- The four parameters are unchanged from their initial values
- The conditional part of the first three invariants holds because it either matches the initial state or is based on a valid implication

## d. Preservation

For each iteration:
- If `1 < i <= size+1` and `sn = i-1` hold at the start, after executing `i = i+1` and `sn = sn+1`, we have:
  - The new value of `i` is still between 1 and `size+1` (since we only enter the loop if `i <= size`)
  - The new value of `sn` equals `(i-1)+1 = i`, which is `(i+1)-1`, maintaining the relationship with the new value of `i`
- The remaining invariants about the unchanging parameters continue to hold

## e. Termination Analysis

The loop terminates when `i > size`. At this point:
- `i` equals `size+1` (the first value that exceeds `size`)
- `sn` equals `i-1 = size` (since `sn` always equals `i-1`)
- If the loop executed at least once, then `sn > 0` and `sn = size`
- If the loop never executed (when `size < 1`), then `sn = 0` and `i = 1`

## f. Correctness of the Post-condition

The post-condition is `(sn != 0) ==> (sn == size)`. When the loop terminates:
- If `size >= 1`, the loop executes at least once, resulting in `sn = size > 0`, making the post-condition true
- If `size < 1`, the loop doesn't execute, leaving `sn = 0`, making the premise of the implication false, and thus the entire post-condition is vacuously true

## g. Implication of the Pre-condition

The pre-condition `(sn == 0) * (i == 1) * (v3 == \at(v3, Pre)) * (v2 == \at(v2, Pre)) * (v1 == \at(v1, Pre)) * (size == \at(size, Pre))` directly establishes the loop invariant since:
- It sets the initial values of `sn = 0` and `i = 1`, which satisfy our invariant relationship `sn = i-1`
- It guarantees that the parameters are unchanged from their initial values
- These initial values match exactly the base case covered in our invariants

## Complete C Loop Program with Filled Invariants

```c
void foo(int size,int v1,int v2,int v3) {
 
    int i = 1;
    int sn = 0;
    
     
    
            
    /* >>> LOOP INVARIANT TO FILL <<< 
       >>> PRECONDITION OF THE LOOP : (sn == 0) * (i == 1) * (v3 == \at(v3, Pre)) * (v2 == \at(v2, Pre)) * (v1 == \at(v1, Pre)) * (size == \at(size, Pre)) <<< */
    
            /*@
          loop invariant (1 <= \at(size, Pre)) ==> (((sn == 0)&&(i == 1)&&(v3 == \at(v3, Pre))&&(v2 == \at(v2, Pre))&&(v1 == \at(v1, Pre))&&(size == \at(size, Pre))) || ((1 < i) && (i <= size + 1)));
          loop invariant (1 <= \at(size, Pre)) ==> (((sn == 0)&&(i == 1)&&(v3 == \at(v3, Pre))&&(v2 == \at(v2, Pre))&&(v1 == \at(v1, Pre))&&(size == \at(size, Pre))) || ((0 < sn) && (sn == i - 1)));
          loop invariant (!(1 <= \at(size, Pre))) ==> ((sn == 0)&&(i == 1)&&(v3 == \at(v3, Pre))&&(v2 == \at(v2, Pre))&&(v1 == \at(v1, Pre))&&(size == \at(size, Pre)));
          loop invariant v3 == \at(v3, Pre);
          loop invariant v2 == \at(v2, Pre);
          loop invariant v1 == \at(v1, Pre);
          loop invariant size == \at(size, Pre);
            */
            while (i <= size) {
  
      i  = (i + 1);
      sn  = (sn + 1);
      
    }
            
  
    /*@ assert (sn != 0) ==> (sn == size);*/
  
  }
```

void foo(int size,int v1,int v2,int v3) {
 
    int i = 1;
    int sn = 0;
    
     
    
            
            /*@
          loop invariant (1 <= \at(size, Pre)) ==> (((sn == 0)&&(i == 1)&&(v3 == \at(v3, Pre))&&(v2 == \at(v2, Pre))&&(v1 == \at(v1, Pre))&&(size == \at(size, Pre))) || ((1 < i) && (i <= size + 1)));
          loop invariant (1 <= \at(size, Pre)) ==> (((sn == 0)&&(i == 1)&&(v3 == \at(v3, Pre))&&(v2 == \at(v2, Pre))&&(v1 == \at(v1, Pre))&&(size == \at(size, Pre))) || ((0 < sn) && (sn == i - 1)));
          loop invariant (!(1 <= \at(size, Pre))) ==> ((sn == 0)&&(i == 1)&&(v3 == \at(v3, Pre))&&(v2 == \at(v2, Pre))&&(v1 == \at(v1, Pre))&&(size == \at(size, Pre)));
          loop invariant v3 == \at(v3, Pre);
          loop invariant v2 == \at(v2, Pre);
          loop invariant v1 == \at(v1, Pre);
          loop invariant size == \at(size, Pre);
            */
            while (i <= size) {
  
      i  = (i + 1);
      sn  = (sn + 1);
      
    }
            
  
    /*@ assert (sn != 0) ==> (sn == size);*/
  
  }


void foo(int size,int v1,int v2,int v3) {
 
    int i = 1;
    int sn = 0;
    
     
    
            
            /*@
          loop invariant (1 <= \at(size, Pre)) ==> (((sn == 0)&&(i == 1)&&(v3 == \at(v3, Pre))&&(v2 == \at(v2, Pre))&&(v1 == \at(v1, Pre))&&(size == \at(size, Pre))) || ((1 < i) && (i <= size + 1)));
          loop invariant (1 <= \at(size, Pre)) ==> (((sn == 0)&&(i == 1)&&(v3 == \at(v3, Pre))&&(v2 == \at(v2, Pre))&&(v1 == \at(v1, Pre))&&(size == \at(size, Pre))) || ((0 < sn) && (sn == i - 1)));
          loop invariant (!(1 <= \at(size, Pre))) ==> ((sn == 0)&&(i == 1)&&(v3 == \at(v3, Pre))&&(v2 == \at(v2, Pre))&&(v1 == \at(v1, Pre))&&(size == \at(size, Pre)));
          loop invariant v3 == \at(v3, Pre);
          loop invariant v2 == \at(v2, Pre);
          loop invariant v1 == \at(v1, Pre);
          loop invariant size == \at(size, Pre);
            */
            while (i <= size) {
  
      i  = (i + 1);
      sn  = (sn + 1);
      
    }
            
  
    /*@ assert (sn != 0) ==> (sn == size);*/
  
  }

syntax Correct
Validate:
[True, True, True, True, True, True, True]

Verify:
[True]

CORRECT INVARIANT
syntax Correct
Validate:
[True, True, True, True, True, True, True]

Verify:
[True]

syntax Correct
Validate:
[True, True, True, True, True, True, True]

Verify:
[True]

已移动文件: 123.c -> finish
-----------------------------------------

文件 123.c 处理完成. 总耗时: 124.29286623001099
-----------------------------------------
finshed_files:['132.c', '70.c', '121.c', '94.c', '109.c', '61.c', '120.c', '42.c', '33.c', '17.c', '105.c', '101.c', '38.c', '40.c', '88.c', '4.c', '114.c', '8.c', '84.c', '83.c', '111.c', '47.c', '14.c', '49.c', '131.c', '119.c', '43.c', '50.c', '56.c', '18.c', '53.c', '35.c', '10.c', '28.c', '26.c', '73.c', '89.c', '126.c', '96.c', '57.c', '37.c', '36.c', '92.c', '68.c', '115.c', '71.c', '91.c', '22.c', '19.c', '124.c', '52.c', '100.c', '95.c', '90.c', '86.c', '128.c', '62.c', '77.c', '79.c', '108.c', '129.c', '34.c', '123.c']
